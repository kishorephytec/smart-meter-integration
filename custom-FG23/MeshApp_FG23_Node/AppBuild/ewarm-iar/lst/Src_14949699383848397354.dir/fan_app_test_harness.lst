###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         24/Dec/2024  14:55:15
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
#    Command line                 =
#        -f
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\fan_app_test_harness.o.rsp
#        (C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
#        -D EFR32FG23A020F512GM40=1 -D SL_COMPONENT_CATALOG_PRESENT=1 -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -lC
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir
#        --diag_suppress Pa050 -o
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse -e --fpu=VFPv5_sp --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\.\ -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\AppConfigs\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\config\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\autogen\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\HAL\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\NVM\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\buffer_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\event_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\list_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\queue_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\timer_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\hif\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\raw_uart_if\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\debug_console\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\Device\SiliconLabs\EFR32FG23\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\device_init\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\common\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\mpu\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\common\toolchain\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\system\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\network-manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\RAIL_TRX\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\MAC\Inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\wisun_modified\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\FANApp\AppInc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_callbacks\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ip\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ipv6\multicast\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ipv6\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\rpl\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\OS_interface\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\L2_L3_interface\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\cpu\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\Interface_Layer\contiki_mac_interface_layer\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\Interface_Layer\mac_sicslowpan_if\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emlib\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\platform\p3_lp_dk\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\common\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\efr32xg1x\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_protocol\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_rssi\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\MeterApp\Inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emdrv\common\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\FLASH\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\APP_LOG\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\response_print\config\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\response_print\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\NVM\nvm3\inc\
#        -On --use_c++_inline) --dependencies=n
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\fan_app_test_harness.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir\fan_app_test_harness.lst
#    Object file                  =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\fan_app_test_harness.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
      1          /** \file fan_app_test_harness.c
      2           *******************************************************************************
      3           ** \brief Implements the finctions for testing the FAN stack using 
      4           **             Procubed Stack Validation tool and TBC
      5           **
      6           ** \cond STD_FILE_HEADER
      7           **
      8           ** COPYRIGHT(c) 2023-24 Procubed Innovations Pvt Ltd.
      9           ** All rights reserved.
     10           **
     11           ** THIS SOFTWARE IS PROVIDED BY "AS IS" AND ALL WARRANTIES OF ANY KIND,
     12           ** INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR USE,
     13           ** ARE EXPRESSLY DISCLAIMED.  THE DEVELOPER SHALL NOT BE LIABLE FOR ANY
     14           ** DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. THIS SOFTWARE
     15           ** MAY NOT BE USED IN PRODUCTS INTENDED FOR USE IN IMPLANTATION OR OTHER
     16           ** DIRECT LIFE SUPPORT APPLICATIONS WHERE MALFUNCTION MAY RESULT IN THE DIRECT
     17           ** PHYSICAL HARM OR INJURY TO PERSONS. ALL SUCH IS USE IS EXPRESSLY PROHIBITED.
     18           **
     19           *******************************************************************************
     20           **  \endcond
     21           */
     22          
     23          /*
     24          ********************************************************************************
     25          * File inclusion
     26          ********************************************************************************
     27          */
     28          
     29          #include "StackAppConf.h"
     30          #include "common.h"
     31          #include "em_device.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SystemReset(void)
   \                     __NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x.... 0x....      LDR.W    R2,??DataTable9
   \        0x8   0x6811             LDR      R1,[R2, #+0]
   \        0xA   0xF411 0x61E0      ANDS     R1,R1,#0x700
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \       0x12   0x4301             ORRS     R1,R0,R1
   \       0x14   0x6011             STR      R1,[R2, #+0]
   \       0x16   0xF3BF 0x8F4F      DSB      SY
   \                     ??__NVIC_SystemReset_0: (+1)
   \       0x1A   0xBF00             Nop
   \       0x1C   0xE7FD             B.N      ??__NVIC_SystemReset_0
     32          #include "list_latest.h"
     33          #include "queue_latest.h"
     34          #include "uart_hal.h"
     35          #include "mac.h"
     36          //[Kimbal]
     37          //#include "hif_utility.h"
     38          //#include "hif_service.h"
     39          #include "buff_mgmt.h"
     40          #include "buffer_service.h"
     41          #include "hw_tmr.h"
     42          #include "sw_timer.h"
     43          #include "mac_interface_layer.h"
     44          #include "fan_mac_security.h"
     45          #include "sm.h"
     46          #include "contiki-net.h"
     47          #include "ie_element_info.h"
     48          #include "fan_app_test_harness.h"
     49          #include "network-manager.h"
     50          #include "fan_api.h"
     51          #include "fan_app_auto.h"
     52          #include "fan_factorycmd.h"
     53          #include "fan_mac_security.h"
     54          
     55          /*
     56          ** =============================================================================
     57          ** Private Macro definitions
     58          ** =============================================================================
     59          */
     60          	
     61          #define VERSION_NUMBER  "1.0.2"
     62          
     63          /*
     64          ** =============================================================================
     65          ** Private Structures, Unions & enums Type Definitions
     66          ** =============================================================================
     67          **/
     68          
     69          enum modulation{
     70                FSK2,
     71                NOT_APLICABLE  
     72                };
     73          
     74          
     75          /*
     76          ** =============================================================================
     77          ** Private Variable Definitions
     78          ** =============================================================================
     79          */
     80          
     81          //[Kimbal]
     82          //static hif_service_t hif_fan_test;
     83          
     84          
     85          
     86          /*
     87          ** =============================================================================
     88          ** Private Function Prototypes
     89          ** =============================================================================
     90          */
     91          
     92          static void process_send_udp(uint8_t *buf, uint16_t length);
     93          extern void process_set_facort_mode_PA_level_api(uint8_t *buf, uint16_t length);
     94          
     95          /*
     96          ** =============================================================================
     97          ** External Variable Declarations
     98          ** =============================================================================
     99          */
    100          
    101          #if(APP_NVM_FEATURE_ENABLED == 1)
    102          extern void change_join_state_for_nvm();
    103          #endif
    104          extern fan_nwk_manager_sm_t fan_nwk_manager_app;
    105          /*Umesh : 30-01-2018*/
    106          extern bool upper_layer_started;
    107          extern volatile uint8_t load_wd;
    108          extern uint16_t icmv6_response_counter;
    109          extern uint8_t MACSecKey1[16];
    110          /*this varriable not used*/
    111          extern uint8_t send_udp(uint8_t *buf, uint16_t length);
    112          extern uint8_t key_id_index  ; 
    113          extern uint8_t relay_reply_flag;
    114          extern uint8_t authnt_interfac_id [8];
    115          extern uint8_t TANSIT_KMP_ID ;
    116          extern uint8_t trickle_IMIN;
    117          extern uint8_t trickle_IMAX;
    118          
    119          #ifdef WISUN_FAN_MAC  
    120          extern self_info_fan_mac_t mac_self_fan_info;
    121          extern fan_mac_security mac_key_list;
    122          #endif
    123          
    124          extern void App_factory_mode_channel_set();
    125          
    126          //[Kimbal]
    127          //extern hif_t hif;
    128          
    129          /*
    130          ** =============================================================================
    131          ** External Function Prototypes
    132          ** =============================================================================
    133          */
    134          
    135          /*UDP*/
    136          extern uint8_t send_udp_packets(uint8_t* p_buff);
    137          extern void process_udp_port_register(uint8_t *buf, uint16_t length);
    138          
    139          /*PING*/
    140          extern void send_icmpv6(uint8_t *buf, uint16_t length);
    141          
    142          /*Umesh : 30-01-2018*/
    143          //extern uint8_t send_udp(uint8_t *buf, uint16_t length);
    144          extern  void mem_reverse_cpy(uint8_t* dest, uint8_t* src, uint16_t len );
    145          //extern void nvm_erase_node_basic_info( void );
    146          extern void set_mac_security_enable_disable(uint8_t enable_security_flag);
    147          /*this varriable not used*/
    148          
    149          extern uint8_t send_hif_conf_cb( uint8_t cmd_id,uint8_t status );
    150          extern uint8_t send_hif_seckey_cb( uint8_t cmd_id,uint8_t* seckey );
    151          extern void trigger_echo_request( uint8_t* p_buff  );
    152          extern uint8_t process_telec_set_operating_country( uint8_t CountryCode  ) ;
    153          //extern void trigger_udp_request( uint8_t* p_buff );
    154          extern void send_host_apd_bootup();
    155          /*Umesh :  30-01-2018*/
    156          extern void send_mac_addr(uint8_t *buff , uint16_t len);
    157          /*this fuctions was defined this file and extern also used????*/
    158          extern uint8_t generate_MAC_Security_Key (uint8_t live_gtk_key_index,uint16_t len);
    159          extern void set_mac_security_on_LBR(uint8_t *rec_buff, uint16_t len);
    160          extern void set_mac_security_on_router_node(uint8_t *rec_buff, uint16_t len);
    161          
    162          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
    163          extern void send_data_to_eapol_relay_process(uint8_t *payload ,uint16_t payload_length);
    164          extern void send_eapol_data_to_mac_request(uint8_t *eapol_data, uint16_t data_len);
    165          void send_eapol_packt_to_lbr(uint8_t *buff , uint16_t len , uint8_t *self_addr);
    166          #endif
    167          
    168          extern uint8_t is_send_as_udp(uint8_t *data_ptr);
    169          extern uint8_t get_current_join_state();
    170          void trickle_timer_inconsistency_pc(void);
    171          void trickle_timer_consistency_pc(void);
    172          extern void add_dev_desc_on_MAC_for_security(uint8_t* macAddrOfNeighbour);
    173          extern void reset_incoming_frame_counter_for_stale_key (uint8_t stale_key_index);
    174          uint8_t set_revoaction_key(uint8_t *revoaction_list, uint16_t len);
    175          uint8_t set_lbr_mac_lifetime_config (uint32_t pmk_lifetime,
    176                                               uint32_t ptk_lifetime,
    177                                               uint32_t gtk_lifetime,
    178                                               uint32_t gtk_new_activation_time,
    179                                               uint32_t revocation_lifetime_reduction);
    180          void send_all_param_info_req (void);
    181          
    182          #if(FAN_FRQ_HOPPING_FEATURE_ENABLED == 1)
    183          void fan_freq_hop_start_hopping (void *);
    184          #endif
    185          
    186          void send_dhcp_data_to_server(uint8_t* buff,uint16_t len);
    187          void set_key_life_time(uint8_t *buf,uint16_t len);
    188          void send_revocation_key(uint8_t *buff , uint16_t len);
    189          void send_gtk_update_indication(uint8_t *pBuff,uint16_t len);
    190          void send_mac_security_set_request(uint8_t *pBuff,uint16_t len);
    191          void set_seq_key(uint8_t live_key_id_index);
    192          void send_gtkhash_to_hostapd(uint8_t *buff , uint16_t len);
    193          int get_join_state (void);
    194          /*
    195          ** =============================================================================
    196          ** Public Variables Definitions
    197          ** =============================================================================
    198          **/
    199          

   \                                 In section .data, align 4
    200          uint8_t phyModeMapArr[8]={1,2,4,8,16,32,64,128};
   \                     phyModeMapArr:
   \        0x0   0x01 0x02          DC8 1, 2, 4, 8, 16, 32, 64, 128
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x40 0x80

   \                                 In section .data, align 1
    201          uint8_t response_laye_ID = APP_DEF_LAYER_ID_TOOL;
   \                     response_laye_ID:
   \        0x0   0x02               DC8 2
    202          /*
    203          ** =============================================================================
    204          ** Public Function Prototypes
    205          ** =============================================================================
    206          */
    207          
    208          uint8_t gu2pcapp_capture_ns_conf(uint8_t status);
    209          void process_tx_sechedule_end(uint8_t);
    210          void process_tx_sechedule_start(uint8_t val);
    211          void fan_nwk_manager_init( );
    212          uint8_t gu2pcapp_node_config_set_conf( uint8_t status );
    213          
    214          
    215          /*
    216          ** =============================================================================
    217          ** Public Function Definitions
    218          ** =============================================================================
    219          */
    220          
    221          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    222          uint32_t ChangeEndianness(uint32_t value)
    223          {
   \                     ChangeEndianness: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    224              uint32_t result = 0;
   \        0x2   0x2000             MOVS     R0,#+0
    225              result |= (value & 0x000000FF) << 24;
   \        0x4   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
    226              result |= (value & 0x0000FF00) << 8;
   \        0x8   0x020A             LSLS     R2,R1,#+8
   \        0xA   0xF412 0x027F      ANDS     R2,R2,#0xFF0000
   \        0xE   0x4310             ORRS     R0,R2,R0
    227              result |= (value & 0x00FF0000) >> 8;
   \       0x10   0x000A             MOVS     R2,R1
   \       0x12   0x0A12             LSRS     R2,R2,#+8
   \       0x14   0xF412 0x427F      ANDS     R2,R2,#0xFF00
   \       0x18   0x4310             ORRS     R0,R2,R0
    228              result |= (value & 0xFF000000) >> 24;
   \       0x1A   0xEA50 0x6011      ORRS     R0,R0,R1, LSR #+24
    229              return result;
   \       0x1E   0x4770             BX       LR
    230          }
    231          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    232          enet_msg_t* allocate_hif_msg( uint16_t length )
    233          {
   \                     allocate_hif_msg: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
    234              enet_msg_t *msg = NULL;
   \        0x4   0x2400             MOVS     R4,#+0
    235          
    236              msg = (enet_msg_t *) app_bm_alloc( length + 6 );// 5 for including next and data_length members
   \        0x6   0x1DA8             ADDS     R0,R5,#+6
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x.... 0x....      BL       app_bm_alloc
    237          
    238              if (msg != NULL)
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD000             BEQ.N    ??allocate_hif_msg_0
    239              {
    240                  msg->data_length = length;
   \       0x12   0x8085             STRH     R5,[R0, #+4]
    241              }
    242              return msg;
   \                     ??allocate_hif_msg_0: (+1)
   \       0x14   0xBD32             POP      {R1,R4,R5,PC}
    243          }
    244          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    245          static void send_cmd_not_support()
    246          {
   \                     send_cmd_not_support: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    247            uint8_t host_pkt[2];
                           ^
Warning[Pe550]: variable "host_pkt" was set but never used
    248            host_pkt[0] = ACTIVE_CMD_NOT_SUPPORTED;
   \        0x2   0x20DC             MOVS     R0,#+220
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    249            host_pkt[1] = 1; 
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xF88D 0x0001      STRB     R0,[SP, #+1]
    250          //[Kimbal]
    251          //  hif_send_msg_up(host_pkt,2,response_laye_ID,PROTOCOL_ID_FOR_APP);
    252           
    253          }
   \        0xE   0xB001             ADD      SP,SP,#+4
   \       0x10   0x4770             BX       LR
    254          
    255          #if 0 
    256          /*----------------------------------------------------------------------------*/
    257          void free_hif_msg( enet_msg_t * msgp )
    258          {
    259              app_bm_free((uint8_t*)msgp);
    260          }
    261          
    262          
    263          /*----------------------------------------------------------------------------*/
    264          void APPhifForToolTest_Init(void)
    265          {
    266            hif_register_parser
    267               (
    268                    &hif,
    269                    &hif_fan_test,
    270                    APP_DEF_LAYER_ID_TOOL,
    271                    hif_2_App_Interface_cb
    272               );
    273            
    274          
    275          }
    276          #endif //#if 0 
    277          /*----------------------------------------------------------------------------*/
    278          
    279          //void process_set_brodcast_timing_info_ie(uint8_t *buf, uint16_t length)
    280          //{
    281          //  mem_rev_cpy((uint8_t*)&fan_nwk_manager_app.fan_mac_header_ie.bt_ie.broadcast_time_interval,buf,2);
    282          //  mem_rev_cpy((uint8_t*)&fan_nwk_manager_app.fan_mac_header_ie.bt_ie.broadcast_fraction_interval_offset,&buf[2],4);
    283          //  fan_nwk_manager_app.fan_mac_header_ie.bt_ie.length = length;
    284          //  send_hif_conf_cb(FAN_BROADCAST_TIMING_SET_CONFIRM,0x00);
    285          //}
    286          
    287          
    288          /*******************************************************************************
    289                    Application to HIF Send 
    290          *******************************************************************************/
    291          
    292          /*----------------------------------------------------------------------------*/
    293          
    294          
    295          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    296          uint8_t gu2pcapp_node_config_set_conf( uint8_t status )
    297          {
   \                     gu2pcapp_node_config_set_conf: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x2105             MOVS     R1,#+5
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x466D             MOV      R5,SP
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       __aeabi_memset
    298            uint8_t hif_Send_buff [5] = {0};
    299            uint8_t* buf = &hif_Send_buff[0];
   \       0x10   0x4669             MOV      R1,SP
    300            
    301            
    302            *buf++ = 0xE1;
   \       0x12   0x20E1             MOVS     R0,#+225
   \       0x14   0x7008             STRB     R0,[R1, #+0]
   \       0x16   0x1C48             ADDS     R0,R1,#+1
    303            *buf++ = status;//status
   \       0x18   0x7004             STRB     R4,[R0, #+0]
   \       0x1A   0x1C41             ADDS     R1,R0,#+1
    304            *buf++ = DUMMY_COMPORT;//Dummy Comport       
   \       0x1C   0x2055             MOVS     R0,#+85
   \       0x1E   0x7008             STRB     R0,[R1, #+0]
   \       0x20   0x1C49             ADDS     R1,R1,#+1
    305            //hif_send_msg_up(&hif_Send_buff[0], 2,response_laye_ID,PROTOCOL_ID_FOR_APP);
    306            return 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xBD3E             POP      {R1-R5,PC}
    307          }
    308          
    309          /*----------------------------------------------------------------------------*/
    310          

   \                                 In section .text, align 2, keep-with-next
    311          uint8_t gu2pcapp_process_para_problem_msg_ind
    312          (
    313           uint8_t type,
    314           uint8_t code,
    315           uint16_t checksum,
    316           uint16_t payload_len,
    317           uint8_t* p_payload
    318          )
    319          {
   \                     gu2pcapp_process_para_problem_msg_ind: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0x46E8             MOV      R8,SP
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0x.... 0x....      BL       __aeabi_memset
    320            
    321           // Raka .. [23-Nov-2017]
    322            /*
    323                Since following 2 files coming as zero
    324            I have taken the static Variable
    325             uint16_t payload_len,
    326           uint8_t* p_payload
    327            */
    328              uint8_t hif_Send_buff [8] = {0};
    329              uint8_t* buf = &hif_Send_buff [0];
   \       0x18   0x4669             MOV      R1,SP
    330          
    331          
    332              *buf++ = ENET_2_APP_PARA_PROB_IND_CMD_ID;
   \       0x1A   0x2095             MOVS     R0,#+149
   \       0x1C   0x7008             STRB     R0,[R1, #+0]
   \       0x1E   0x1C48             ADDS     R0,R1,#+1
    333              *buf++ = type;
   \       0x20   0x7004             STRB     R4,[R0, #+0]
   \       0x22   0x1C40             ADDS     R0,R0,#+1
    334              *buf++ = code;
   \       0x24   0x7005             STRB     R5,[R0, #+0]
   \       0x26   0x1C41             ADDS     R1,R0,#+1
    335              put_ushort(buf,checksum);
   \       0x28   0x700E             STRB     R6,[R1, #+0]
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xB280             UXTH     R0,R0
   \       0x2E   0x0A00             LSRS     R0,R0,#+8
   \       0x30   0x7048             STRB     R0,[R1, #+1]
    336              buf += 2; 
   \       0x32   0x1C89             ADDS     R1,R1,#+2
    337              *buf++ = DUMMY_COMPORT;//Dummy Comport     
   \       0x34   0x2055             MOVS     R0,#+85
   \       0x36   0x7008             STRB     R0,[R1, #+0]
   \       0x38   0x1C49             ADDS     R1,R1,#+1
    338                   
    339              //hif_send_msg_up(&hif_Send_buff[0], 5,response_laye_ID,PROTOCOL_ID_FOR_APP);
    340              return 0;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    341          }
    342          
    343          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    344          uint8_t gu2pcapp_send_dest_unreachable_icmp_ind
    345          (
    346           uint8_t type,
    347           uint8_t code,
    348           uint16_t checksum,
    349           uint16_t payload_len,
    350           uint8_t* p_payload
    351          )
    352          {
   \                     gu2pcapp_send_dest_unreachable_icmp_ind: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0x46E8             MOV      R8,SP
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0x.... 0x....      BL       __aeabi_memset
    353               
    354               // Raka .. [23-Nov-2017]
    355            /*
    356                Since following 2 files coming as zero
    357            I have taken the static Variable
    358             uint16_t payload_len,
    359           uint8_t* p_payload
    360            */
    361              uint8_t hif_Send_buff [8] = {0};
    362              uint8_t* buf = &hif_Send_buff [0];
   \       0x18   0x4669             MOV      R1,SP
    363          
    364          
    365              *buf++ = ENET_2_APP_DEST_UNREACHABLE_CMD_ID;
   \       0x1A   0x2094             MOVS     R0,#+148
   \       0x1C   0x7008             STRB     R0,[R1, #+0]
   \       0x1E   0x1C48             ADDS     R0,R1,#+1
    366              *buf++ = type;
   \       0x20   0x7004             STRB     R4,[R0, #+0]
   \       0x22   0x1C40             ADDS     R0,R0,#+1
    367              *buf++ = code;
   \       0x24   0x7005             STRB     R5,[R0, #+0]
   \       0x26   0x1C41             ADDS     R1,R0,#+1
    368              put_ushort(buf,checksum);
   \       0x28   0x700E             STRB     R6,[R1, #+0]
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xB280             UXTH     R0,R0
   \       0x2E   0x0A00             LSRS     R0,R0,#+8
   \       0x30   0x7048             STRB     R0,[R1, #+1]
    369              buf += 2; 
   \       0x32   0x1C89             ADDS     R1,R1,#+2
    370              *buf++ = DUMMY_COMPORT;//Dummy Comport 
   \       0x34   0x2055             MOVS     R0,#+85
   \       0x36   0x7008             STRB     R0,[R1, #+0]
   \       0x38   0x1C49             ADDS     R1,R1,#+1
    371              //hif_send_msg_up(&hif_Send_buff[0], 5,response_laye_ID,PROTOCOL_ID_FOR_APP);
    372               return 0;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    373          }
    374          

   \                                 In section .text, align 2, keep-with-next
    375          uint8_t gu2pcapp_send_ns_ind
    376          (
    377           uint8_t type,
    378           uint8_t code,
    379           uint16_t checksum,
    380           uip_ipaddr_t* p_tgt_addr,
    381           uint8_t icmpv6_opt_type,
    382           uint8_t icmpv6_opt_len,
    383           uip_lladdr_t* p_tlla
    384          )
    385          {
   \                     gu2pcapp_send_ns_ind: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0004             MOVS     R4,R0
    386          //     //capture_nans_and_send = 0;
    387          //     enet_msg_t* msg = allocate_hif_msg( 40 );
    388          //     uint8_t* buf = msg->data;	
    389          //
    390          //     if(msg != NULL)
    391          //     {
    392          //          //*buf++ = ENET_2_APP_NA_IND;
    393          //          
    394          //          //#define ENET_2_APP_NA_IND_CMD_ID                     		0x05
    395          ////#define ENET_2_APP_NS_IND_CMD_ID                     		0x06
    396          //          *buf++ = ENET_2_APP_NS_IND_CMD_ID;
    397          //          
    398          //          *buf++ = type;
    399          //          *buf++ = code;
    400          //          put_ushort(buf,checksum);
    401          //         buf += 2; 
    402          //
    403          //          memcpy(buf,p_tgt_addr->u8,sizeof(uip_ipaddr_t));
    404          //          buf += sizeof(uip_ipaddr_t);
    405          //
    406          //          *buf++ = icmpv6_opt_type;
    407          //          *buf++ = icmpv6_opt_len;
    408          //          
    409          //          memcpy(buf,p_tlla->addr,sizeof(uip_lladdr_t));
    410          //          buf += sizeof(uip_lladdr_t);
    411          //
    412          //          msg->data_length  = buf - msg->data;
    413          //
    414          //          hif_send_msg_up(msg->data,msg->data_length-1,6);
    415          //         
    416          //          free_hif_msg( msg );
    417          //     }
    418          
    419               return 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xBC10             POP      {R4}
   \        0x8   0x4770             BX       LR
    420            
    421          }
    422          /*----------------------------------------------------------------------------*/
    423          

   \                                 In section .text, align 2, keep-with-next
    424          uint8_t gu2pcapp_send_na_ind
    425          (
    426           uint8_t type,
    427           uint8_t code,
    428           uint16_t checksum,
    429           uint8_t osr_flag,
    430           uip_ipaddr_t* p_tgt_addr,
    431           uint8_t icmpv6_opt_type,
    432           uint8_t icmpv6_opt_len,
    433           uip_lladdr_t* p_tlla
    434          )
    435          {
   \                     gu2pcapp_send_na_ind: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0004             MOVS     R4,R0
    436          ////    #define ENET_2_APP_NA_IND                      0x05
    437          ////  // send echo reply
    438          ////     //capture_nans_and_send = 0;
    439          ////     enet_msg_t* msg = allocate_hif_msg( 40 );
    440          ////     uint8_t* buf = msg->data;	
    441          ////
    442          ////     if(msg != NULL)
    443          ////     {
    444          ////          //*buf++ = ENET_2_APP_NA_IND;
    445          ////          
    446          ////          //#define ENET_2_APP_NA_IND_CMD_ID                     		0x05
    447          //////#define ENET_2_APP_NS_IND_CMD_ID                     		0x06
    448          ////          *buf++ = ENET_2_APP_NA_IND_CMD_ID;
    449          ////          
    450          ////          *buf++ = type;
    451          ////          *buf++ = code;
    452          ////          put_ushort(buf,checksum);
    453          ////         buf += 2; 
    454          ////          *buf++ = osr_flag;
    455          ////          
    456          ////          memcpy(buf,p_tgt_addr->u8,sizeof(uip_ipaddr_t));
    457          ////          buf += sizeof(uip_ipaddr_t);
    458          ////          
    459          ////          *buf++ = icmpv6_opt_type;
    460          ////          *buf++ = icmpv6_opt_len;
    461          ////          
    462          ////          memcpy(buf,p_tlla->addr,sizeof(uip_lladdr_t));
    463          ////          buf += sizeof(uip_lladdr_t);
    464          ////
    465          ////          msg->data_length  = buf - msg->data;
    466          ////          hif_send_msg_up(msg->data,msg->data_length-1,6);         
    467          ////          free_hif_msg( msg );
    468          ////     }
    469          //
    470               return 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xBC10             POP      {R4}
   \        0x8   0x4770             BX       LR
    471          }
    472          /*----------------------------------------------------------------------------*/
    473          

   \                                 In section .text, align 2, keep-with-next
    474          uint8_t gu2pcapp_send_echo_req_res
    475          (
    476           uint8_t type,
    477           uint8_t code,
    478           uint16_t checksum,
    479           uint16_t id,
    480           uint16_t seq_num,
    481           uint16_t data_len,        
    482           uint8_t* p_data
    483          )
    484          {
   \                     gu2pcapp_send_echo_req_res: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB082             SUB      SP,SP,#+8
   \        0x6   0x4681             MOV      R9,R0
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9D0C             LDR      R5,[SP, #+48]
   \        0xE   0x9E0D             LDR      R6,[SP, #+52]
    485            /* Debdeep:: 07-sep-2018:: 15 bytes more is added for buffer allocation length.
    486               Because we store type, code, checksum, seq num, response counter and data length 
    487               along with ping data */
    488            enet_msg_t* msg = allocate_hif_msg (data_len + 15 + sizeof(enet_msg_t));
   \       0x10   0xF116 0x0017      ADDS     R0,R6,#+23
   \       0x14   0xB280             UXTH     R0,R0
   \       0x16   0x.... 0x....      BL       allocate_hif_msg
   \       0x1A   0x0004             MOVS     R4,R0
    489            
    490            uint8_t* buf = msg->data;	
   \       0x1C   0x1DA1             ADDS     R1,R4,#+6
    491            
    492            if(msg != NULL)
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD051             BEQ.N    ??gu2pcapp_send_echo_req_res_0
    493            {    
    494              *buf++ = ((type==ICMP6_ECHO_REPLY)? RECV_ICMPV6_REPLY_IND:RECV_ICMPv6_REQ);
   \       0x22   0x1C48             ADDS     R0,R1,#+1
   \       0x24   0x464A             MOV      R2,R9
   \       0x26   0xB2D2             UXTB     R2,R2
   \       0x28   0x2A81             CMP      R2,#+129
   \       0x2A   0xD101             BNE.N    ??gu2pcapp_send_echo_req_res_1
   \       0x2C   0x2257             MOVS     R2,#+87
   \       0x2E   0xE000             B.N      ??gu2pcapp_send_echo_req_res_2
   \                     ??gu2pcapp_send_echo_req_res_1: (+1)
   \       0x30   0x2254             MOVS     R2,#+84
   \                     ??gu2pcapp_send_echo_req_res_2: (+1)
   \       0x32   0x700A             STRB     R2,[R1, #+0]
    495              *buf++ = type;
   \       0x34   0xF880 0x9000      STRB     R9,[R0, #+0]
   \       0x38   0x1C41             ADDS     R1,R0,#+1
    496              *buf++ = code;
   \       0x3A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x3E   0x7008             STRB     R0,[R1, #+0]
   \       0x40   0x1C48             ADDS     R0,R1,#+1
    497              put_ushort(buf,checksum);
   \       0x42   0x7007             STRB     R7,[R0, #+0]
   \       0x44   0x0039             MOVS     R1,R7
   \       0x46   0xB289             UXTH     R1,R1
   \       0x48   0x0A09             LSRS     R1,R1,#+8
   \       0x4A   0x7041             STRB     R1,[R0, #+1]
    498              buf += 2;
   \       0x4C   0x1C81             ADDS     R1,R0,#+2
    499              put_ushort_BE(buf,id);
   \       0x4E   0xF881 0x8001      STRB     R8,[R1, #+1]
   \       0x52   0x4640             MOV      R0,R8
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x0A00             LSRS     R0,R0,#+8
   \       0x58   0x7008             STRB     R0,[R1, #+0]
    500              buf += 2;
   \       0x5A   0x1C89             ADDS     R1,R1,#+2
    501              put_ushort_BE(buf,seq_num);
   \       0x5C   0x704D             STRB     R5,[R1, #+1]
   \       0x5E   0x0028             MOVS     R0,R5
   \       0x60   0xB280             UXTH     R0,R0
   \       0x62   0x0A00             LSRS     R0,R0,#+8
   \       0x64   0x7008             STRB     R0,[R1, #+0]
    502              buf += 2;
   \       0x66   0xF111 0x0A02      ADDS     R10,R1,#+2
    503              ++icmv6_response_counter;
   \       0x6A   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \       0x6E   0x8808             LDRH     R0,[R1, #+0]
   \       0x70   0x1C40             ADDS     R0,R0,#+1
   \       0x72   0x8008             STRH     R0,[R1, #+0]
    504              if(icmv6_response_counter == 0xFFFF)
   \       0x74   0x880A             LDRH     R2,[R1, #+0]
   \       0x76   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x7A   0x4282             CMP      R2,R0
   \       0x7C   0xD101             BNE.N    ??gu2pcapp_send_echo_req_res_3
    505              {
    506                icmv6_response_counter = 0x00;
   \       0x7E   0x2000             MOVS     R0,#+0
   \       0x80   0x8008             STRH     R0,[R1, #+0]
    507              }
    508              mem_rev_cpy(buf,(uint8_t*)&icmv6_response_counter,2);
   \                     ??gu2pcapp_send_echo_req_res_3: (+1)
   \       0x82   0x2202             MOVS     R2,#+2
   \       0x84   0x4650             MOV      R0,R10
   \       0x86   0x.... 0x....      BL       mem_rev_cpy
    509              buf += 2;
   \       0x8A   0xF11A 0x0102      ADDS     R1,R10,#+2
    510              
    511              put_ushort_BE(buf,data_len);
   \       0x8E   0x704E             STRB     R6,[R1, #+1]
   \       0x90   0x0030             MOVS     R0,R6
   \       0x92   0xB280             UXTH     R0,R0
   \       0x94   0x0A00             LSRS     R0,R0,#+8
   \       0x96   0x7008             STRB     R0,[R1, #+0]
    512              buf += 2;
   \       0x98   0xF111 0x0A02      ADDS     R10,R1,#+2
    513              
    514              memcpy(buf,p_data,data_len);
   \       0x9C   0x0030             MOVS     R0,R6
   \       0x9E   0xB280             UXTH     R0,R0
   \       0xA0   0x9001             STR      R0,[SP, #+4]
   \       0xA2   0x980E             LDR      R0,[SP, #+56]
   \       0xA4   0x9000             STR      R0,[SP, #+0]
   \       0xA6   0x46D3             MOV      R11,R10
   \       0xA8   0x9A01             LDR      R2,[SP, #+4]
   \       0xAA   0x9900             LDR      R1,[SP, #+0]
   \       0xAC   0x4658             MOV      R0,R11
   \       0xAE   0x.... 0x....      BL       __aeabi_memcpy
    515              buf += data_len;
   \       0xB2   0x0030             MOVS     R0,R6
   \       0xB4   0xB280             UXTH     R0,R0
   \       0xB6   0xEB0A 0x0100      ADD      R1,R10,R0
    516              *buf++ = DUMMY_COMPORT;
   \       0xBA   0x2055             MOVS     R0,#+85
   \       0xBC   0x7008             STRB     R0,[R1, #+0]
   \       0xBE   0x1C49             ADDS     R1,R1,#+1
    517              msg->data_length  = buf - msg->data;
   \       0xC0   0x1DA0             ADDS     R0,R4,#+6
   \       0xC2   0x1A08             SUBS     R0,R1,R0
   \       0xC4   0x80A0             STRH     R0,[R4, #+4]
    518              //hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);         
    519              //free_hif_msg( msg );
    520            }
    521            return 0;
   \                     ??gu2pcapp_send_echo_req_res_0: (+1)
   \       0xC6   0x2000             MOVS     R0,#+0
   \       0xC8   0xE8BD 0x8FFE      POP      {R1-R11,PC}
    522          }
    523          /*----------------------------------------------------------------------------*/
    524          
    525          //uint8_t App_UDP_Data_Indication_cb(
    526          //         uint8_t* data,
    527          //         uint16_t len, 
    528          //         uint8_t* p_src_ll_addr, 
    529          //         uint16_t sender_port )
    530          //{
    531          //    enet_msg_t* msg = allocate_hif_msg( len + 10 );
    532          //     uint8_t* buf = msg->data;	
    533          //    
    534          //     if(msg != NULL)
    535          //     {
    536          //          *buf++ = APP_2_FAN_UDP_RCV_CB;// cmd id
    537          //          
    538          //          mem_reverse_cpy( buf,p_src_ll_addr,8 );
    539          //          buf+=8;
    540          //          put_ushort_BE(buf,sender_port); buf+=2;
    541          //          put_ushort_BE(buf,len); buf+=2;
    542          //          memcpy( buf,data,len );
    543          //          buf += len;
    544          //
    545          //          msg->data_length  = buf - msg->data;
    546          //          hif_send_msg_up(msg->data,msg->data_length-1,6);         
    547          //          free_hif_msg( msg );
    548          //     }
    549          //  
    550          //     return 0;
    551          //}
    552          /*----------------------------------------------------------------------------*/
    553          
    554          /*------------set_fan_api as per given spec-----------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    555          void process_set_node_start_stop(uint8_t *buf, uint16_t length)
    556          {
   \                     process_set_node_start_stop: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
    557            
    558             //uint8_t status = 0xFF;
    559            uint8_t node_start = *buf; //*(buf+3); // ENUM From Wi-SUN Test Bench is of 4 Bytes
   \        0x6   0x7835             LDRB     R5,[R6, #+0]
    560            
    561            node_start_stop( node_start);
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0xB2C0             UXTB     R0,R0
   \        0xC   0x.... 0x....      BL       node_start_stop
    562           
    563          }
   \       0x10   0xBD70             POP      {R4-R6,PC}
    564          /*----------------------------------------------------------------------------*/
    565          
    566          
    567          /*-----------------------start for TLV FORMAT-------------------------------*/
    568          //void process_set_mac_unicast_api_tbc(uint8_t *buf, uint16_t length)
    569          //{
    570          //  uint8_t status = 0xFF;
    571          //  uint8_t channel_index = 0;
    572          //  uint8_t dwell_interval = 0x00;
    573          //  uint8_t channel_function = 0x00;
    574          //  uint8_t exc_chnl_cont = 0x00;
    575          //  uint8_t excluded_channel_Range = 0x00;
    576          //  uint16_t excluded_channel[20] = {0};
    577          //  uint8_t u_ex_ch_mask[17] = {0};
    578          //
    579          //  uint8_t offset = 0;
    580          //  while(length > offset)
    581          //  {
    582          //    uint8_t var_type = *buf++;
    583          //    uint16_t rcvd_length = 0x00;
    584          //    
    585          //    if(var_type == DWELL_INTERVAL_US)
    586          //    {
    587          //      rcvd_length =  *buf++;
    588          //      dwell_interval = *buf;
    589          //      buf += rcvd_length;
    590          //    }
    591          //    else if(var_type == CHANNEL_FUNCTION_US)
    592          //    {
    593          //      rcvd_length =  *buf++;
    594          //      channel_function = *buf;
    595          //      buf += rcvd_length;
    596          //    }
    597          //    else if(var_type == EXC_CHAN_RANGE_US)
    598          //    {
    599          //      rcvd_length =  *buf++;;
    600          //      uint8_t temp_len = rcvd_length;
    601          //      
    602          //      if(rcvd_length>0)
    603          //        exc_chnl_cont = 1;
    604          //     
    605          //      while(temp_len!=0)
    606          //      {
    607          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    608          //        buf +=2;
    609          //        temp_len-=2;
    610          //        excluded_channel_Range++;
    611          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)                   //Arjun: this logic is not making excluded_channel_Range 1 for a pair of range
    612          ////        {
    613          ////          excluded_channel_Range++;
    614          ////          exc_chnl_cont = 1;
    615          ////        }
    616          //      }
    617          //      excluded_channel_Range = (excluded_channel_Range/2);
    618          //    }
    619          //    else if(var_type == EXC_CHAN_MASK_US)
    620          //    {
    621          //        rcvd_length =  *buf++;
    622          //        uint8_t temp_len = rcvd_length;
    623          //        
    624          //      if(rcvd_length != 0)
    625          //      {
    626          //        exc_chnl_cont = 2;
    627          ///* Debdeep :: Excluded channel mask should be set in while loop :: problem occured while testing with LnG */
    628          //        while(temp_len != 0x00)
    629          //        {
    630          //          mem_rev_cpy((uint8_t *)&u_ex_ch_mask[channel_index++],buf,1);
    631          //          buf +=1;
    632          //          temp_len-=1;
    633          //          excluded_channel_Range++;
    634          //        }
    635          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)
    636          ////        {
    637          ////          excluded_channel_Range++;
    638          ////          //exc_chnl_cont = 2;
    639          ////        }
    640          //      }
    641          //
    642          //    }
    643          //    offset += (rcvd_length+1+1);//TYPE+LENTHBYTE
    644          //  }
    645          //   status = set_mac_unicast_chan_plan(dwell_interval,
    646          //                                     channel_function,
    647          //                                     exc_chnl_cont,
    648          //                                     excluded_channel_Range,
    649          //                                     excluded_channel,
    650          //                                     u_ex_ch_mask);
    651          //  
    652          //  send_hif_conf_cb(SET_MAC_UNICAST_API_CONF,status);  
    653          //}
    654          
    655          /*----------------------------------------------------------------------------*/
    656          //void process_set_mac_broadcast_api_tbc(uint8_t *buf, uint16_t length)
    657          //{   
    658          //  uint8_t status = 0xFF;
    659          //  uint8_t channel_index = 0;  
    660          //  uint32_t broad_cast_intver = 0x00000000;
    661          //  uint16_t b_sech_indinti = 0x0000;
    662          //  uint8_t dwell_interval = 0x00;
    663          //  uint8_t channel_function = 0x00;
    664          //  uint8_t exc_chnl_cont = 0x00;
    665          //  uint8_t excluded_channel_Range = 0x00;
    666          //  uint16_t excluded_channel[20] = {0};
    667          //  uint8_t b_ex_ch_mask[17] = {0};
    668          //  
    669          //    uint8_t offset = 0;
    670          //  while(length > offset)
    671          //  {
    672          //    uint8_t var_type = *buf++;
    673          //    uint16_t rcvd_length = 0x00;
    674          //    if(var_type == BCAST_INTERVAL_BS)
    675          //    {
    676          //      rcvd_length =  *buf++;
    677          //      mem_rev_cpy((uint8_t *)&broad_cast_intver,&buf[0],4);
    678          //      buf += rcvd_length;
    679          //    }
    680          //    else if(var_type == BCAST_SCH_IDNT_BS)
    681          //    {
    682          //      rcvd_length =  *buf++;
    683          //      mem_rev_cpy((uint8_t *)&b_sech_indinti,&buf[0],2);
    684          //      buf += rcvd_length;
    685          //    }
    686          //    else if(var_type == DWELL_INTERVAL_BS)
    687          //    {
    688          //      rcvd_length =  *buf++;
    689          //      dwell_interval = *buf;
    690          //      buf += rcvd_length;
    691          //    }
    692          //    else if(var_type == CHANNEL_FUNCTION_BS)
    693          //    {
    694          //      rcvd_length =  *buf++;
    695          //      channel_function = *buf;
    696          //      buf += rcvd_length;
    697          //    }
    698          //    else if(var_type == EXC_CHAN_RANGE_BS)
    699          //    {
    700          //      rcvd_length =  *buf++;;
    701          //      uint8_t temp_len = rcvd_length;
    702          //      if(rcvd_length>0)
    703          //        exc_chnl_cont = 1;
    704          //      
    705          //      while(temp_len!=0)
    706          //      {
    707          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    708          //        buf +=2;
    709          //        temp_len-=2;
    710          //        excluded_channel_Range++;
    711          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)                   //Arjun: this logic is not making excluded_channel_Range 1 for a pair of range
    712          ////        {
    713          ////        {
    714          ////          excluded_channel_Range++;
    715          ////          exc_chnl_cont = 1;
    716          ////        }
    717          //      }
    718          //      excluded_channel_Range = (excluded_channel_Range/2);
    719          //    }
    720          //    else if(var_type == EXC_CHAN_MASK_BS)
    721          //    {
    722          //        rcvd_length =  *buf++;
    723          //        uint8_t temp_len = rcvd_length;
    724          //        
    725          //      if(rcvd_length != 0)
    726          //      {
    727          //        exc_chnl_cont = 2;
    728          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    729          //        buf +=2;
    730          //        temp_len-=2;
    731          //         if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)
    732          //          {
    733          //            excluded_channel_Range++;
    734          //            exc_chnl_cont = 2;
    735          //          }
    736          //      }
    737          //      
    738          //    }
    739          //    offset += (rcvd_length+1+1);//TYPE+LENTHBYTE
    740          //  }
    741          //  
    742          //  status =  set_mac_bcast_chan_plan(broad_cast_intver,
    743          //                                     b_sech_indinti,
    744          //                                     dwell_interval,
    745          //                                     channel_function,
    746          //                                     exc_chnl_cont,
    747          //                                     excluded_channel_Range,
    748          //                                     excluded_channel,
    749          //                                     b_ex_ch_mask);
    750          //  
    751          //  send_hif_conf_cb(SET_MAC_BROADCAST_API_CONF,status);
    752          //}
    753          
    754          /*----------------------------------------------------------------------------*/
    755          //void process_set_mac_unicast_api(uint8_t *buf, uint16_t length)
    756          //{
    757          //   uint8_t status = 0xFF;
    758          //  uint8_t channel_index = 0;
    759          //  uint8_t dwell_interval = *buf++;
    760          //  uint8_t channel_function = *buf++;
    761          //  uint8_t exc_chnl_cont = 0x00;
    762          //  uint8_t excluded_channel_Range = *buf++;
    763          //  uint16_t excluded_channel[20] = {0};
    764          //  uint8_t u_ex_ch_mask[17] = {0};
    765          // if(excluded_channel_Range != 0x00)
    766          // {
    767          //  for(int i =1 ; i<= excluded_channel_Range;i++)
    768          //  {
    769          //    
    770          //    excluded_channel[channel_index++] = *buf++;
    771          //    excluded_channel[channel_index++] = *buf++;
    772          //    exc_chnl_cont = 1;
    773          //  }
    774          // }
    775          //else if(excluded_channel_Range == 0x00)
    776          //{
    777          //  if(*buf != 0x00)
    778          //    {
    779          //      memcpy(u_ex_ch_mask,buf,16);
    780          //      exc_chnl_cont = 2;
    781          //    }
    782          //}
    783          //   status = set_mac_unicast_chan_plan(dwell_interval,
    784          //                                     channel_function,
    785          //                                     exc_chnl_cont,
    786          //                                     excluded_channel_Range,
    787          //                                     excluded_channel,
    788          //                                     u_ex_ch_mask);
    789          //  
    790          //  send_hif_conf_cb(SET_MAC_UNICAST_API_CONF,status);  
    791          //}
    792          /*----------------------------------------------------------------------------*/
    793          //void process_set_mac_broadcast_api(uint8_t *buf, uint16_t length)
    794          //{
    795          //   uint8_t status = 0xFF;
    796          //  uint8_t channel_index = 0;  
    797          //  uint32_t broad_cast_intver = 0x00000000;
    798          //  uint16_t b_sech_indinti = 0x0000;
    799          //  mem_rev_cpy((uint8_t *)&broad_cast_intver,&buf[0],4);
    800          //  buf+=4;
    801          //  mem_rev_cpy((uint8_t *)&b_sech_indinti,&buf[0],2);
    802          //  buf+=2;
    803          //  uint8_t dwell_interval = *buf++;
    804          //  uint8_t channel_function = *buf++;
    805          //  uint8_t exc_chnl_cont = 0x00;//*buf++;
    806          //  uint8_t excluded_channel_Range = *buf++;
    807          //  uint16_t excluded_channel[20] = {0};
    808          //  uint8_t b_ex_ch_mask[17] = {0};
    809          //  
    810          // if(excluded_channel_Range != 0x00)
    811          // {
    812          //  for(int i =1 ; i<= excluded_channel_Range;i++)
    813          //  {
    814          //    
    815          //    excluded_channel[channel_index++] = *buf++;
    816          //    excluded_channel[channel_index++] = *buf++;
    817          //    exc_chnl_cont = 1;
    818          //  }
    819          // }
    820          //else if(excluded_channel_Range == 0x00)
    821          //{
    822          //    if(*buf != 0x00)
    823          //    {
    824          //        memcpy(b_ex_ch_mask,buf,16);
    825          //        exc_chnl_cont = 2;
    826          //    }  
    827          //}
    828          //  
    829          //  status =  set_mac_bcast_chan_plan(broad_cast_intver,
    830          //                                     b_sech_indinti,
    831          //                                     dwell_interval,
    832          //                                     channel_function,
    833          //                                     exc_chnl_cont,
    834          //                                     excluded_channel_Range,
    835          //                                     excluded_channel,
    836          //                                     b_ex_ch_mask);
    837          //  
    838          //  send_hif_conf_cb(SET_MAC_BROADCAST_API_CONF,status);
    839          //}
    840          /*----------------------------------------------------------------------------*/
    841          
    842          /*----------------------------------------------------------------------------*/
    843          

   \                                 In section .text, align 2, keep-with-next
    844          void process_set_mac_reg_op_api(uint8_t *buf, uint16_t length)
    845          {
    846            
    847          //   uint8_t status = 0xFF;
    848          //  uint8_t reg_domain = *buf++;
    849          //  uint8_t oper_class = *buf++;
    850          //  status = set_mac_chan_plan_reg_op(reg_domain, oper_class);
    851          //  send_hif_conf_cb(SET_MAC_CHANNEL_PLAN_REG_OP_API_CONF,status);  
    852          }
   \                     process_set_mac_reg_op_api: (+1)
   \        0x0   0x4770             BX       LR
    853          /*----------------------------------------------------------------------------*/
    854          //void process_set_mac_explicit_api(uint8_t *buf, uint16_t length)
    855          //{
    856          //   uint8_t status = 0xFF;
    857          //    uint32_t CH0 = 0x000000;//0x0DC438;
    858          //    uint16_t channel_numbers = 0x0000;
    859          //    mem_rev_cpy((uint8_t *)&CH0 ,&buf[0],4);
    860          //    buf+=4;
    861          //    uint8_t channelspacing = *buf++;
    862          //    mem_rev_cpy((uint8_t *)&channel_numbers,&buf[0],2);
    863          //    buf+=2;
    864          //  status =  set_mac_chan_plan_explicit( CH0, channelspacing, channel_numbers);
    865          //  
    866          //  send_hif_conf_cb(SET_MAC_CHANNEL_PLAN_EXPLICIT_API_CONF,status);
    867          //}
    868          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    869          void process_set_mac_fixed_chan(uint8_t *buf, uint16_t length)
    870          {
   \                     process_set_mac_fixed_chan: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    871            uint8_t status = 0xFF;
   \        0x6   0x26FF             MOVS     R6,#+255
    872            uint16_t fixed_channel = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    873            mem_rev_cpy((uint8_t *)&fixed_channel ,&buf[0],2);
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x0021             MOVS     R1,R4
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x.... 0x....      BL       mem_rev_cpy
    874            status =  set_mac_chan_plan_fixed(fixed_channel);
   \       0x18   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x1C   0x.... 0x....      BL       set_mac_chan_plan_fixed
   \       0x20   0x0007             MOVS     R7,R0
    875            
    876           //if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE) 
    877               App_factory_mode_channel_set();
   \       0x22   0x.... 0x....      BL       App_factory_mode_channel_set
    878           
    879            send_hif_conf_cb(SET_MAC_CHAN_PLAN_FIXED_CONF,status);
   \       0x26   0x0039             MOVS     R1,R7
   \       0x28   0xB2C9             UXTB     R1,R1
   \       0x2A   0x203D             MOVS     R0,#+61
   \       0x2C   0x.... 0x....      BL       send_hif_conf_cb
    880          }
   \       0x30   0xBDF1             POP      {R0,R4-R7,PC}
    881          /*----------------------------------------------------------------------------*/
    882          //void process_set_lbr_mac_gtks_config_tbc(uint8_t *buf, uint16_t length)
    883          //{
    884          //    uint8_t status = 0xFF;
    885          //  uint8_t GTK0_Hash[16] = {0};
    886          //  uint8_t GTK1_Hash[16] = {0};
    887          //  uint8_t GTK2_Hash[16] = {0};
    888          //  uint8_t GTK3_Hash[16] = {0};
    889          //  uint8_t gtkl = 0;
    890          //  
    891          //
    892          //  uint8_t offset = 0;
    893          //  while(length > offset)
    894          //  {
    895          //    uint8_t var_type = *buf++;
    896          //    uint16_t rcvd_length = 0x00;
    897          //    if(var_type == GTK0)
    898          //    {
    899          //      rcvd_length =  *buf++;
    900          //      memcpy(GTK0_Hash,&buf[0],rcvd_length);
    901          //      buf += rcvd_length;
    902          //      gtkl |= 0x01;
    903          //    }else if(var_type == GTK1)
    904          //    {
    905          //      rcvd_length =  *buf++;
    906          //      memcpy(GTK1_Hash,&buf[0],rcvd_length);
    907          //      buf += rcvd_length;
    908          //      gtkl |= 0x02;
    909          //    }else if(var_type == GTK2)
    910          //    {
    911          //      rcvd_length =  *buf++;
    912          //      memcpy(GTK2_Hash,&buf[0],rcvd_length);
    913          //      buf += rcvd_length;
    914          //      gtkl |= 0x04;
    915          //    }else if(var_type == GTK3)
    916          //    {
    917          //      rcvd_length =  *buf++;
    918          //      memcpy(GTK3_Hash,&buf[0],rcvd_length);
    919          //      buf += rcvd_length;
    920          //      gtkl |= 0x08;
    921          //    }
    922          //    offset += (rcvd_length+1+1);
    923          //  }
    924          //  status = set_lbr_mac_gtks_config(GTK0_Hash,
    925          //                                   GTK1_Hash,
    926          //                                   GTK2_Hash,
    927          //                                   GTK3_Hash,
    928          //                                   gtkl);
    929          //  send_hif_conf_cb(SET_LBR_MAC_GTKS_CONFIG_CONF,status);
    930          //}
    931          
    932          //void process_set_lbr_mac_gtks_config(uint8_t *buf, uint16_t length)
    933          //{
    934          //  uint8_t status = 0xFF;
    935          //  uint8_t GTK0_Hash[16] = {0};
    936          //  uint8_t GTK1_Hash[16] = {0};
    937          //  uint8_t GTK2_Hash[16] = {0};
    938          //  uint8_t GTK3_Hash[16] = {0};
    939          //  uint8_t gtkl = 0;
    940          //  
    941          //  if (memcmp (buf, GTK0_Hash, 16))
    942          //  {
    943          //    memcpy(GTK0_Hash,buf,16);
    944          //    gtkl |= 0x01;
    945          //  }
    946          //  buf+=16;
    947          //  if (memcmp (buf, GTK1_Hash, 16))
    948          //  {
    949          //    memcpy(GTK1_Hash,buf,16);
    950          //    gtkl |= 0x02;
    951          //  }
    952          //  buf+=16;
    953          //  if (memcmp (buf, GTK2_Hash, 16))
    954          //  {
    955          //    memcpy(GTK2_Hash,buf,16);
    956          //    gtkl |= 0x04;
    957          //  }
    958          //  buf+=16;
    959          //  if (memcmp (buf, GTK3_Hash, 16))
    960          //  {
    961          //    memcpy(GTK3_Hash,buf,16);
    962          //    gtkl |= 0x08;
    963          //  }
    964          //
    965          //  status = set_lbr_mac_gtks_config(GTK0_Hash,
    966          //                                   GTK1_Hash,
    967          //                                   GTK2_Hash,
    968          //                                   GTK3_Hash,
    969          //                                   gtkl);
    970          //  send_hif_conf_cb(SET_LBR_MAC_GTKS_CONFIG_CONF,status);
    971          //}
    972          
    973          //void process_revoke_sta_request (uint8_t *sta_address, uint16_t length)
    974          //{
    975          //  uint8_t hifBuff[15] = {0};
    976          //  uint8_t* buf = &hifBuff[0];
    977          //  
    978          //  *buf++ = SEND_REVOKE_STA_REQ;
    979          //  memcpy (buf, sta_address, 8);
    980          //  buf += 8;
    981          //  *buf++ = DUMMY_COMPORT;//Dummy Comport 
    982          //  hif_send_msg_up (hifBuff, buf - hifBuff, response_laye_ID, PROTOCOL_ID_FOR_APP);
    983          //}
    984          
    985          /*----------------------------------------------------------------------------*/
    986          //void process_set_lbr_mac_pmk_ptk_gtk_lifetime_config(uint8_t *buf, uint16_t length)
    987          //{
    988          //  uint8_t status = 0xFF;
    989          //  uint32_t pmk_lifetime = 0;
    990          //  uint32_t ptk_lifetime = 0;
    991          //  uint32_t gtk_lifetime = 0;
    992          //  uint32_t gtk_new_activation_time = 0;
    993          //  uint32_t revocation_lifetime_reduction = 0;
    994          //  uint8_t tag = 0;              
    995          //  uint8_t len = 0;
    996          //  
    997          //  if (response_laye_ID == APP_DEF_LAYER_ID_TOOL)
    998          //  {
    999          //    mem_rev_cpy ((uint8_t*)&pmk_lifetime, buf, 4);
   1000          //    buf += 4;
   1001          //    mem_rev_cpy ((uint8_t*)&ptk_lifetime, buf, 4);
   1002          //    buf += 4;
   1003          //    mem_rev_cpy ((uint8_t*)&gtk_lifetime, buf, 4);
   1004          //    buf += 4;
   1005          //    mem_rev_cpy ((uint8_t*)&gtk_new_activation_time, buf, 4);
   1006          //    buf += 4;
   1007          //    mem_rev_cpy ((uint8_t*)&revocation_lifetime_reduction, buf, 4);
   1008          //  }
   1009          //  
   1010          //  if (response_laye_ID == APP_DEF_LAYER_ID_TBC)
   1011          //  {
   1012          //    while (length > 0)
   1013          //    {
   1014          //      tag = *buf++;
   1015          //      len = *buf++;
   1016          //      
   1017          //      if (tag == PMK_LIFETIME)
   1018          //      {
   1019          //        mem_rev_cpy ((uint8_t*)&pmk_lifetime, buf, len);
   1020          //        buf += len;
   1021          //      }
   1022          //      if (tag == PTK_LIFETIME)
   1023          //      {
   1024          //        mem_rev_cpy ((uint8_t*)&ptk_lifetime, buf, len);
   1025          //        buf += len;
   1026          //      }
   1027          //      if (tag == GTK_LIFETIME)
   1028          //      {
   1029          //        mem_rev_cpy ((uint8_t*)&gtk_lifetime, buf, len);
   1030          //        buf += len;
   1031          //      }
   1032          //      if(tag == GTK_NEW_ACTIVATION_TIME)
   1033          //      {
   1034          //        mem_rev_cpy ((uint8_t*)&gtk_new_activation_time, buf, len);
   1035          //        buf += len;
   1036          //      }
   1037          //      if(tag == REVOCATION_LIFETIME_REDUCTION)
   1038          //      {
   1039          //        mem_rev_cpy ((uint8_t*)&revocation_lifetime_reduction, buf, len);
   1040          //        buf += len;
   1041          //      }
   1042          //      length -= (len+2);
   1043          //    } 
   1044          //  }
   1045          //  
   1046          //  /*Converting lifetime from minutes to seconds*/
   1047          //  pmk_lifetime *= 60;
   1048          //  ptk_lifetime *= 60;
   1049          //  gtk_lifetime *= 60;
   1050          //  
   1051          //  status = set_lbr_mac_lifetime_config (pmk_lifetime, 
   1052          //                                        ptk_lifetime, 
   1053          //                                        gtk_lifetime,
   1054          //                                        gtk_new_activation_time,
   1055          //                                        revocation_lifetime_reduction);
   1056          //  send_hif_conf_cb (SET_LBR_MAC_PMK_PTK_GTK_LIFETIME_CONFIG_CONF, status);
   1057          //}
   1058          /*----------------------------------------------------------------------------*/
   1059          extern uint16_t max_frag_size;
   1060          extern uint16_t frag_chunk_send;
   1061          //void process_set_lbr_mac_config_tbc(uint8_t *buf, uint16_t length)
   1062          //{
   1063          //  uint8_t status = 0xFF;
   1064          //  uint16_t pan_size = 0x0000;
   1065          //  uint16_t pan_id   = 0x0000;
   1066          //  uint8_t use_bs_sch = 0x00;
   1067          //  uint8_t routing_meth = 0;
   1068          //  uint8_t net_name[30] = {0};
   1069          //  uint8_t index = 0;
   1070          //  uint16_t max_sisl_mtusize = 0x0000;
   1071          //  mem_rev_cpy((uint8_t *)&pan_id ,&buf[0] ,2);
   1072          //  buf+=2;
   1073          //  length-=2;
   1074          //  mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1075          //  buf+=2;
   1076          //  length-=2;
   1077          //  use_bs_sch = *buf++;
   1078          //  length-=1;
   1079          //  routing_meth = *buf++;
   1080          //  length-=1;
   1081          //  while(*buf != 0x00)
   1082          //  {
   1083          //    
   1084          //    net_name[index++] = *buf++;
   1085          //    length-=1;
   1086          //  }
   1087          //   *buf++;//for NULL char
   1088          //  length-=1;
   1089          //  if(length != 0)
   1090          //  {
   1091          //    mem_rev_cpy((uint8_t *)&max_sisl_mtusize,&buf[0],2);
   1092          //    max_frag_size = frag_chunk_send = max_sisl_mtusize;
   1093          //    buf+=2;
   1094          //  }
   1095          // 
   1096          //  
   1097          //  status = set_lbr_mac_config(pan_size,
   1098          //                              pan_id,
   1099          //                              use_bs_sch,
   1100          //                              routing_meth,
   1101          //                              net_name);
   1102          //  
   1103          //  send_hif_conf_cb(SET_LBR_MAC_CONFIG_CONF,status);
   1104          //}
   1105          //void process_set_lbr_mac_config(uint8_t *buf, uint16_t length)
   1106          //{
   1107          //  uint8_t status = 0xFF;
   1108          //  uint16_t pan_size = 0x0000;
   1109          //  uint16_t pan_id   = 0x0000;
   1110          //  uint8_t use_bs_sch = 0x00;
   1111          //  uint8_t routing_meth = 0;
   1112          //  uint8_t net_name[30] = {0};
   1113          //  mem_rev_cpy((uint8_t *)&pan_id ,&buf[0] ,2);
   1114          //  buf+=2;
   1115          //  mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1116          //  buf+=2;
   1117          //  use_bs_sch = *buf++;
   1118          //  routing_meth = *buf++;
   1119          //  
   1120          //  uint16_t net_name_len = 0x00;
   1121          //  mem_rev_cpy((uint8_t *)&net_name_len ,&buf[0] ,2);
   1122          //  buf+=2;
   1123          //  memcpy((uint8_t *)&net_name ,&buf[0] ,net_name_len);
   1124          //  buf+=net_name_len;
   1125          //  
   1126          //  status = set_lbr_mac_config(pan_size,
   1127          //                              pan_id,
   1128          //                              use_bs_sch,
   1129          //                              routing_meth,
   1130          //                              net_name);
   1131          //  
   1132          //  send_hif_conf_cb(SET_LBR_MAC_CONFIG_CONF,status);
   1133          //}
   1134          
   1135          /*----------------------------------------------------------------------------*/
   1136          

   \                                 In section .text, align 2, keep-with-next
   1137          void process_reset_rpl_msg_rate(uint8_t *buf, uint16_t length)
   1138          {
   \                     process_reset_rpl_msg_rate: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x000C             MOVS     R4,R1
   1139            uint8_t status = 0xFF;
   \        0x8   0x25FF             MOVS     R5,#+255
   1140            uint8_t rpl_messege = *buf;//*(buf+3);
   \        0xA   0xF898 0x6000      LDRB     R6,[R8, #+0]
   1141            status = reset_rpl_msg_rate(rpl_messege);
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x.... 0x....      BL       reset_rpl_msg_rate
   \       0x16   0x0007             MOVS     R7,R0
   1142            send_hif_conf_cb(RESET_RPL_MSG_RATE_CONF,status);
   \       0x18   0x0039             MOVS     R1,R7
   \       0x1A   0xB2C9             UXTB     R1,R1
   \       0x1C   0x2045             MOVS     R0,#+69
   \       0x1E   0x.... 0x....      BL       send_hif_conf_cb
   1143          }
   \       0x22   0xE8BD 0x81F0      POP      {R4-R8,PC}
   1144          
   1145          /*----------------------------------------------------------------------------*/
   1146          

   \                                 In section .text, align 2, keep-with-next
   1147          void process_get_sec_keys(uint8_t *buf, uint16_t length)
   1148          {
   \                     process_get_sec_keys: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB093             SUB      SP,SP,#+76
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x2140             MOVS     R1,#+64
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0xAE03             ADD      R6,SP,#+12
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1149            uint8_t SecKey[64] = {0x00};
   1150            memcpy(&SecKey[0],mac_key_list.MAC_SECURITY_KEY_LIST[0].MAC_SECURITY_KEY,16);
   \       0x16   0x2610             MOVS     R6,#+16
   \       0x18   0x.... 0x....      LDR.W    R7,??DataTable9_3
   \       0x1C   0x1C78             ADDS     R0,R7,#+1
   \       0x1E   0x9002             STR      R0,[SP, #+8]
   \       0x20   0xF10D 0x080C      ADD      R8,SP,#+12
   \       0x24   0x0032             MOVS     R2,R6
   \       0x26   0x9902             LDR      R1,[SP, #+8]
   \       0x28   0x4640             MOV      R0,R8
   \       0x2A   0x.... 0x....      BL       __aeabi_memcpy
   1151            memcpy(&SecKey[16],mac_key_list.MAC_SECURITY_KEY_LIST[1].MAC_SECURITY_KEY,16);
   \       0x2E   0xF05F 0x0810      MOVS     R8,#+16
   \       0x32   0xF117 0x0012      ADDS     R0,R7,#+18
   \       0x36   0x9001             STR      R0,[SP, #+4]
   \       0x38   0xF10D 0x091C      ADD      R9,SP,#+28
   \       0x3C   0x4642             MOV      R2,R8
   \       0x3E   0x9901             LDR      R1,[SP, #+4]
   \       0x40   0x4648             MOV      R0,R9
   \       0x42   0x.... 0x....      BL       __aeabi_memcpy
   1152            memcpy(&SecKey[32],mac_key_list.MAC_SECURITY_KEY_LIST[2].MAC_SECURITY_KEY,16);
   \       0x46   0xF05F 0x0910      MOVS     R9,#+16
   \       0x4A   0xF117 0x0023      ADDS     R0,R7,#+35
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0xF10D 0x0A2C      ADD      R10,SP,#+44
   \       0x54   0x464A             MOV      R2,R9
   \       0x56   0x9900             LDR      R1,[SP, #+0]
   \       0x58   0x4650             MOV      R0,R10
   \       0x5A   0x.... 0x....      BL       __aeabi_memcpy
   1153            memcpy(&SecKey[48],mac_key_list.MAC_SECURITY_KEY_LIST[3].MAC_SECURITY_KEY,16);
   \       0x5E   0xF05F 0x0A10      MOVS     R10,#+16
   \       0x62   0xF117 0x0B34      ADDS     R11,R7,#+52
   \       0x66   0xAF0F             ADD      R7,SP,#+60
   \       0x68   0x4652             MOV      R2,R10
   \       0x6A   0x4659             MOV      R1,R11
   \       0x6C   0x0038             MOVS     R0,R7
   \       0x6E   0x.... 0x....      BL       __aeabi_memcpy
   1154              send_hif_seckey_cb(GET_SEC_KEYS_CONF,SecKey);
   \       0x72   0xA903             ADD      R1,SP,#+12
   \       0x74   0x204F             MOVS     R0,#+79
   \       0x76   0x.... 0x....      BL       send_hif_seckey_cb
   1155          }
   \       0x7A   0xB013             ADD      SP,SP,#+76
   \       0x7C   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   1156          
   1157          /*----------------------------------------------------------------------------*/
   1158          

   \                                 In section .text, align 2, keep-with-next
   1159          void process_get_ip_address(uint8_t *buf, uint16_t length)
   1160          {
   \                     process_get_ip_address: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1161            get_ip_address();
   \        0x6   0x.... 0x....      BL       get_ip_address
   1162          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1163          
   1164          /*----------------------------------------------------------------------------*/
   1165          
   1166          

   \                                 In section .text, align 2, keep-with-next
   1167          void process_wan_ping_reply(uint8_t *buf, uint16_t length)
   1168          {
   \                     process_wan_ping_reply: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1169            recved_wan_ping_reply (*buf);
   \        0x6   0x7828             LDRB     R0,[R5, #+0]
   \        0x8   0x.... 0x....      BL       recved_wan_ping_reply
   1170          }
   \        0xC   0xBD31             POP      {R0,R4,R5,PC}
   1171          
   1172          /*----------------------------------------------------------------------------*/
   1173          

   \                                 In section .text, align 2, keep-with-next
   1174          void send_udp_request(uint8_t *buf, uint16_t length)
   1175          {
   \                     send_udp_request: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB08A             SUB      SP,SP,#+40
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x000C             MOVS     R4,R1
   \        0xA   0x2110             MOVS     R1,#+16
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0xAE06             ADD      R6,SP,#+24
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1176            uint8_t src_ipv6_addr[16] = {0x00};
   1177            uint16_t src_port_num = 0x0000;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \       0x1C   0x2110             MOVS     R1,#+16
   \       0x1E   0x2200             MOVS     R2,#+0
   \       0x20   0xAE02             ADD      R6,SP,#+8
   \       0x22   0x0030             MOVS     R0,R6
   \       0x24   0x.... 0x....      BL       __aeabi_memset
   1178            uint8_t dst_ipv6_addr[16] = {0x00};
   1179            uint16_t dst_port_num = 0x0000;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1180            uint16_t data_length = 0x00;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1181          
   1182                  memcpy(src_ipv6_addr,&buf[0],16);
   \       0x34   0x2610             MOVS     R6,#+16
   \       0x36   0x002F             MOVS     R7,R5
   \       0x38   0xF10D 0x0818      ADD      R8,SP,#+24
   \       0x3C   0x0032             MOVS     R2,R6
   \       0x3E   0x0039             MOVS     R1,R7
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x.... 0x....      BL       __aeabi_memcpy
   1183                  buf+=16;
   \       0x46   0x3510             ADDS     R5,R5,#+16
   1184                  mem_rev_cpy((uint8_t *)&src_port_num,&buf[0],2);
   \       0x48   0x2202             MOVS     R2,#+2
   \       0x4A   0x0029             MOVS     R1,R5
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x.... 0x....      BL       mem_rev_cpy
   1185                  buf+=2;
   \       0x52   0xF115 0x0A02      ADDS     R10,R5,#+2
   1186                  memcpy(dst_ipv6_addr,&buf[0],16);
   \       0x56   0x2510             MOVS     R5,#+16
   \       0x58   0x46D0             MOV      R8,R10
   \       0x5A   0xF10D 0x0908      ADD      R9,SP,#+8
   \       0x5E   0x002A             MOVS     R2,R5
   \       0x60   0x4641             MOV      R1,R8
   \       0x62   0x4648             MOV      R0,R9
   \       0x64   0x.... 0x....      BL       __aeabi_memcpy
   1187                  buf+=16;
   \       0x68   0xF11A 0x0910      ADDS     R9,R10,#+16
   1188                  mem_rev_cpy((uint8_t *)&dst_port_num,&buf[0],2);
   \       0x6C   0x2202             MOVS     R2,#+2
   \       0x6E   0x4649             MOV      R1,R9
   \       0x70   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x74   0x.... 0x....      BL       mem_rev_cpy
   1189                  buf+=2;        
   \       0x78   0xF119 0x0902      ADDS     R9,R9,#+2
   1190          
   1191            mem_rev_cpy((uint8_t *)&data_length,&buf[0],2);
   \       0x7C   0x2202             MOVS     R2,#+2
   \       0x7E   0x4649             MOV      R1,R9
   \       0x80   0x4668             MOV      R0,SP
   \       0x82   0x.... 0x....      BL       mem_rev_cpy
   1192            buf+=data_length;  
   \       0x86   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x8A   0x4448             ADD      R0,R9,R0
   1193            //memcpy(data,&buf[0],data_length);
   1194          //  send_udp(src_ipv6_addr,src_port_num,dst_ipv6_addr,dst_port_num,buf,data_length);
   1195          }
   \       0x8C   0xB00A             ADD      SP,SP,#+40
   \       0x8E   0xE8BD 0x87F0      POP      {R4-R10,PC}
   1196          
   1197          /*------------------------------Arjun for swagger----------------------------------------------*/
   1198          void start_timer_to_send_ping (uint64_t timeval, void *data);
   1199          extern void send_icmpv6_with_count(uint8_t *buf, uint16_t length);
   1200          
   1201          /*----------------------------------------------------------------------------*/
   1202          

   \                                 In section .text, align 2, keep-with-next
   1203          void send_icmpv6_after_delay (void *data)
   1204          {
   \                     send_icmpv6_after_delay: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   1205            uint8_t *buf = NULL;
   \        0x6   0x2500             MOVS     R5,#+0
   1206            uint16_t length = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1207            memcpy ((uint8_t *)&length, (uint8_t *)data, 2);
   \        0xE   0x2602             MOVS     R6,#+2
   \       0x10   0x0027             MOVS     R7,R4
   \       0x12   0x46E8             MOV      R8,SP
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x0039             MOVS     R1,R7
   \       0x18   0x4640             MOV      R0,R8
   \       0x1A   0x.... 0x....      BL       __aeabi_memcpy
   1208            buf = (uint8_t *)data + 2;
   \       0x1E   0xF114 0x0802      ADDS     R8,R4,#+2
   1209            send_icmpv6 (buf, length);
   \       0x22   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \       0x26   0x4640             MOV      R0,R8
   \       0x28   0x.... 0x....      BL       send_icmpv6
   1210            app_bm_free ((uint8_t *)data);
   \       0x2C   0x0020             MOVS     R0,R4
   \       0x2E   0x.... 0x....      BL       app_bm_free
   1211          }
   \       0x32   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}
   1212          
   1213          /*----------------------------------------------------------------------------*/
   1214          
   1215          //void send_icmpv6_request_tbc(uint8_t *buf, uint16_t length)
   1216          //{
   1217          //  uint8_t status = 0;
   1218          //  send_hif_conf_cb(SEND_ICMPv6_CONF,status);
   1219          //  uint8_t *ping_data = app_bm_alloc (length + 2);
   1220          //  memcpy (ping_data, &length, 2);
   1221          //  memcpy (ping_data + 2, buf, length);
   1222          //  start_timer_to_send_ping (200, ping_data);       /*Ping will be out after 200 milliseconds*/
   1223          //}
   1224          
   1225          /*----------------------------------------------------------------------------*/
   1226          

   \                                 In section .text, align 2, keep-with-next
   1227          void send_icmpv6_request(uint8_t *buf, uint16_t length)
   1228          {
   \                     send_icmpv6_request: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1229            send_icmpv6_with_count(buf,length);
   \        0x6   0x0021             MOVS     R1,R4
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       send_icmpv6_with_count
   1230          }
   \       0x10   0xBD31             POP      {R0,R4,R5,PC}
   1231          
   1232          /*----------------------------------------------------------------------------*/
   1233          
   1234          //void send_icmpv6_request(uint8_t *buf, uint16_t length)
   1235          //{
   1236          //  uint8_t src_ipv6_addr[16] = {0x00};
   1237          //  uint8_t dst_ipv6_addr[16] = {0x00};
   1238          //  uint16_t data_length = 0x00;
   1239          ////  uint8_t data[200]={0};
   1240          //  
   1241          ////  if(ipv6_address_flag==1)
   1242          ////  {
   1243          //    memcpy(src_ipv6_addr,&buf[0],16);
   1244          //    buf+=16;
   1245          //    memcpy(dst_ipv6_addr,&buf[0],16);
   1246          //    buf+=16;
   1247          ////  }
   1248          ////  else
   1249          ////  {
   1250          ////    memcpy(src_ipv6_addr,&buf[0],8);
   1251          ////    buf+=8;
   1252          ////    memcpy(dst_ipv6_addr,&buf[0],8);
   1253          ////    buf+=8;
   1254          ////  } 
   1255          //  mem_rev_cpy((uint8_t *)&data_length,&buf[0],2);
   1256          //  buf+=2;
   1257          ////  memcpy(&data,&buf[0],data_length);
   1258          ////  buf+=data_length;  
   1259          ////  memcpy(data,&buf[0],data_length);
   1260          //  
   1261          //  
   1262          ////  send_icmpv6
   1263          ////              (
   1264          ////               src_ipv6_addr,
   1265          ////               0,
   1266          ////               dst_ipv6_addr,
   1267          ////               0,
   1268          ////               0,
   1269          ////               0,
   1270          ////               buf,
   1271          ////               data_length 
   1272          ////               );
   1273          //  
   1274          //  
   1275          //}
   1276          /*----------------------------------------------------------------------------*/
   1277          //void trigger_subscribe_packet(uint8_t *buf, uint16_t length)
   1278          //{
   1279          //  uint8_t status = 0xFF;
   1280          // // uint8_t fwd_address[8] = {0};
   1281          //  //uint16_t fwd_port = 0;
   1282          //  uint8_t command = *buf++;
   1283          //  //uint8_t pakt_type = *buf++;//*(buf+3);         //Arjun(28-09-17): discarded as of api 1.0.5
   1284          // //buf+=4;
   1285          // // memcpy(fwd_address,&buf[0],8);
   1286          //  //buf+=8;
   1287          //  //mem_rev_cpy((uint8_t *)&fwd_port,&buf[0],2);
   1288          //  //buf+=2;
   1289          //  if(command == 1){
   1290          //    sendSubscribedPacket = 1;
   1291          //  }
   1292          //  else{
   1293          //    sendSubscribedPacket = 0;
   1294          //  }
   1295          //  status = 0;//subscribe_packets(command,fwd_address,fwd_port);
   1296          //  send_hif_conf_cb(SUBSCRIBE_PACKETS_CONF,status);
   1297          //}
   1298          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1299          void process_get_dodag_routers(uint8_t *buf, uint16_t length)
   1300          {
   \                     process_get_dodag_routers: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1301              get_dodag_routers();
   \        0x6   0x.... 0x....      BL       get_dodag_routers
   1302          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1303          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1304          void process_get_neighbor_table(uint8_t *buf, uint16_t length)
   1305          {
   \                     process_get_neighbor_table: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1306              get_neighbor_table();
   \        0x6   0x.... 0x....      BL       get_neighbor_table
   1307          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1308          

   \                                 In section .text, align 2, keep-with-next
   1309          void process_get_current_join_state(uint8_t *buf, uint16_t length)
   1310          {
   \                     process_get_current_join_state: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0006             MOVS     R6,R0
   \        0x4   0x000C             MOVS     R4,R1
   1311              uint8_t join_state  = get_current_join_state();
   \        0x6   0x.... 0x....      BL       get_current_join_state
   \        0xA   0x0005             MOVS     R5,R0
   1312              send_hif_conf_cb(SEND_CURRENT_JOIN_STATE,join_state);
   \        0xC   0x0029             MOVS     R1,R5
   \        0xE   0xB2C9             UXTB     R1,R1
   \       0x10   0x2056             MOVS     R0,#+86
   \       0x12   0x.... 0x....      BL       send_hif_conf_cb
   1313          }
   \       0x16   0xBD70             POP      {R4-R6,PC}
   1314          /*----------------------------------------------------------------------------*/
   1315          
   1316          //void process_set_pa_level(uint8_t *buf, uint16_t length)
   1317          //{
   1318          //	uint8_t level;
   1319          //        // Since now we are sending PA level as Enum, and Enum is 4 Byte value 
   1320          //        // The Value of the PA level is in the 4th location
   1321          //      level = *buf;
   1322          //      TRX_Set_PA_Level(level);
   1323          //      send_hif_conf_cb(TELEC_SET_PA_LEVEL_MCR_CONF,0);	
   1324          //}
   1325          
   1326          /*----------------------------------------------------------------------------*/
   1327          
   1328          //void process_set_router_config_tbc(uint8_t *buf, uint16_t length)
   1329          //{
   1330          //  uint8_t status = 0xFF;
   1331          //  uint8_t routing_method = 0;
   1332          //  uint16_t pan_size = 0x0000;
   1333          //  uint8_t net_name[30] = {0};
   1334          //  uint8_t index = 0;
   1335          //  uint16_t max_sisl_mtusize = 0x00;
   1336          //  routing_method = *buf++;
   1337          //  length--;
   1338          //  while(*buf != 0x00)
   1339          //  {
   1340          //    net_name[index++] = *buf++;
   1341          //    length--;
   1342          //  }
   1343          //  *buf++;
   1344          //  length--;
   1345          //  buf+=2; //routing cost offset 
   1346          //  length -= 2;
   1347          //  buf+=2; //pancost cost offset 
   1348          //  length -= 2;
   1349          //  if(length != 0)
   1350          //  {
   1351          //    mem_rev_cpy((uint8_t *)&max_sisl_mtusize,&buf[0],2);
   1352          //    max_frag_size = frag_chunk_send = max_sisl_mtusize;
   1353          //    buf+=2;
   1354          //  }
   1355          //  status = set_router_config(net_name, routing_method, pan_size);
   1356          //  send_hif_conf_cb(SET_ROUTER_CONFIG_CONF,status);
   1357          //}
   1358          /*----------------------------------------------------------------------------*/
   1359          //void process_set_router_config(uint8_t *buf, uint16_t length)
   1360          //{
   1361          //    uint8_t status = 0xFF;
   1362          //    uint8_t routing_method = 0;
   1363          //    uint16_t pan_size = 0x0000;
   1364          //    uint8_t net_name[30] = {0};    
   1365          //    uint16_t net_name_len = 0x00;
   1366          //    mem_rev_cpy((uint8_t *)&net_name_len ,&buf[0] ,2);
   1367          //    buf+=2;
   1368          //    memcpy((uint8_t *)&net_name ,&buf[0] ,net_name_len);
   1369          //    buf+=net_name_len;
   1370          //    mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1371          //    buf+=2;
   1372          //    routing_method = *buf++;
   1373          //    status = set_router_config(net_name, routing_method, pan_size);
   1374          //    send_hif_conf_cb(SET_ROUTER_CONFIG_CONF,status);
   1375          //}
   1376          
   1377          /*----------------------------------------------------------------------------*/
   1378          //void process_set_mac_whitelist_ontbc(uint8_t *buf, uint16_t length)
   1379          //{
   1380          //  uint8_t status = 0xFF;
   1381          //  status = set_mac_white_list_tbc(buf,length);
   1382          //  send_hif_conf_cb(SET_MAC_WHITELIST_CONF,status);
   1383          //}
   1384          /*----------------------------------------------------------------------------*/
   1385          //void process_set_mac_whitelist(uint8_t *buf, uint16_t length)
   1386          //{
   1387          //  uint8_t status = 0xFF;
   1388          //  status = set_mac_white_list(buf,length);
   1389          //  send_hif_conf_cb(SET_MAC_WHITELIST_CONF,status);
   1390          //}
   1391          /*----------------------------------------------------------------------------*/
   1392          //void process_get_mac_whitelist(uint8_t *buf, uint16_t length)
   1393          //{
   1394          //  get_mac_white_list();
   1395          //}
   1396          /*----------------------------------------------------------------------------*/
   1397          //void process_set_revoaction_key(uint8_t *buf, uint16_t length)
   1398          //{
   1399          //  send_hif_conf_cb(SET_REVOCATION_KEY_CONF,0);
   1400          //  set_revoaction_key(buf, length);
   1401          //}
   1402          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1403          void process_get_prefered_parents(uint8_t *buf, uint16_t length)
   1404          {
   \                     process_get_prefered_parents: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
   1405            get_prefered_parents(buf,length);
   \        0x6   0x0021             MOVS     R1,R4
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       get_prefered_parents
   1406          }
   \       0x10   0xBD31             POP      {R0,R4,R5,PC}
   1407          
   1408          /*----------------------------------------------------------------------------*/
   1409          #if(FAN_EDFE_FEATURE_ENABLED == 1)
   1410          void process_edfe_frame_exchange_req(uint8_t *buf, uint16_t length)
   1411          {
   1412            send_edfe_exchange_frame(buf,length);
   1413            send_hif_conf_cb(EDFE_FRAME_EXCHANGE_CONF,0);
   1414          }
   1415          #endif
   1416          
   1417          /*----------------------------------------------------------------------------*/
   1418          

   \                                 In section .text, align 2, keep-with-next
   1419          void process_start_network_scale_req(uint8_t *buf, uint16_t length)
   1420          {
   1421          //  uint8_t network_scal_type = *buf++;
   1422          //  if(network_scal_type == 0x01)
   1423          //  {
   1424          //    rpl_dio_interval_MIN = 19;
   1425          //    rpl_cfg_dio_interval_DUB = 1;
   1426          //    trickle_IMIN = 60;
   1427          //    trickle_IMAX = 4;
   1428          //  }
   1429          //  else if(network_scal_type == 0x00)
   1430          //  {
   1431          //    rpl_dio_interval_MIN = 15;
   1432          //    rpl_cfg_dio_interval_DUB = 2;
   1433          //    trickle_IMIN = 15;
   1434          //    trickle_IMAX = 2;
   1435          //  }
   1436          //  send_hif_conf_cb(SET_START_NETWORK_SCALE_CONF,0);
   1437          }
   \                     process_start_network_scale_req: (+1)
   \        0x0   0x4770             BX       LR
   1438          
   1439          /*----------------------------------------------------------------------------*/
   1440          
   1441          //void enable_desmac_sec(uint8_t *buf, uint16_t length)
   1442          //{
   1443          //  set_mac_security_enable_disable(*(buf+3));
   1444          //}
   1445          
   1446          
   1447          /*----------------------------------------------------------------------------*/
   1448          
   1449          //void send_eapol_packt_to_lbr(uint8_t *buff , uint16_t len , uint8_t *self_addr)
   1450          //{
   1451          //#if 0
   1452          //    enet_msg_t* msg = allocate_hif_msg( len+25 );
   1453          //    uint8_t* buf = msg->data;
   1454          //     if(msg != NULL)
   1455          //     {
   1456          //       *buf++ = SEND_EAPOL_PACKT_TRANSMIT;
   1457          //       memcpy(buf,self_addr,8);
   1458          //       buf+=8;
   1459          //       memcpy(buf,buff,len);
   1460          //       buf += len; 
   1461          //       *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1462          //       msg->data_length  = buf - msg->data;
   1463          //       hif_send_msg_up(msg->data,(msg->data_length-1),response_laye_ID,PROTOCOL_ID_FOR_APP);      
   1464          ////#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1465          ////       stack_print_debug ("E->H\n");
   1466          ////#endif
   1467          //          free_hif_msg( msg );
   1468          //     }
   1469          //#else
   1470          //     enet_msg_t* msg = allocate_hif_msg( len+25 );
   1471          //     uint8_t* buf = msg->data;
   1472          //     if(msg != NULL)
   1473          //     {
   1474          //       memcpy(buf,self_addr,8);
   1475          //       buf+=8;
   1476          //       memcpy(buf,buff,len);
   1477          //       buf += len; 
   1478          //       msg->data_length  = buf - msg->data;
   1479          //       recv_data_from_app(NULL,msg->data,msg->data_length);
   1480          //       free_hif_msg( msg );
   1481          //     }
   1482          //#endif    
   1483          //    
   1484          //}
   1485          /*----------------------------------------------------------------------------*/
   1486          
   1487          //void send_wpa_supplicant_for_bootup()
   1488          //{
   1489          //    uint8_t hif_Send_buff [5] = {0};
   1490          //    uint8_t* buf = &hif_Send_buff [0];
   1491          //
   1492          //    *buf++ = BOOT_WPA_SUPPLICANT;
   1493          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1494          //
   1495          //    hif_send_msg_up(&hif_Send_buff[0],1,6);
   1496          //     
   1497          //}
   1498          
   1499          
   1500          
   1501          /*----------------------------------------------------------------------------*/
   1502          
   1503          //void send_host_apd_bootup()
   1504          //{
   1505          //    uint8_t hifBuff[15] = {0};
   1506          //    uint8_t* buf = &hifBuff[0];
   1507          //
   1508          //    *buf++ = SEND_START_CMD_TO_HOST_APD;
   1509          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1510          //     hif_send_msg_up(&hifBuff[0], 1,response_laye_ID,PROTOCOL_ID_FOR_APP);  
   1511          //}
   1512          
   1513          /* Debdeep :: Now we send ack for every eapol packet received from Linux Hostapd */
   1514          //void send_ack_to_hostapd_for_eapol_packet()
   1515          //{
   1516          //    uint8_t hifBuff[15] = {0};
   1517          //    uint8_t* buf = &hifBuff[0];
   1518          //
   1519          //    *buf++ = SEND_EAPOL_PACKET_ACK;
   1520          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1521          //     hif_send_msg_up(&hifBuff[0], 1,response_laye_ID,PROTOCOL_ID_FOR_APP);  
   1522          //}
   1523          /*----------------------------------------------------------------------------*/
   1524          //void set_mac_address(uint8_t *buf,uint16_t len);
   1525          //void set_gtk_key_auth(uint8_t *buf,uint16_t len);
   1526          //void send_mac_addr(uint8_t *buff , uint16_t len)
   1527          //{
   1528          //#if 0  
   1529          //  uint8_t hifBuff[15] = {0};
   1530          //  uint8_t* buf = &hifBuff[0];
   1531          //  
   1532          //  *buf++ = SEND_SELF_MAC_ADDR;
   1533          //   mem_rev_cpy(buf,buff,len);
   1534          //   buf+=8;
   1535          //   *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1536          //   //len + 1  --> 1 is for Dummy COM Port
   1537          //   hif_send_msg_up(&hifBuff[0], (len +1 ),response_laye_ID,PROTOCOL_ID_FOR_APP);
   1538          //#else
   1539          //   uint8_t temp_gtk_hash_buf[65] = {0};
   1540          //   uint8_t temp_addr[8] = {0};
   1541          //   mem_rev_cpy(temp_addr,buff,8);
   1542          //   uint8_t *temp_ptr = &temp_gtk_hash_buf[0];
   1543          //   set_mac_address(&temp_addr[0],len);
   1544          //   *temp_ptr++ = fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl;
   1545          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk0_key,16);
   1546          //   temp_ptr += 16;
   1547          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk1_key,16);
   1548          //   temp_ptr += 16;
   1549          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk2_key,16);
   1550          //   temp_ptr += 16;
   1551          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk3_key,16);
   1552          //   set_gtk_key_auth(&temp_gtk_hash_buf[0],len);
   1553          //   start_host_apd();
   1554          //#endif   
   1555          //
   1556          //}
   1557          

   \                                 In section .text, align 2, keep-with-next
   1558          void set_seq_key(uint8_t live_key_id_index)
   1559          {
   \                     set_seq_key: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x2108             MOVS     R1,#+8
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x466D             MOV      R5,SP
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       __aeabi_memset
   1560            uint8_t tempBuff[8] = {0};
   1561            generate_MAC_Security_Key(live_key_id_index,0);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x.... 0x....      BL       generate_MAC_Security_Key
   1562            key_id_index = live_key_id_index;
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \       0x1E   0x7004             STRB     R4,[R0, #+0]
   1563            set_mac_security_on_LBR(&tempBuff[0],8);
   \       0x20   0x2108             MOVS     R1,#+8
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       set_mac_security_on_LBR
   1564          
   1565          #if(FAN_FRQ_HOPPING_FEATURE_ENABLED == 1)  
   1566            /* Debdeep :: For LBR we need to start scheduling for freq hopping 
   1567            after doing handshake between Linux-Hostapd and Embedded-LBR */
   1568            fan_freq_hop_start_hopping(NULL);
   1569          #endif
   1570            
   1571          }
   \       0x28   0xBD37             POP      {R0-R2,R4,R5,PC}
   1572          

   \                                 In section .text, align 2, keep-with-next
   1573          void recv_data_from_eapol_auth(uint8_t *pBuff,uint16_t len)
   1574          {
   \                     recv_data_from_eapol_auth: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   1575            TANSIT_KMP_ID = *pBuff++;        
   \        0x2   0x7803             LDRB     R3,[R0, #+0]
   \        0x4   0x.... 0x....      LDR.W    R2,??DataTable9_5
   \        0x8   0x7013             STRB     R3,[R2, #+0]
   \        0xA   0x1C44             ADDS     R4,R0,#+1
   1576            len -= 1; // Raka : 03-Dec-2017 Since KMP ID is extracted 
   \        0xC   0x1E4D             SUBS     R5,R1,#+1
   1577            
   1578            if((pBuff[0] == 0x00)&&(pBuff[1] == 0x00)&&(pBuff[2] == 0x00)&&
   1579               (pBuff[3] == 0x00)&&(pBuff[4] == 0x00)&&(pBuff[5] == 0x00)&&
   1580                 (pBuff[6] == 0x00)&&(pBuff[7] == 0x00))
   \        0xE   0x7820             LDRB     R0,[R4, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD114             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x14   0x7860             LDRB     R0,[R4, #+1]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD111             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x1A   0x78A0             LDRB     R0,[R4, #+2]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD10E             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x20   0x78E0             LDRB     R0,[R4, #+3]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD10B             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x26   0x7920             LDRB     R0,[R4, #+4]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD108             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x2C   0x7960             LDRB     R0,[R4, #+5]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD105             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x32   0x79A0             LDRB     R0,[R4, #+6]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD102             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x38   0x79E0             LDRB     R0,[R4, #+7]
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD013             BEQ.N    ??recv_data_from_eapol_auth_1
   1581            {
   1582              /* Send EAPOL Key Packet Over Radio RF when received from the Linux Suplicant
   1583              Recevied Destination Addess will all ZERO
   1584              */
   1585              #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1586              send_eapol_data_to_mac_request(pBuff,len);
   1587          #endif
   1588            }
   1589            else
   1590            {
   1591              /*send eapol packet to make udp packet and send as udp*/
   1592              if((relay_reply_flag == 0x01  || (!memcmp(authnt_interfac_id,pBuff,8)
   1593                                                || is_send_as_udp(pBuff))
   1594                  ))
   \                     ??recv_data_from_eapol_auth_0: (+1)
   \       0x3E   0x.... 0x....      LDR.W    R6,??DataTable9_6
   \       0x42   0x7830             LDRB     R0,[R6, #+0]
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xD00C             BEQ.N    ??recv_data_from_eapol_auth_2
   \       0x48   0x2208             MOVS     R2,#+8
   \       0x4A   0x0021             MOVS     R1,R4
   \       0x4C   0x.... 0x....      LDR.W    R0,??DataTable9_7
   \       0x50   0x.... 0x....      BL       memcmp
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD004             BEQ.N    ??recv_data_from_eapol_auth_2
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x.... 0x....      BL       is_send_as_udp
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD001             BEQ.N    ??recv_data_from_eapol_auth_1
   1595              {
   1596                //#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1597                //        stack_print_debug ("H->E-R\n");
   1598                //#endif
   1599          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1600                send_data_to_eapol_relay_process(pBuff,len);
   1601          #endif
   1602                relay_reply_flag = 0xFF;
   \                     ??recv_data_from_eapol_auth_2: (+1)
   \       0x62   0x20FF             MOVS     R0,#+255
   \       0x64   0x7030             STRB     R0,[R6, #+0]
   1603              }
   1604              else
   1605              {
   1606                //#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1607                //        stack_print_debug ("H->E-M\n");
   1608                //#endif
   1609                /*send packet on mac layer */
   1610          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1611                send_eapol_data_to_mac_request(pBuff,len);
   1612          #endif
   1613              }
   1614            }    
   1615          }
   \                     ??recv_data_from_eapol_auth_1: (+1)
   \       0x66   0xBD70             POP      {R4-R6,PC}
   1616          

   \                                 In section .text, align 2, keep-with-next
   1617          void send_gtk_update_indication(uint8_t *pBuff,uint16_t len)
   1618          
   1619          {
   \                     send_gtk_update_indication: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   1620            uint8_t old_gtkl = fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl;
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable9_8
   \        0xA   0xF894 0x10E5      LDRB     R1,[R4, #+229]
   \        0xE   0xF88D 0x1000      STRB     R1,[SP, #+0]
   1621            uint8_t new_gtkl = *pBuff++;
   \       0x12   0x7805             LDRB     R5,[R0, #+0]
   \       0x14   0x1C40             ADDS     R0,R0,#+1
   1622            uint8_t number_of_gtk_made_zero = *pBuff++;
   \       0x16   0xF890 0x9000      LDRB     R9,[R0, #+0]
   \       0x1A   0x1C47             ADDS     R7,R0,#+1
   1623            
   1624            for (uint8_t ii = 0; ii < 4; ii++)
   \       0x1C   0x2600             MOVS     R6,#+0
   \                     ??send_gtk_update_indication_0: (+1)
   \       0x1E   0x0030             MOVS     R0,R6
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x2804             CMP      R0,#+4
   \       0x24   0xDA11             BGE.N    ??send_gtk_update_indication_1
   1625            {
   1626              if (old_gtkl & (0x01<<ii)) /* Previously installed */
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x2C   0xFA11 0xF206      LSLS     R2,R1,R6
   \       0x30   0x4210             TST      R0,R2
   \       0x32   0xD008             BEQ.N    ??send_gtk_update_indication_2
   1627              {
   1628                if(!(new_gtkl & (0x01<<ii)))   /* Currently Not used */
   \       0x34   0x40B1             LSLS     R1,R1,R6
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0x4208             TST      R0,R1
   \       0x3C   0xD103             BNE.N    ??send_gtk_update_indication_2
   1629                {
   1630                  reset_incoming_frame_counter_for_stale_key (ii);
   \       0x3E   0x0030             MOVS     R0,R6
   \       0x40   0xB2C0             UXTB     R0,R0
   \       0x42   0x.... 0x....      BL       reset_incoming_frame_counter_for_stale_key
   1631                }
   1632              }
   1633            }
   \                     ??send_gtk_update_indication_2: (+1)
   \       0x46   0x1C76             ADDS     R6,R6,#+1
   \       0x48   0xE7E9             B.N      ??send_gtk_update_indication_0
   1634            
   1635            fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl = new_gtkl;
   \                     ??send_gtk_update_indication_1: (+1)
   \       0x4A   0xF884 0x50E5      STRB     R5,[R4, #+229]
   1636            fan_nwk_manager_app.node_basic_cfg.panvar_ie.PANVERSION += number_of_gtk_made_zero;
   \       0x4E   0xF8B4 0x00E3      LDRH     R0,[R4, #+227]
   \       0x52   0xFA50 0xF089      UXTAB    R0,R0,R9
   \       0x56   0xF8A4 0x00E3      STRH     R0,[R4, #+227]
   1637            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk0_key, pBuff, 16);
   \       0x5A   0x2610             MOVS     R6,#+16
   \       0x5C   0x9704             STR      R7,[SP, #+16]
   \       0x5E   0xF114 0x08E6      ADDS     R8,R4,#+230
   \       0x62   0x0032             MOVS     R2,R6
   \       0x64   0x9904             LDR      R1,[SP, #+16]
   \       0x66   0x4640             MOV      R0,R8
   \       0x68   0x.... 0x....      BL       __aeabi_memcpy
   1638            pBuff += 16;
   \       0x6C   0xF117 0x0810      ADDS     R8,R7,#+16
   1639            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk1_key, pBuff, 16);
   \       0x70   0x2710             MOVS     R7,#+16
   \       0x72   0xF8CD 0x800C      STR      R8,[SP, #+12]
   \       0x76   0xF114 0x0AF6      ADDS     R10,R4,#+246
   \       0x7A   0x003A             MOVS     R2,R7
   \       0x7C   0x9903             LDR      R1,[SP, #+12]
   \       0x7E   0x4650             MOV      R0,R10
   \       0x80   0x.... 0x....      BL       __aeabi_memcpy
   1640            pBuff += 16;
   \       0x84   0xF118 0x0A10      ADDS     R10,R8,#+16
   1641            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk2_key, pBuff, 16);
   \       0x88   0xF05F 0x0810      MOVS     R8,#+16
   \       0x8C   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \       0x90   0xF514 0x7B83      ADDS     R11,R4,#+262
   \       0x94   0x4642             MOV      R2,R8
   \       0x96   0x9902             LDR      R1,[SP, #+8]
   \       0x98   0x4658             MOV      R0,R11
   \       0x9A   0x.... 0x....      BL       __aeabi_memcpy
   1642            pBuff += 16;
   \       0x9E   0xF11A 0x0010      ADDS     R0,R10,#+16
   \       0xA2   0x9005             STR      R0,[SP, #+20]
   1643            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk3_key, pBuff, 16);
   \       0xA4   0xF05F 0x0A10      MOVS     R10,#+16
   \       0xA8   0x9805             LDR      R0,[SP, #+20]
   \       0xAA   0x9001             STR      R0,[SP, #+4]
   \       0xAC   0xF514 0x7B8B      ADDS     R11,R4,#+278
   \       0xB0   0x4652             MOV      R2,R10
   \       0xB2   0x9901             LDR      R1,[SP, #+4]
   \       0xB4   0x4658             MOV      R0,R11
   \       0xB6   0x.... 0x....      BL       __aeabi_memcpy
   1644            
   1645            trickle_timer_consistency_pc ();
   \       0xBA   0x.... 0x....      BL       trickle_timer_consistency_pc
   1646            
   1647            FAN_MAC_MLME_SET_Request
   1648              (
   1649               WISUN_INFO_PAYLOAD_IE_ID,/* header ie or payload ie */
   1650               WISUN_IE_SUBID_GTKHASH_IE,/* subid for each ie */	        
   1651               sizeof(gtk_key_t),/*(65+1)=(fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.length+1),*/
   1652               (uint8_t *)& fan_nwk_manager_app.node_basic_cfg.gtkhash_ie
   1653                 );
   \       0xBE   0xF114 0x03E5      ADDS     R3,R4,#+229
   \       0xC2   0x2241             MOVS     R2,#+65
   \       0xC4   0x210C             MOVS     R1,#+12
   \       0xC6   0x2004             MOVS     R0,#+4
   \       0xC8   0x.... 0x....      BL       FAN_MAC_MLME_SET_Request
   1654          }
   \       0xCC   0xB007             ADD      SP,SP,#+28
   \       0xCE   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   1655          

   \                                 In section .text, align 2, keep-with-next
   1656          void send_mac_security_set_request(uint8_t *pBuff,uint16_t len)
   1657          {
   \                     send_mac_security_set_request: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1658            key_id_index = 0x00;//*pBuff++;                    /* Active Key index */
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x7001             STRB     R1,[R0, #+0]
   1659            generate_MAC_Security_Key(key_id_index,0);
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x7800             LDRB     R0,[R0, #+0]
   \       0x12   0x.... 0x....      BL       generate_MAC_Security_Key
   1660            reset_mac_frame_counter_cmd ();
   \       0x16   0x.... 0x....      BL       reset_mac_frame_counter_cmd
   1661            add_security_key_descriptor_on_MAC ();
   \       0x1A   0x.... 0x....      BL       add_security_key_descriptor_on_MAC
   1662            trickle_timer_consistency_pc ();
   \       0x1E   0x.... 0x....      BL       trickle_timer_consistency_pc
   1663            FAN_MAC_MLME_SET_Request
   1664              (
   1665               WISUN_INFO_PAYLOAD_IE_ID,/* header ie or payload ie */
   1666               WISUN_IE_SUBID_GTKHASH_IE,/* subid for each ie */	        
   1667               sizeof(gtk_key_t),/*(65+1)=(fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.length+1),*/
   1668               (uint8_t *)& fan_nwk_manager_app.node_basic_cfg.gtkhash_ie
   1669                 );
   \       0x22   0x.... 0x....      LDR.W    R3,??DataTable9_9
   \       0x26   0x2241             MOVS     R2,#+65
   \       0x28   0x210C             MOVS     R1,#+12
   \       0x2A   0x2004             MOVS     R0,#+4
   \       0x2C   0x.... 0x....      BL       FAN_MAC_MLME_SET_Request
   1670          }
   \       0x30   0xBD31             POP      {R0,R4,R5,PC}
   1671          /*----------------------------------------------------------------------------*/
   1672          

   \                                 In section .text, align 2, keep-with-next
   1673          void send_gtkhash_to_hostapd(uint8_t *buff , uint16_t len)
   1674          {
   1675          
   1676          #if(AUTO_CONFIG_ENABLE == 0)
   1677            // Len is always 64 Byte
   1678            
   1679            uint8_t hif_Send_buff [70] = {0};
   1680            uint8_t* buf = &hif_Send_buff [0];
   1681            
   1682            *buf++ = SEND_GTK_HASH;
   1683            memcpy(buf,buff,len);
   1684            buf+=len;
   1685            *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1686            hif_send_msg_up(&hif_Send_buff[0], (len +1 ),response_laye_ID,PROTOCOL_ID_FOR_APP);
   1687          #endif
   1688          }
   \                     send_gtkhash_to_hostapd: (+1)
   \        0x0   0x4770             BX       LR
   1689          
   1690          
   1691          /****************************** HIF Message Communication **********************/
   1692          
   1693          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1694          uint8_t send_hif_seckey_cb( uint8_t cmd_id,uint8_t* seckey )
   1695          {
   \                     send_hif_seckey_cb: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB092             SUB      SP,SP,#+72
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x2146             MOVS     R1,#+70
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x466E             MOV      R6,SP
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1696            uint8_t hif_Send_buff [70] = {0};
   1697            uint8_t* buf = &hif_Send_buff [0];
   \       0x16   0x4668             MOV      R0,SP
   1698            
   1699            *buf++ = cmd_id;
   \       0x18   0x7004             STRB     R4,[R0, #+0]
   \       0x1A   0xF110 0x0901      ADDS     R9,R0,#+1
   1700            
   1701            memcpy(buf,&seckey[0],64);
   \       0x1E   0x2640             MOVS     R6,#+64
   \       0x20   0x002F             MOVS     R7,R5
   \       0x22   0x46C8             MOV      R8,R9
   \       0x24   0x0032             MOVS     R2,R6
   \       0x26   0x0039             MOVS     R1,R7
   \       0x28   0x4640             MOV      R0,R8
   \       0x2A   0x.... 0x....      BL       __aeabi_memcpy
   1702            buf+=64;
   \       0x2E   0xF119 0x0140      ADDS     R1,R9,#+64
   1703            *buf++ = DUMMY_COMPORT;//Dummy Comport 		            	     
   \       0x32   0x2055             MOVS     R0,#+85
   \       0x34   0x7008             STRB     R0,[R1, #+0]
   \       0x36   0xF111 0x0801      ADDS     R8,R1,#+1
   1704            hif_send_msg_up(&hif_Send_buff[0], 65,response_laye_ID,PROTOCOL_ID_FOR_APP);   
                   ^
Warning[Pe223]: function "hif_send_msg_up" declared implicitly
   \       0x3A   0x2301             MOVS     R3,#+1
   \       0x3C   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \       0x40   0x7802             LDRB     R2,[R0, #+0]
   \       0x42   0x2141             MOVS     R1,#+65
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x.... 0x....      BL       hif_send_msg_up
   1705                return 0;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xB013             ADD      SP,SP,#+76
   \       0x4E   0xE8BD 0x83F0      POP      {R4-R9,PC}
   1706          }
   1707          
   1708          /*----------------------------------------------------------------------------*/
   1709          

   \                                 In section .text, align 2, keep-with-next
   1710          uint8_t send_SHA256_Update_data_to_hif(uint8_t *buf, uint16_t length)
   1711          {
   \                     send_SHA256_Update_data_to_hif: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0B2             SUB      SP,SP,#+200
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x21C8             MOVS     R1,#+200
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x466E             MOV      R6,SP
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1712              uint8_t buffData [200] = {0};
   1713              uint16_t  iCnt = 0;
   \       0x16   0x2600             MOVS     R6,#+0
   1714              buffData[0] = 0xF2;
   \       0x18   0x20F2             MOVS     R0,#+242
   \       0x1A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1715          #if 0
   1716              for ( iCnt = 0; (iCnt <= length); iCnt+=4)
   1717              {
   1718                  uint32_t tempVal = (uint32_t) *((uint32_t *)(buf+iCnt));
   1719                  mem_rev_cpy(&buffData[1+iCnt],(uint8_t *)&tempVal,4);
   1720              }
   1721              
   1722          #else
   1723              memcpy(&buffData[1+iCnt],buf,length);
   \       0x1E   0x002F             MOVS     R7,R5
   \       0x20   0xB2BF             UXTH     R7,R7
   \       0x22   0x46A0             MOV      R8,R4
   \       0x24   0x4669             MOV      R1,SP
   \       0x26   0x0030             MOVS     R0,R6
   \       0x28   0xB280             UXTH     R0,R0
   \       0x2A   0x4408             ADD      R0,R1,R0
   \       0x2C   0xF110 0x0901      ADDS     R9,R0,#+1
   \       0x30   0x003A             MOVS     R2,R7
   \       0x32   0x4641             MOV      R1,R8
   \       0x34   0x4648             MOV      R0,R9
   \       0x36   0x.... 0x....      BL       __aeabi_memcpy
   1724          #endif
   1725              
   1726              //hif_send_msg_up(&buffData[0],1+iCnt,1);
   1727              //hif_send_msg_up(&buffData[0],length,1);
   1728          
   1729              return 0;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xB033             ADD      SP,SP,#+204
   \       0x3E   0xE8BD 0x83F0      POP      {R4-R9,PC}
   1730          }
   1731          
   1732          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1733          uint8_t send_hif_conf_cb (uint8_t cmd_id,uint8_t status )
   1734          {
   \                     send_hif_conf_cb: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x2105             MOVS     R1,#+5
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x466E             MOV      R6,SP
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0x.... 0x....      BL       __aeabi_memset
   1735            uint8_t hif_Send_buff [ 5] = {0};
   1736            uint8_t* buf = &hif_Send_buff [0];
   \       0x12   0x4668             MOV      R0,SP
   1737            
   1738            *buf++ = cmd_id;
   \       0x14   0x7004             STRB     R4,[R0, #+0]
   \       0x16   0x1C40             ADDS     R0,R0,#+1
   1739            *buf++ = status;
   \       0x18   0x7005             STRB     R5,[R0, #+0]
   \       0x1A   0x1C41             ADDS     R1,R0,#+1
   1740            *buf++ = DUMMY_COMPORT;//Dummy Comport 
   \       0x1C   0x2055             MOVS     R0,#+85
   \       0x1E   0x7008             STRB     R0,[R1, #+0]
   \       0x20   0x1C49             ADDS     R1,R1,#+1
   1741            
   1742            //hif_send_msg_up (&hif_Send_buff[0], 2, response_laye_ID, PROTOCOL_ID_FOR_APP);
   1743            return 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xBD76             POP      {R1,R2,R4-R6,PC}
   1744          }
   1745          /*----------------------------------------------------------------------------*/
   1746          
   1747          
   1748          /*
   1749          ** =============================================================================
   1750          ** Private Function Definitions
   1751          ** =============================================================================
   1752          */
   1753          

   \                                 In section .text, align 2, keep-with-next
   1754          static void process_send_udp(uint8_t *buf, uint16_t length)
   1755          {
   \                     process_send_udp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
   \        0x4   0x000C             MOVS     R4,R1
   1756            uint8_t status = 1;
   \        0x6   0x2501             MOVS     R5,#+1
   1757             status = send_udp(buf,length);
   \        0x8   0x0021             MOVS     R1,R4
   \        0xA   0xB289             UXTH     R1,R1
   \        0xC   0x0038             MOVS     R0,R7
   \        0xE   0x.... 0x....      BL       send_udp
   \       0x12   0x0006             MOVS     R6,R0
   1758            send_hif_conf_cb(SEND_UDP_ECHO_RESP,status); 
   \       0x14   0x0031             MOVS     R1,R6
   \       0x16   0xB2C9             UXTB     R1,R1
   \       0x18   0x2049             MOVS     R0,#+73
   \       0x1A   0x.... 0x....      BL       send_hif_conf_cb
   1759          }
   \       0x1E   0xBDF1             POP      {R0,R4-R7,PC}
   1760          
   1761          

   \                                 In section .text, align 2, keep-with-next
   1762          static void send_version_info (void)
   1763          {
   \                     send_version_info: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   1764            uint8_t hifBuff[15];
   1765            hifBuff[0] = GET_VERSION_INFO_RESP;
   \        0x2   0x2063             MOVS     R0,#+99
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1766            memcpy (&hifBuff[1], VERSION_NUMBER, strlen(VERSION_NUMBER));
   \        0x8   0x2605             MOVS     R6,#+5
   \        0xA   0x.... 0x....      LDR.W    R4,??DataTable9_11
   \        0xE   0xF10D 0x0501      ADD      R5,SP,#+1
   \       0x12   0x0032             MOVS     R2,R6
   \       0x14   0x0021             MOVS     R1,R4
   \       0x16   0x0028             MOVS     R0,R5
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy
   1767            //hif_send_msg_up(hifBuff, strlen(VERSION_NUMBER)+1,response_laye_ID,PROTOCOL_ID_FOR_APP);
   1768          }
   \       0x1C   0xBD7F             POP      {R0-R6,PC}
   1769          
   1770          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1771          uint8_t hif_2_App_Interface_cb( uint8_t* pBuff,uint16_t len)
   1772          {
   \                     hif_2_App_Interface_cb: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x000F             MOVS     R7,R1
   1773            response_laye_ID = APP_DEF_LAYER_ID_TOOL;
   \        0x6   0x2102             MOVS     R1,#+2
   \        0x8   0x.... 0x....      LDR.W    R2,??DataTable9_10
   \        0xC   0x7011             STRB     R1,[R2, #+0]
   1774            uint8_t status = 0xFF;
   \        0xE   0x24FF             MOVS     R4,#+255
   1775            node_basic_config_t* p_basic_cfg = NULL;
   \       0x10   0x2500             MOVS     R5,#+0
   1776            uint8_t cmd_id = *pBuff; 
   \       0x12   0x7806             LDRB     R6,[R0, #+0]
   1777            pBuff+=4; 
   \       0x14   0xF110 0x0804      ADDS     R8,R0,#+4
   1778            
   1779            
   1780            switch ( cmd_id )
   \       0x18   0x0030             MOVS     R0,R6
   \       0x1A   0xB2C0             UXTB     R0,R0
   \       0x1C   0x2830             CMP      R0,#+48
   \       0x1E   0xD07D             BEQ.N    ??hif_2_App_Interface_cb_0
   \       0x20   0x2834             CMP      R0,#+52
   \       0x22   0xF000 0x8088      BEQ.W    ??hif_2_App_Interface_cb_1
   \       0x26   0x283C             CMP      R0,#+60
   \       0x28   0xF000 0x808B      BEQ.W    ??hif_2_App_Interface_cb_2
   \       0x2C   0x2844             CMP      R0,#+68
   \       0x2E   0xF000 0x808E      BEQ.W    ??hif_2_App_Interface_cb_3
   \       0x32   0x2848             CMP      R0,#+72
   \       0x34   0xF000 0x80B2      BEQ.W    ??hif_2_App_Interface_cb_4
   \       0x38   0x284A             CMP      R0,#+74
   \       0x3A   0xF000 0x80BC      BEQ.W    ??hif_2_App_Interface_cb_5
   \       0x3E   0x284C             CMP      R0,#+76
   \       0x40   0xF000 0x809F      BEQ.W    ??hif_2_App_Interface_cb_6
   \       0x44   0x284E             CMP      R0,#+78
   \       0x46   0xF000 0x808F      BEQ.W    ??hif_2_App_Interface_cb_7
   \       0x4A   0x2850             CMP      R0,#+80
   \       0x4C   0xF000 0x80C0      BEQ.W    ??hif_2_App_Interface_cb_8
   \       0x50   0x2852             CMP      R0,#+82
   \       0x52   0xF000 0x80CA      BEQ.W    ??hif_2_App_Interface_cb_9
   \       0x56   0x2855             CMP      R0,#+85
   \       0x58   0xF000 0x80D4      BEQ.W    ??hif_2_App_Interface_cb_10
   \       0x5C   0x2862             CMP      R0,#+98
   \       0x5E   0xF000 0x818D      BEQ.W    ??hif_2_App_Interface_cb_11
   \       0x62   0x2864             CMP      R0,#+100
   \       0x64   0xF000 0x8190      BEQ.W    ??hif_2_App_Interface_cb_12
   \       0x68   0x2866             CMP      R0,#+102
   \       0x6A   0xF000 0x8190      BEQ.W    ??hif_2_App_Interface_cb_13
   \       0x6E   0x2867             CMP      R0,#+103
   \       0x70   0xF000 0x80D5      BEQ.W    ??hif_2_App_Interface_cb_14
   \       0x74   0x288B             CMP      R0,#+139
   \       0x76   0xD043             BEQ.N    ??hif_2_App_Interface_cb_15
   \       0x78   0x288F             CMP      R0,#+143
   \       0x7A   0xD04C             BEQ.N    ??hif_2_App_Interface_cb_16
   \       0x7C   0x28C0             CMP      R0,#+192
   \       0x7E   0xD02C             BEQ.N    ??hif_2_App_Interface_cb_17
   \       0x80   0x28C2             CMP      R0,#+194
   \       0x82   0xD036             BEQ.N    ??hif_2_App_Interface_cb_18
   \       0x84   0x28C4             CMP      R0,#+196
   \       0x86   0xF000 0x80D7      BEQ.W    ??hif_2_App_Interface_cb_19
   \       0x8A   0x28C6             CMP      R0,#+198
   \       0x8C   0xF000 0x80E1      BEQ.W    ??hif_2_App_Interface_cb_20
   \       0x90   0x28C9             CMP      R0,#+201
   \       0x92   0xF000 0x80EB      BEQ.W    ??hif_2_App_Interface_cb_21
   \       0x96   0x28CB             CMP      R0,#+203
   \       0x98   0xF000 0x80F5      BEQ.W    ??hif_2_App_Interface_cb_22
   \       0x9C   0x28CD             CMP      R0,#+205
   \       0x9E   0xF000 0x80FF      BEQ.W    ??hif_2_App_Interface_cb_23
   \       0xA2   0x28D1             CMP      R0,#+209
   \       0xA4   0xF000 0x8109      BEQ.W    ??hif_2_App_Interface_cb_24
   \       0xA8   0x28D3             CMP      R0,#+211
   \       0xAA   0xF000 0x8113      BEQ.W    ??hif_2_App_Interface_cb_25
   \       0xAE   0x28D5             CMP      R0,#+213
   \       0xB0   0xF000 0x811D      BEQ.W    ??hif_2_App_Interface_cb_26
   \       0xB4   0x28D7             CMP      R0,#+215
   \       0xB6   0xF000 0x8127      BEQ.W    ??hif_2_App_Interface_cb_27
   \       0xBA   0x28D9             CMP      R0,#+217
   \       0xBC   0xF000 0x8131      BEQ.W    ??hif_2_App_Interface_cb_28
   \       0xC0   0x28DB             CMP      R0,#+219
   \       0xC2   0xF000 0x813B      BEQ.W    ??hif_2_App_Interface_cb_29
   \       0xC6   0x28DD             CMP      R0,#+221
   \       0xC8   0xF000 0x8152      BEQ.W    ??hif_2_App_Interface_cb_30
   \       0xCC   0x28DF             CMP      R0,#+223
   \       0xCE   0xF000 0x8142      BEQ.W    ??hif_2_App_Interface_cb_31
   \       0xD2   0x28E3             CMP      R0,#+227
   \       0xD4   0xF000 0x8155      BEQ.W    ??hif_2_App_Interface_cb_32
   \       0xD8   0xE15D             B.N      ??hif_2_App_Interface_cb_33
   1781            {
   1782              
   1783              /******************************************************************************
   1784              FAN Stack Validation Tool Command ID
   1785              *******************************************************************************/   
   1786            case SWITCH_OPERATIONAL_MODE:
   1787              p_basic_cfg = &(fan_nwk_manager_app.node_basic_cfg);
   \                     ??hif_2_App_Interface_cb_17: (+1)
   \       0xDA   0x....             LDR.N    R0,??DataTable9_12
   \       0xDC   0x0005             MOVS     R5,R0
   1788              p_basic_cfg->operational_mode = (pBuff[0]);
   \       0xDE   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0xE2   0x7028             STRB     R0,[R5, #+0]
   1789              //    store_nvm_param.operational_mode = p_basic_cfg->operational_mode;
   1790          #if(APP_NVM_FEATURE_ENABLED == 1)
   1791              nvm_store_node_basic_info();
   1792          #endif
   1793              send_hif_conf_cb(SWITCH_OPERATIONAL_MODE_CONF,0);
   \       0xE4   0x2100             MOVS     R1,#+0
   \       0xE6   0x20C1             MOVS     R0,#+193
   \       0xE8   0x.... 0x....      BL       send_hif_conf_cb
   1794              NVIC_SystemReset();
   \       0xEC   0x.... 0x....      BL       __NVIC_SystemReset
   1795              break;
   \       0xF0   0xE153             B.N      ??hif_2_App_Interface_cb_34
   1796              
   1797            case GET_OPERATIONAL_MODE:
   1798              p_basic_cfg = &(fan_nwk_manager_app.node_basic_cfg);
   \                     ??hif_2_App_Interface_cb_18: (+1)
   \       0xF2   0x....             LDR.N    R0,??DataTable9_12
   \       0xF4   0x0005             MOVS     R5,R0
   1799              send_hif_conf_cb(SEND_OPERATINAL_MODE,p_basic_cfg->operational_mode );
   \       0xF6   0x7829             LDRB     R1,[R5, #+0]
   \       0xF8   0x20C3             MOVS     R0,#+195
   \       0xFA   0x.... 0x....      BL       send_hif_conf_cb
   1800              break;
   \       0xFE   0xE14C             B.N      ??hif_2_App_Interface_cb_34
   1801              
   1802            case SET_BASIC_CONFIG:  // FACtory Mode and RUN mode 
   1803              {
   1804                // Form Tool Config Page 
   1805                status = process_telec_set_operating_country(pBuff[0]);     
   \                     ??hif_2_App_Interface_cb_15: (+1)
   \      0x100   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0x104   0x.... 0x....      BL       process_telec_set_operating_country
   \      0x108   0x0004             MOVS     R4,R0
   1806                send_hif_conf_cb(SET_BASIC_CONFIG_CONF,status);
   \      0x10A   0x0021             MOVS     R1,R4
   \      0x10C   0xB2C9             UXTB     R1,R1
   \      0x10E   0x208C             MOVS     R0,#+140
   \      0x110   0x.... 0x....      BL       send_hif_conf_cb
   1807              }
   1808              break;
   \      0x114   0xE141             B.N      ??hif_2_App_Interface_cb_34
   1809              
   1810              
   1811            case SYSTEM_RESET:
   1812              NVIC_SystemReset();
   \                     ??hif_2_App_Interface_cb_16: (+1)
   \      0x116   0x.... 0x....      BL       __NVIC_SystemReset
   1813              break;
   \      0x11A   0xE13E             B.N      ??hif_2_App_Interface_cb_34
   1814              
   1815              
   1816          //  case APP_2_FAN_UDP_REQ:
   1817          //    if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   1818          //      trigger_udp_request(pBuff);
   1819          //    else
   1820          //      send_cmd_not_support();
   1821          //    break;            
   1822              
   1823              
   1824              /******************************************************************************
   1825              SwaggerHub Command ID
   1826              *******************************************************************************/   
   1827              
   1828            case NODE_START_STOP: // In auto mode we are starting the Node ...
   1829              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_0: (+1)
   \      0x11C   0x....             LDR.N    R0,??DataTable9_8
   \      0x11E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x120   0x2800             CMP      R0,#+0
   \      0x122   0xD105             BNE.N    ??hif_2_App_Interface_cb_35
   1830              {
   1831                if(pBuff[0] == FAN_STOP_NODE)
   1832                {
   1833          #if(APP_NVM_FEATURE_ENABLED == 1)
   1834                  if(fan_nwk_manager_app.nvm_write_to_start == true)
   1835                  {
   1836                    change_join_state_for_nvm();
   1837                    fan_nwk_manager_app.nvm_write_to_start = false;
   1838                  }
   1839          #endif
   1840                }
   1841                process_set_node_start_stop(pBuff, len); 
   \      0x124   0x0039             MOVS     R1,R7
   \      0x126   0xB289             UXTH     R1,R1
   \      0x128   0x4640             MOV      R0,R8
   \      0x12A   0x.... 0x....      BL       process_set_node_start_stop
   \      0x12E   0xE001             B.N      ??hif_2_App_Interface_cb_36
   1842              }
   1843              else
   1844                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_35: (+1)
   \      0x130   0x.... 0x....      BL       send_cmd_not_support
   1845              break;    
   \                     ??hif_2_App_Interface_cb_36: (+1)
   \      0x134   0xE131             B.N      ??hif_2_App_Interface_cb_34
   1846              
   1847            case SET_FACTORY_MODE_PA_LEVEL_API:
   1848              process_set_facort_mode_PA_level_api(pBuff, len);
   \                     ??hif_2_App_Interface_cb_1: (+1)
   \      0x136   0x0039             MOVS     R1,R7
   \      0x138   0xB289             UXTH     R1,R1
   \      0x13A   0x4640             MOV      R0,R8
   \      0x13C   0x.... 0x....      BL       process_set_facort_mode_PA_level_api
   1849              break;
   \      0x140   0xE12B             B.N      ??hif_2_App_Interface_cb_34
   1850              
   1851            case SET_MAC_CHAN_PLAN_FIXED:    
   1852              process_set_mac_fixed_chan(pBuff, len);
   \                     ??hif_2_App_Interface_cb_2: (+1)
   \      0x142   0x0039             MOVS     R1,R7
   \      0x144   0xB289             UXTH     R1,R1
   \      0x146   0x4640             MOV      R0,R8
   \      0x148   0x.... 0x....      BL       process_set_mac_fixed_chan
   1853              break;
   \      0x14C   0xE125             B.N      ??hif_2_App_Interface_cb_34
   1854              
   1855            case RESET_RPL_MSG_RATE:
   1856              
   1857              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_3: (+1)
   \      0x14E   0x....             LDR.N    R0,??DataTable9_8
   \      0x150   0x7B00             LDRB     R0,[R0, #+12]
   \      0x152   0x2801             CMP      R0,#+1
   \      0x154   0xD105             BNE.N    ??hif_2_App_Interface_cb_37
   1858                process_reset_rpl_msg_rate(pBuff, len);
   \      0x156   0x0039             MOVS     R1,R7
   \      0x158   0xB289             UXTH     R1,R1
   \      0x15A   0x4640             MOV      R0,R8
   \      0x15C   0x.... 0x....      BL       process_reset_rpl_msg_rate
   \      0x160   0xE001             B.N      ??hif_2_App_Interface_cb_38
   1859              else
   1860                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_37: (+1)
   \      0x162   0x.... 0x....      BL       send_cmd_not_support
   1861              break;
   \                     ??hif_2_App_Interface_cb_38: (+1)
   \      0x166   0xE118             B.N      ??hif_2_App_Interface_cb_34
   1862              
   1863            case GET_SEC_KEYS:
   1864              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_7: (+1)
   \      0x168   0x....             LDR.N    R0,??DataTable9_8
   \      0x16A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x16C   0x2801             CMP      R0,#+1
   \      0x16E   0xD105             BNE.N    ??hif_2_App_Interface_cb_39
   1865                process_get_sec_keys(pBuff, len);
   \      0x170   0x0039             MOVS     R1,R7
   \      0x172   0xB289             UXTH     R1,R1
   \      0x174   0x4640             MOV      R0,R8
   \      0x176   0x.... 0x....      BL       process_get_sec_keys
   \      0x17A   0xE001             B.N      ??hif_2_App_Interface_cb_40
   1866              else
   1867                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_39: (+1)
   \      0x17C   0x.... 0x....      BL       send_cmd_not_support
   1868              break;
   \                     ??hif_2_App_Interface_cb_40: (+1)
   \      0x180   0xE10B             B.N      ??hif_2_App_Interface_cb_34
   1869              
   1870            case GET_IP_ADDRESSES:
   1871              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_6: (+1)
   \      0x182   0x....             LDR.N    R0,??DataTable9_8
   \      0x184   0x7B00             LDRB     R0,[R0, #+12]
   \      0x186   0x2801             CMP      R0,#+1
   \      0x188   0xD105             BNE.N    ??hif_2_App_Interface_cb_41
   1872                process_get_ip_address(pBuff, len);
   \      0x18A   0x0039             MOVS     R1,R7
   \      0x18C   0xB289             UXTH     R1,R1
   \      0x18E   0x4640             MOV      R0,R8
   \      0x190   0x.... 0x....      BL       process_get_ip_address
   \      0x194   0xE001             B.N      ??hif_2_App_Interface_cb_42
   1873              else
   1874                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_41: (+1)
   \      0x196   0x.... 0x....      BL       send_cmd_not_support
   1875              break;
   \                     ??hif_2_App_Interface_cb_42: (+1)
   \      0x19A   0xE0FE             B.N      ??hif_2_App_Interface_cb_34
   1876              
   1877            case SEND_UDP: // Sending UDP 
   1878              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_4: (+1)
   \      0x19C   0x....             LDR.N    R0,??DataTable9_8
   \      0x19E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1A0   0x2801             CMP      R0,#+1
   \      0x1A2   0xD105             BNE.N    ??hif_2_App_Interface_cb_43
   1879                process_send_udp(pBuff, len);
   \      0x1A4   0x0039             MOVS     R1,R7
   \      0x1A6   0xB289             UXTH     R1,R1
   \      0x1A8   0x4640             MOV      R0,R8
   \      0x1AA   0x.... 0x....      BL       process_send_udp
   \      0x1AE   0xE001             B.N      ??hif_2_App_Interface_cb_44
   1880              else
   1881                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_43: (+1)
   \      0x1B0   0x.... 0x....      BL       send_cmd_not_support
   1882              break;
   \                     ??hif_2_App_Interface_cb_44: (+1)
   \      0x1B4   0xE0F1             B.N      ??hif_2_App_Interface_cb_34
   1883              
   1884            case SEND_ICMPv6: // Sending IPv6 Ping
   1885              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_5: (+1)
   \      0x1B6   0x....             LDR.N    R0,??DataTable9_8
   \      0x1B8   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1BA   0x2801             CMP      R0,#+1
   \      0x1BC   0xD105             BNE.N    ??hif_2_App_Interface_cb_45
   1886                send_icmpv6_request(pBuff, len);
   \      0x1BE   0x0039             MOVS     R1,R7
   \      0x1C0   0xB289             UXTH     R1,R1
   \      0x1C2   0x4640             MOV      R0,R8
   \      0x1C4   0x.... 0x....      BL       send_icmpv6_request
   \      0x1C8   0xE001             B.N      ??hif_2_App_Interface_cb_46
   1887              else
   1888                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_45: (+1)
   \      0x1CA   0x.... 0x....      BL       send_cmd_not_support
   1889              break;
   \                     ??hif_2_App_Interface_cb_46: (+1)
   \      0x1CE   0xE0E4             B.N      ??hif_2_App_Interface_cb_34
   1890              
   1891            case API_GET_DODAG_ROUTES:
   1892              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_8: (+1)
   \      0x1D0   0x....             LDR.N    R0,??DataTable9_8
   \      0x1D2   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1D4   0x2801             CMP      R0,#+1
   \      0x1D6   0xD105             BNE.N    ??hif_2_App_Interface_cb_47
   1893                process_get_dodag_routers(pBuff, len);
   \      0x1D8   0x0039             MOVS     R1,R7
   \      0x1DA   0xB289             UXTH     R1,R1
   \      0x1DC   0x4640             MOV      R0,R8
   \      0x1DE   0x.... 0x....      BL       process_get_dodag_routers
   \      0x1E2   0xE001             B.N      ??hif_2_App_Interface_cb_48
   1894              else
   1895                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_47: (+1)
   \      0x1E4   0x.... 0x....      BL       send_cmd_not_support
   1896              break;
   \                     ??hif_2_App_Interface_cb_48: (+1)
   \      0x1E8   0xE0D7             B.N      ??hif_2_App_Interface_cb_34
   1897              
   1898            case API_GET_NEIGHBOR_TABLE:
   1899              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_9: (+1)
   \      0x1EA   0x....             LDR.N    R0,??DataTable9_8
   \      0x1EC   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1EE   0x2801             CMP      R0,#+1
   \      0x1F0   0xD105             BNE.N    ??hif_2_App_Interface_cb_49
   1900                process_get_neighbor_table(pBuff, len);
   \      0x1F2   0x0039             MOVS     R1,R7
   \      0x1F4   0xB289             UXTH     R1,R1
   \      0x1F6   0x4640             MOV      R0,R8
   \      0x1F8   0x.... 0x....      BL       process_get_neighbor_table
   \      0x1FC   0xE001             B.N      ??hif_2_App_Interface_cb_50
   1901              else
   1902                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_49: (+1)
   \      0x1FE   0x.... 0x....      BL       send_cmd_not_support
   1903              break;
   \                     ??hif_2_App_Interface_cb_50: (+1)
   \      0x202   0xE0CA             B.N      ??hif_2_App_Interface_cb_34
   1904              
   1905            case API_GET_JOIN_STATE:
   1906              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_10: (+1)
   \      0x204   0x....             LDR.N    R0,??DataTable9_8
   \      0x206   0x7B00             LDRB     R0,[R0, #+12]
   \      0x208   0x2801             CMP      R0,#+1
   \      0x20A   0xD105             BNE.N    ??hif_2_App_Interface_cb_51
   1907                process_get_current_join_state(pBuff, len);
   \      0x20C   0x0039             MOVS     R1,R7
   \      0x20E   0xB289             UXTH     R1,R1
   \      0x210   0x4640             MOV      R0,R8
   \      0x212   0x.... 0x....      BL       process_get_current_join_state
   \      0x216   0xE001             B.N      ??hif_2_App_Interface_cb_52
   1908              else
   1909                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_51: (+1)
   \      0x218   0x.... 0x....      BL       send_cmd_not_support
   1910              break;
   \                     ??hif_2_App_Interface_cb_52: (+1)
   \      0x21C   0xE0BD             B.N      ??hif_2_App_Interface_cb_34
   1911              
   1912            case GET_DEVICE_PRIMERY_PARENTS_REQ:
   1913              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_14: (+1)
   \      0x21E   0x....             LDR.N    R0,??DataTable9_8
   \      0x220   0x7B00             LDRB     R0,[R0, #+12]
   \      0x222   0x2801             CMP      R0,#+1
   \      0x224   0xD105             BNE.N    ??hif_2_App_Interface_cb_53
   1914                process_get_prefered_parents(pBuff,len);
   \      0x226   0x0039             MOVS     R1,R7
   \      0x228   0xB289             UXTH     R1,R1
   \      0x22A   0x4640             MOV      R0,R8
   \      0x22C   0x.... 0x....      BL       process_get_prefered_parents
   \      0x230   0xE001             B.N      ??hif_2_App_Interface_cb_54
   1915              else
   1916                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_53: (+1)
   \      0x232   0x.... 0x....      BL       send_cmd_not_support
   1917              break;
   \                     ??hif_2_App_Interface_cb_54: (+1)
   \      0x236   0xE0B0             B.N      ??hif_2_App_Interface_cb_34
   1918              
   1919            case SET_TX_PKT_CONFIG:
   1920              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_19: (+1)
   \      0x238   0x....             LDR.N    R0,??DataTable9_8
   \      0x23A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x23C   0x2800             CMP      R0,#+0
   \      0x23E   0xD105             BNE.N    ??hif_2_App_Interface_cb_55
   1921                process_set_pkt_tx(pBuff, len);
   \      0x240   0x0039             MOVS     R1,R7
   \      0x242   0xB289             UXTH     R1,R1
   \      0x244   0x4640             MOV      R0,R8
   \      0x246   0x.... 0x....      BL       process_set_pkt_tx
   \      0x24A   0xE001             B.N      ??hif_2_App_Interface_cb_56
   1922              else
   1923                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_55: (+1)
   \      0x24C   0x.... 0x....      BL       send_cmd_not_support
   1924              break;
   \                     ??hif_2_App_Interface_cb_56: (+1)
   \      0x250   0xE0A3             B.N      ??hif_2_App_Interface_cb_34
   1925              
   1926            case START_PACKET_TX_REQ:
   1927              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_20: (+1)
   \      0x252   0x....             LDR.N    R0,??DataTable9_8
   \      0x254   0x7B00             LDRB     R0,[R0, #+12]
   \      0x256   0x2800             CMP      R0,#+0
   \      0x258   0xD105             BNE.N    ??hif_2_App_Interface_cb_57
   1928                process_start_tx(pBuff, len);
   \      0x25A   0x0039             MOVS     R1,R7
   \      0x25C   0xB289             UXTH     R1,R1
   \      0x25E   0x4640             MOV      R0,R8
   \      0x260   0x.... 0x....      BL       process_start_tx
   \      0x264   0xE001             B.N      ??hif_2_App_Interface_cb_58
   1929              else
   1930                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_57: (+1)
   \      0x266   0x.... 0x....      BL       send_cmd_not_support
   1931              break;
   \                     ??hif_2_App_Interface_cb_58: (+1)
   \      0x26A   0xE096             B.N      ??hif_2_App_Interface_cb_34
   1932              
   1933            case STOP_PACKET_TX_REQ:
   1934              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_21: (+1)
   \      0x26C   0x....             LDR.N    R0,??DataTable9_8
   \      0x26E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x270   0x2800             CMP      R0,#+0
   \      0x272   0xD105             BNE.N    ??hif_2_App_Interface_cb_59
   1935                process_stop_tx(pBuff, len);
   \      0x274   0x0039             MOVS     R1,R7
   \      0x276   0xB289             UXTH     R1,R1
   \      0x278   0x4640             MOV      R0,R8
   \      0x27A   0x.... 0x....      BL       process_stop_tx
   \      0x27E   0xE001             B.N      ??hif_2_App_Interface_cb_60
   1936              else
   1937                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_59: (+1)
   \      0x280   0x.... 0x....      BL       send_cmd_not_support
   1938              break;
   \                     ??hif_2_App_Interface_cb_60: (+1)
   \      0x284   0xE089             B.N      ??hif_2_App_Interface_cb_34
   1939              
   1940            case START_PACKET_RX_REQ:
   1941              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_22: (+1)
   \      0x286   0x....             LDR.N    R0,??DataTable9_8
   \      0x288   0x7B00             LDRB     R0,[R0, #+12]
   \      0x28A   0x2800             CMP      R0,#+0
   \      0x28C   0xD105             BNE.N    ??hif_2_App_Interface_cb_61
   1942                process_start_rx(pBuff, len);
   \      0x28E   0x0039             MOVS     R1,R7
   \      0x290   0xB289             UXTH     R1,R1
   \      0x292   0x4640             MOV      R0,R8
   \      0x294   0x.... 0x....      BL       process_start_rx
   \      0x298   0xE001             B.N      ??hif_2_App_Interface_cb_62
   1943              else
   1944                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_61: (+1)
   \      0x29A   0x.... 0x....      BL       send_cmd_not_support
   1945              break;
   \                     ??hif_2_App_Interface_cb_62: (+1)
   \      0x29E   0xE07C             B.N      ??hif_2_App_Interface_cb_34
   1946              
   1947            case STOP_PACKET_RX_REQ:
   1948              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_23: (+1)
   \      0x2A0   0x....             LDR.N    R0,??DataTable9_8
   \      0x2A2   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2A4   0x2800             CMP      R0,#+0
   \      0x2A6   0xD105             BNE.N    ??hif_2_App_Interface_cb_63
   1949                process_stop_rx(pBuff, len);
   \      0x2A8   0x0039             MOVS     R1,R7
   \      0x2AA   0xB289             UXTH     R1,R1
   \      0x2AC   0x4640             MOV      R0,R8
   \      0x2AE   0x.... 0x....      BL       process_stop_rx
   \      0x2B2   0xE001             B.N      ??hif_2_App_Interface_cb_64
   1950              else
   1951                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_63: (+1)
   \      0x2B4   0x.... 0x....      BL       send_cmd_not_support
   1952              break;
   \                     ??hif_2_App_Interface_cb_64: (+1)
   \      0x2B8   0xE06F             B.N      ??hif_2_App_Interface_cb_34
   1953              
   1954            case START_START_CONTINUOUS_TX_REQ:
   1955              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_24: (+1)
   \      0x2BA   0x....             LDR.N    R0,??DataTable9_8
   \      0x2BC   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2BE   0x2800             CMP      R0,#+0
   \      0x2C0   0xD105             BNE.N    ??hif_2_App_Interface_cb_65
   1956                process_start_continuous_tx(pBuff, len);
   \      0x2C2   0x0039             MOVS     R1,R7
   \      0x2C4   0xB289             UXTH     R1,R1
   \      0x2C6   0x4640             MOV      R0,R8
   \      0x2C8   0x.... 0x....      BL       process_start_continuous_tx
   \      0x2CC   0xE001             B.N      ??hif_2_App_Interface_cb_66
   1957              else
   1958                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_65: (+1)
   \      0x2CE   0x.... 0x....      BL       send_cmd_not_support
   1959              break; 
   \                     ??hif_2_App_Interface_cb_66: (+1)
   \      0x2D2   0xE062             B.N      ??hif_2_App_Interface_cb_34
   1960              
   1961            case STOP_CONTINUOUS_TX_REQ:
   1962              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_25: (+1)
   \      0x2D4   0x....             LDR.N    R0,??DataTable9_8
   \      0x2D6   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2D8   0x2800             CMP      R0,#+0
   \      0x2DA   0xD105             BNE.N    ??hif_2_App_Interface_cb_67
   1963                process_stop_continuous_tx(pBuff, len);
   \      0x2DC   0x0039             MOVS     R1,R7
   \      0x2DE   0xB289             UXTH     R1,R1
   \      0x2E0   0x4640             MOV      R0,R8
   \      0x2E2   0x.... 0x....      BL       process_stop_continuous_tx
   \      0x2E6   0xE001             B.N      ??hif_2_App_Interface_cb_68
   1964              else
   1965                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_67: (+1)
   \      0x2E8   0x.... 0x....      BL       send_cmd_not_support
   1966              break;
   \                     ??hif_2_App_Interface_cb_68: (+1)
   \      0x2EC   0xE055             B.N      ??hif_2_App_Interface_cb_34
   1967              
   1968            case START_CONTINUOUS_RX_REQ:
   1969              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_26: (+1)
   \      0x2EE   0x....             LDR.N    R0,??DataTable9_8
   \      0x2F0   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2F2   0x2800             CMP      R0,#+0
   \      0x2F4   0xD105             BNE.N    ??hif_2_App_Interface_cb_69
   1970                process_start_continuous_rx(pBuff, len);
   \      0x2F6   0x0039             MOVS     R1,R7
   \      0x2F8   0xB289             UXTH     R1,R1
   \      0x2FA   0x4640             MOV      R0,R8
   \      0x2FC   0x.... 0x....      BL       process_start_continuous_rx
   \      0x300   0xE001             B.N      ??hif_2_App_Interface_cb_70
   1971              else
   1972                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_69: (+1)
   \      0x302   0x.... 0x....      BL       send_cmd_not_support
   1973              break;
   \                     ??hif_2_App_Interface_cb_70: (+1)
   \      0x306   0xE048             B.N      ??hif_2_App_Interface_cb_34
   1974              
   1975            case STOP_CONTINUOUS_RX_REQ:
   1976              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_27: (+1)
   \      0x308   0x....             LDR.N    R0,??DataTable9_8
   \      0x30A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x30C   0x2800             CMP      R0,#+0
   \      0x30E   0xD105             BNE.N    ??hif_2_App_Interface_cb_71
   1977                process_stop_continuous_rx(pBuff, len);
   \      0x310   0x0039             MOVS     R1,R7
   \      0x312   0xB289             UXTH     R1,R1
   \      0x314   0x4640             MOV      R0,R8
   \      0x316   0x.... 0x....      BL       process_stop_continuous_rx
   \      0x31A   0xE001             B.N      ??hif_2_App_Interface_cb_72
   1978              else
   1979                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_71: (+1)
   \      0x31C   0x.... 0x....      BL       send_cmd_not_support
   1980              break;
   \                     ??hif_2_App_Interface_cb_72: (+1)
   \      0x320   0xE03B             B.N      ??hif_2_App_Interface_cb_34
   1981              
   1982            case GET_RX_COUNT_DETAILS:
   1983              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_28: (+1)
   \      0x322   0x....             LDR.N    R0,??DataTable9_8
   \      0x324   0x7B00             LDRB     R0,[R0, #+12]
   \      0x326   0x2800             CMP      R0,#+0
   \      0x328   0xD105             BNE.N    ??hif_2_App_Interface_cb_73
   1984                process_get_rx_details(pBuff, len);
   \      0x32A   0x0039             MOVS     R1,R7
   \      0x32C   0xB289             UXTH     R1,R1
   \      0x32E   0x4640             MOV      R0,R8
   \      0x330   0x.... 0x....      BL       process_get_rx_details
   \      0x334   0xE001             B.N      ??hif_2_App_Interface_cb_74
   1985              else
   1986                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_73: (+1)
   \      0x336   0x.... 0x....      BL       send_cmd_not_support
   1987              break;
   \                     ??hif_2_App_Interface_cb_74: (+1)
   \      0x33A   0xE02E             B.N      ??hif_2_App_Interface_cb_34
   1988              
   1989            case PHY_ENC_TEST_TX:
   1990              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_29: (+1)
   \      0x33C   0x....             LDR.N    R0,??DataTable9_8
   \      0x33E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x340   0x2800             CMP      R0,#+0
   \      0x342   0xD105             BNE.N    ??hif_2_App_Interface_cb_75
   1991                process_test_phy_enc(pBuff, len);
   \      0x344   0x0039             MOVS     R1,R7
   \      0x346   0xB289             UXTH     R1,R1
   \      0x348   0x4640             MOV      R0,R8
   \      0x34A   0x.... 0x....      BL       process_test_phy_enc
   \      0x34E   0xE001             B.N      ??hif_2_App_Interface_cb_76
   1992              else
   1993                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_75: (+1)
   \      0x350   0x.... 0x....      BL       send_cmd_not_support
   1994              break;
   \                     ??hif_2_App_Interface_cb_76: (+1)
   \      0x354   0xE021             B.N      ??hif_2_App_Interface_cb_34
   1995              
   1996            case CMD_FACTROY_MODE_CHANNEL_SCAN_REQ:
   1997              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_31: (+1)
   \      0x356   0x....             LDR.N    R0,??DataTable9_8
   \      0x358   0x7B00             LDRB     R0,[R0, #+12]
   \      0x35A   0x2800             CMP      R0,#+0
   \      0x35C   0xD105             BNE.N    ??hif_2_App_Interface_cb_77
   1998                process_factory_mode_ch_scanning_req(pBuff, len);
   \      0x35E   0x0039             MOVS     R1,R7
   \      0x360   0xB289             UXTH     R1,R1
   \      0x362   0x4640             MOV      R0,R8
   \      0x364   0x.... 0x....      BL       process_factory_mode_ch_scanning_req
   \      0x368   0xE001             B.N      ??hif_2_App_Interface_cb_78
   1999              else
   2000                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_77: (+1)
   \      0x36A   0x.... 0x....      BL       send_cmd_not_support
   2001              break;
   \                     ??hif_2_App_Interface_cb_78: (+1)
   \      0x36E   0xE014             B.N      ??hif_2_App_Interface_cb_34
   2002              
   2003            case SET_RSSI_THRESHOLD:
   2004              process_set_rssi_threshold (pBuff, len);
   \                     ??hif_2_App_Interface_cb_30: (+1)
   \      0x370   0x0039             MOVS     R1,R7
   \      0x372   0xB289             UXTH     R1,R1
   \      0x374   0x4640             MOV      R0,R8
   \      0x376   0x.... 0x....      BL       process_set_rssi_threshold
   2005              break;
   \      0x37A   0xE00E             B.N      ??hif_2_App_Interface_cb_34
   2006              
   2007            case GET_VERSION_INFO_REQ:
   2008              send_version_info ();       /*VERSION_NUMBER*/
   \                     ??hif_2_App_Interface_cb_11: (+1)
   \      0x37C   0x.... 0x....      BL       send_version_info
   2009              break;
   \      0x380   0xE00B             B.N      ??hif_2_App_Interface_cb_34
   2010              
   2011            case GET_CONFIG_INFO_REQ:
   2012              process_get_config_info_req ();
   \                     ??hif_2_App_Interface_cb_32: (+1)
   \      0x382   0x.... 0x....      BL       process_get_config_info_req
   2013              break;
   \      0x386   0xE008             B.N      ??hif_2_App_Interface_cb_34
   2014              
   2015            case GET_ALL_PARAM_INFO_REQ:
   2016              send_all_param_info_req ();
   \                     ??hif_2_App_Interface_cb_12: (+1)
   \      0x388   0x.... 0x....      BL       send_all_param_info_req
   2017              break;
   \      0x38C   0xE005             B.N      ??hif_2_App_Interface_cb_34
   2018              
   2019            case SOFTWARE_RESET:
   2020              node_start_stop (FAN_STOP_NODE);
   \                     ??hif_2_App_Interface_cb_13: (+1)
   \      0x38E   0x2000             MOVS     R0,#+0
   \      0x390   0x.... 0x....      BL       node_start_stop
   2021              break;
   \      0x394   0xE001             B.N      ??hif_2_App_Interface_cb_34
   2022              
   2023            default:    
   2024              send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_33: (+1)
   \      0x396   0x.... 0x....      BL       send_cmd_not_support
   2025              break;
   2026            }
   2027            return 0;
   \                     ??hif_2_App_Interface_cb_34: (+1)
   \      0x39A   0x2000             MOVS     R0,#+0
   \      0x39C   0xE8BD 0x81F0      POP      {R4-R8,PC}
   2028            //return HIF_SUCCESS;
   2029          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     icmv6_response_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x....'....        DC32     mac_key_list

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x....'....        DC32     key_id_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x....'....        DC32     TANSIT_KMP_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x....'....        DC32     relay_reply_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x....'....        DC32     authnt_interfac_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+229

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x....'....        DC32     response_laye_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+12

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x31 0x2E          DC8 "1.0.2"
   \              0x30 0x2E    
   \              0x32 0x00
   \        0x6                      DS8 2
   2030          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ChangeEndianness
       0   __NVIC_SystemReset
      16   allocate_hif_msg
        16   -> app_bm_alloc
      24   gu2pcapp_node_config_set_conf
        24   -> __aeabi_memset
      32   gu2pcapp_process_para_problem_msg_ind
        32   -> __aeabi_memset
      32   gu2pcapp_send_dest_unreachable_icmp_ind
        32   -> __aeabi_memset
      48   gu2pcapp_send_echo_req_res
        48   -> __aeabi_memcpy
        48   -> allocate_hif_msg
        48   -> mem_rev_cpy
       4   gu2pcapp_send_na_ind
       4   gu2pcapp_send_ns_ind
      24   hif_2_App_Interface_cb
        24   -> __NVIC_SystemReset
        24   -> node_start_stop
        24   -> process_factory_mode_ch_scanning_req
        24   -> process_get_config_info_req
        24   -> process_get_current_join_state
        24   -> process_get_dodag_routers
        24   -> process_get_ip_address
        24   -> process_get_neighbor_table
        24   -> process_get_prefered_parents
        24   -> process_get_rx_details
        24   -> process_get_sec_keys
        24   -> process_reset_rpl_msg_rate
        24   -> process_send_udp
        24   -> process_set_facort_mode_PA_level_api
        24   -> process_set_mac_fixed_chan
        24   -> process_set_node_start_stop
        24   -> process_set_pkt_tx
        24   -> process_set_rssi_threshold
        24   -> process_start_continuous_rx
        24   -> process_start_continuous_tx
        24   -> process_start_rx
        24   -> process_start_tx
        24   -> process_stop_continuous_rx
        24   -> process_stop_continuous_tx
        24   -> process_stop_rx
        24   -> process_stop_tx
        24   -> process_telec_set_operating_country
        24   -> process_test_phy_enc
        24   -> send_all_param_info_req
        24   -> send_cmd_not_support
        24   -> send_hif_conf_cb
        24   -> send_icmpv6_request
        24   -> send_version_info
      16   process_get_current_join_state
        16   -> get_current_join_state
        16   -> send_hif_conf_cb
      16   process_get_dodag_routers
        16   -> get_dodag_routers
      16   process_get_ip_address
        16   -> get_ip_address
      16   process_get_neighbor_table
        16   -> get_neighbor_table
      16   process_get_prefered_parents
        16   -> get_prefered_parents
     112   process_get_sec_keys
       112   -> __aeabi_memcpy
       112   -> __aeabi_memset
       112   -> send_hif_seckey_cb
      24   process_reset_rpl_msg_rate
        24   -> reset_rpl_msg_rate
        24   -> send_hif_conf_cb
      24   process_send_udp
        24   -> send_hif_conf_cb
        24   -> send_udp
      24   process_set_mac_fixed_chan
        24   -> App_factory_mode_channel_set
        24   -> mem_rev_cpy
        24   -> send_hif_conf_cb
        24   -> set_mac_chan_plan_fixed
       0   process_set_mac_reg_op_api
      16   process_set_node_start_stop
        16   -> node_start_stop
       0   process_start_network_scale_req
      16   process_wan_ping_reply
        16   -> recved_wan_ping_reply
      16   recv_data_from_eapol_auth
        16   -> is_send_as_udp
        16   -> memcmp
     232   send_SHA256_Update_data_to_hif
       232   -> __aeabi_memcpy
       232   -> __aeabi_memset
       4   send_cmd_not_support
      64   send_gtk_update_indication
        64   -> FAN_MAC_MLME_SET_Request
        64   -> __aeabi_memcpy
        64   -> reset_incoming_frame_counter_for_stale_key
        64   -> trickle_timer_consistency_pc
       0   send_gtkhash_to_hostapd
      24   send_hif_conf_cb
        24   -> __aeabi_memset
     104   send_hif_seckey_cb
       104   -> __aeabi_memcpy
       104   -> __aeabi_memset
       104   -> hif_send_msg_up
      32   send_icmpv6_after_delay
        32   -> __aeabi_memcpy
        32   -> app_bm_free
        32   -> send_icmpv6
      16   send_icmpv6_request
        16   -> send_icmpv6_with_count
      16   send_mac_security_set_request
        16   -> FAN_MAC_MLME_SET_Request
        16   -> add_security_key_descriptor_on_MAC
        16   -> generate_MAC_Security_Key
        16   -> reset_mac_frame_counter_cmd
        16   -> trickle_timer_consistency_pc
      72   send_udp_request
        72   -> __aeabi_memcpy
        72   -> __aeabi_memset
        72   -> mem_rev_cpy
      32   send_version_info
        32   -> __aeabi_memcpy
      24   set_seq_key
        24   -> __aeabi_memset
        24   -> generate_MAC_Security_Key
        24   -> set_mac_security_on_LBR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
      32  ChangeEndianness
      30  __NVIC_SystemReset
      22  allocate_hif_msg
      38  gu2pcapp_node_config_set_conf
      64  gu2pcapp_process_para_problem_msg_ind
      64  gu2pcapp_send_dest_unreachable_icmp_ind
     204  gu2pcapp_send_echo_req_res
      10  gu2pcapp_send_na_ind
      10  gu2pcapp_send_ns_ind
     928  hif_2_App_Interface_cb
       8  phyModeMapArr
      24  process_get_current_join_state
      12  process_get_dodag_routers
      12  process_get_ip_address
      12  process_get_neighbor_table
      18  process_get_prefered_parents
     128  process_get_sec_keys
      38  process_reset_rpl_msg_rate
      32  process_send_udp
      50  process_set_mac_fixed_chan
       2  process_set_mac_reg_op_api
      18  process_set_node_start_stop
       2  process_start_network_scale_req
      14  process_wan_ping_reply
     104  recv_data_from_eapol_auth
       1  response_laye_ID
      66  send_SHA256_Update_data_to_hif
      18  send_cmd_not_support
     210  send_gtk_update_indication
       2  send_gtkhash_to_hostapd
      38  send_hif_conf_cb
      82  send_hif_seckey_cb
      54  send_icmpv6_after_delay
      18  send_icmpv6_request
      50  send_mac_security_set_request
     146  send_udp_request
      30  send_version_info
      42  set_seq_key

 
     9 bytes in section .data
     8 bytes in section .rodata
 2'676 bytes in section .text
 
 2'676 bytes of CODE  memory
     8 bytes of CONST memory
     9 bytes of DATA  memory

Errors: none
Warnings: 2
