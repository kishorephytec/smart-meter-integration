###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         26/Nov/2024  12:15:48
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
#    Command line                 =
#        -f
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o.rsp
#        (C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
#        -D EFR32FG23A020F512GM40=1 -D SL_COMPONENT_CATALOG_PRESENT=1 -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -lC
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir
#        --diag_suppress Pa050 -o
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse -e --fpu=VFPv5_sp --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\.\ -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\AppConfigs\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\config\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\autogen\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\HAL\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\NVM\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\buffer_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\event_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\list_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\queue_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\timer_manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\hif\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\raw_uart_if\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\Util\debug_console\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\Device\SiliconLabs\EFR32FG23\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\CMSIS\Core\Include\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\device_init\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\common\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\mpu\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\common\toolchain\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\system\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\network-manager\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\RAIL_TRX\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\MAC\Inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\wisun_modified\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\ProAppSrc\FANApp\AppInc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_callbacks\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ip\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ipv6\multicast\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\ipv6\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\rpl\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\OS_interface\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\L3\L2_L3_interface\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\cpu\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\Interface_Layer\contiki_mac_interface_layer\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\Interface_Layer\mac_sicslowpan_if\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emlib\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\os\platform\p3_lp_dk\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\common\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\ble\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\ieee802154\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\protocol\zwave\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\efr32xg1x\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_protocol\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_rssi\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\PHY\radio\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\MeterApp\Inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emdrv\dmadrv\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\SiliconLabs\platform\emdrv\common\inc\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\FLASH\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\APP_LOG\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\response_print\config\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\DebugLog\response_print\
#        -I
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\..\NVM\nvm3\inc\
#        -On --use_c++_inline) --dependencies=n
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir\AppUDPprocess.lst
#    Object file                  =
#        C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
      1          /** \file udp_port8.c
      2           *******************************************************************************
      3           ** \brief 
      4           **
      5           ** \cond 
      6           **
      7           ** COPYRIGHT(c) 2023-24 Procubed Innovations Pvt Ltd.
      8           ** All rights reserved.
      9           **
     10           ** THIS SOFTWARE IS PROVIDED BY "AS IS" AND ALL WARRANTIES OF ANY KIND,
     11           ** INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR USE,
     12           ** ARE EXPRESSLY DISCLAIMED.  THE DEVELOPER SHALL NOT BE LIABLE FOR ANY
     13           ** DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. THIS SOFTWARE
     14           ** MAY NOT BE USED IN PRODUCTS INTENDED FOR USE IN IMPLANTATION OR OTHER
     15           ** DIRECT LIFE SUPPORT APPLICATIONS WHERE MALFUNCTION MAY RESULT IN THE DIRECT
     16           ** PHYSICAL HARM OR INJURY TO PERSONS. ALL SUCH IS USE IS EXPRESSLY PROHIBITED.
     17           **
     18           *******************************************************************************
     19           **  \endcond
     20           */
     21          
     22          /*
     23          ********************************************************************************
     24          * File inclusion
     25          ********************************************************************************
     26          */
     27          
     28          
     29          #include "StackAppConf.h"
     30          #include "common.h"
     31          #include <stdio.h>
     32          #include <string.h>
     33          #include "contiki-net.h"
     34          #include "AppUDPprocess.h"
     35          #include "uart_hal.h"
     36          #include "queue_latest.h"
     37          #include "hif_utility.h"
     38          #include "fan_app_auto.h"
     39          #include "fan_api.h"
     40          #include "ie_element_info.h"
     41          #include "fan_app_test_harness.h"
     42          #include "sm.h"
     43          #include "fan_mac_interface.h"
     44          #include "app_init.h"
     45          //#include "hw_tmr.h"
     46          
     47          
     48          /*
     49          ** =============================================================================
     50          ** Private Macro definitions
     51          ** =============================================================================
     52          */
     53          	
     54          #define EXPLICIT_UDP_SEND       0
     55          
     56          /*
     57          ** =============================================================================
     58          ** Private Structures, Unions & enums Type Definitions
     59          ** =============================================================================
     60          **/
     61          
     62          typedef struct udp_config{
     63              uip_ipaddr_t src_ip_addr;
     64              uip_ipaddr_t dest_ip_addr;
     65              uint16_t source_port_number;    
     66              uint16_t destination_port_number;
     67              uint16_t data_length;
     68              uint16_t counter;    /*for sending number of packets*/
     69              uint8_t interval;    /*interval during send*/
     70              uint8_t *data_buff;
     71          }udp_config_t;
     72          
     73          /*
     74          ** =============================================================================
     75          ** Private Variable Definitions
     76          ** =============================================================================
     77          */
     78          

   \                                 In section .bss, align 4
     79          static struct simple_udp_connection unicast_connection;
   \                     unicast_connection:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     80          static struct simple_udp_connection unicast_connection1;
   \                     unicast_connection1:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     81          static struct simple_udp_connection unicast_connection2;
   \                     unicast_connection2:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     82          static struct simple_udp_connection unicast_connection3;
   \                     unicast_connection3:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     83          static struct simple_udp_connection unicast_connection4;
   \                     unicast_connection4:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     84          static udp_config_t udp_param = {0};
   \                     udp_param:
   \        0x0                      DS8 48
     85          #if EXPLICIT_UDP_SEND
     86          static uint8_t udp_send_flag = 0x00;
     87          #endif
     88          
     89          /*Umesh :30-01-2018*/

   \                                 In section .bss, align 1
     90          uint8_t data_send_idx=0x00;
   \                     data_send_idx:
   \        0x0                      DS8 1
     91          /*this varriable never used*/

   \                                 In section .bss, align 2
     92          static uint16_t udp_counter = 0;
   \                     udp_counter:
   \        0x0                      DS8 2
     93          static uint16_t recv_counter = 0;
     94          //static l3_etimer_t udp_send_timer;

   \                                 In section .bss, align 8
     95          static l3_ctimer_t udp_send_ctimer;
   \                     udp_send_ctimer:
   \        0x0                      DS8 48
     96          
     97          /*
     98          ** =============================================================================
     99          ** Private Function Prototypes
    100          ** =============================================================================
    101          */
    102          /*Umesh : 30-01-2018*/
    103          //static uint8_t process_udp(uip_ipaddr_t addr, uint8_t *data,uint16_t datalen);
    104          uint8_t send_udp(uint8_t *buf, uint16_t length);
    105          //static void process_udp_packet(uint8_t *buffer, uint16_t length);
    106          /*this function not called from anywhere*/
    107          //static void explicit_trigger_udp_request();
    108          static void udp_send_ctimer_callback(void* buf);
    109          static void send_udp_conf(void);
    110          static void
    111          revceiver_callback (struct simple_udp_connection *c,
    112                   const uip_ipaddr_t *sender_addr,
    113                   uint16_t sender_port,
    114                   const uip_ipaddr_t *receiver_addr,
    115                   uint16_t receiver_port,
    116                   const uint8_t *data,
    117                   uint16_t datalen);
    118          
    119          /*
    120          ** =============================================================================
    121          ** External Variable Declarations
    122          ** =============================================================================
    123          */
    124          
    125          /* None */
    126          
    127          /*
    128          ** =============================================================================
    129          ** External Function Prototypes
    130          ** =============================================================================
    131          */
    132          extern uint8_t response_laye_ID;
    133          extern uint8_t get_fan_device_type(void);
    134          extern void red_led_off(void);
    135          extern void mem_rev_cpy(uint8_t* dest, uint8_t* src, uint16_t len );
    136          extern uint8_t gu2pcapp_node_config_set_conf( uint8_t status );
    137          extern enet_msg_t* allocate_hif_msg( uint16_t length );
    138          extern void free_hif_msg( enet_msg_t * msgp );
    139          extern uint8_t* get_self_address(void);
    140          extern void explicit_trigger_echo_request(uip_ipaddr_t* dest_ip_addr);
    141          /*Umesh :30-01-2018*/
    142          extern int uip_ds6_nbr_num(void);
    143          /*this function not called form this file*/
    144          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    145          extern edfe_info_t edfe_information;
    146          #endif
    147          extern void * app_bm_alloc( uint16_t length );
    148          extern void app_bm_free( uint8_t *pMem  );
    149          
    150          

   \                                 In section .data, align 4
    151          L3_PROCESS(udp_process, "UDP process");
   \                     udp_process:
   \        0x0   0x0000'0000        DC32 0x0, process_thread_udp_process
   \              0x....'....
   \        0x8                      DS8 4
    152          
    153          /*
    154          ** =============================================================================
    155          ** Public Variables Definitions
    156          ** =============================================================================
    157          **/
    158          

   \                                 In section .data, align 1
    159          uint8_t temp_buf_set = 0x11;
   \                     temp_buf_set:
   \        0x0   0x11               DC8 17
    160          
    161          /*
    162          ** =============================================================================
    163          ** Public Function Prototypes
    164          ** =============================================================================
    165          */
    166          
    167          uint8_t send_udp_packets(uint8_t* p_buff);
    168          
    169          /*
    170          ** =============================================================================
    171          ** Public Function Definitions
    172          ** =============================================================================
    173          */
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void mem_reverse_cpy(uint8_t* dest, uint8_t* src, uint16_t len )
    176          {
   \                     mem_reverse_cpy: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    177              uint16_t i = 0;
   \        0x2   0x2300             MOVS     R3,#+0
    178              for (i=0;i<len;i++)
   \        0x4   0x2400             MOVS     R4,#+0
   \                     ??mem_reverse_cpy_0: (+1)
   \        0x6   0x0025             MOVS     R5,R4
   \        0x8   0x0013             MOVS     R3,R2
   \        0xA   0xB2AD             UXTH     R5,R5
   \        0xC   0xB29B             UXTH     R3,R3
   \        0xE   0x429D             CMP      R5,R3
   \       0x10   0xD20D             BCS.N    ??mem_reverse_cpy_1
    179              {
    180                dest[len-i-1] = src[i];
   \       0x12   0x0015             MOVS     R5,R2
   \       0x14   0xB2AD             UXTH     R5,R5
   \       0x16   0x0023             MOVS     R3,R4
   \       0x18   0xB29B             UXTH     R3,R3
   \       0x1A   0x1AED             SUBS     R5,R5,R3
   \       0x1C   0xEB00 0x0305      ADD      R3,R0,R5
   \       0x20   0x0025             MOVS     R5,R4
   \       0x22   0xB2AD             UXTH     R5,R5
   \       0x24   0x5D4D             LDRB     R5,[R1, R5]
   \       0x26   0xF803 0x5C01      STRB     R5,[R3, #-1]
    181              }
   \       0x2A   0x1C64             ADDS     R4,R4,#+1
   \       0x2C   0xE7EB             B.N      ??mem_reverse_cpy_0
    182          }
   \                     ??mem_reverse_cpy_1: (+1)
   \       0x2E   0xBC30             POP      {R4,R5}
   \       0x30   0x4770             BX       LR
    183          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    184          L3_PROCESS_THREAD(udp_process, ev, data)
    185          {
   \                     process_thread_udp_process: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    186              L3_PROCESS_BEGIN();
   \        0xA   0x2701             MOVS     R7,#+1
   \        0xC   0x8820             LDRH     R0,[R4, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??process_thread_udp_process_0
   \       0x12   0x28D0             CMP      R0,#+208
   \       0x14   0xD03A             BEQ.N    ??process_thread_udp_process_1
   \       0x16   0xE040             B.N      ??process_thread_udp_process_2
    187           
    188              simple_udp_register(&unicast_connection, UDP_PORT,
    189                                NULL, UDP_PORT, revceiver_callback);
   \                     ??process_thread_udp_process_0: (+1)
   \       0x18   0xF242 0x03A3      MOVW     R3,#+8355
   \       0x1C   0x.... 0x....      ADR.W    R8,revceiver_callback
   \       0x20   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0x0019             MOVS     R1,R3
   \       0x28   0x.... 0x....      LDR.W    R0,??DataTable8
   \       0x2C   0x.... 0x....      BL       simple_udp_register
    190              
    191              simple_udp_register(&unicast_connection1, UDP_PORT1,
    192                                NULL, UDP_PORT1, revceiver_callback);
   \       0x30   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x34   0xF44F 0x73FB      MOV      R3,#+502
   \       0x38   0x2200             MOVS     R2,#+0
   \       0x3A   0xF44F 0x71FB      MOV      R1,#+502
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \       0x42   0x.... 0x....      BL       simple_udp_register
    193              simple_udp_register(&unicast_connection2, UDP_PORT2,
    194                                NULL, UDP_PORT2, revceiver_callback);
   \       0x46   0xF240 0x11F7      MOVW     R1,#+503
   \       0x4A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x4E   0x000B             MOVS     R3,R1
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \       0x56   0x.... 0x....      BL       simple_udp_register
    195              simple_udp_register(&unicast_connection3, UDP_PORT3,
    196                                NULL, UDP_PORT3, revceiver_callback);
   \       0x5A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x5E   0xF44F 0x73FC      MOV      R3,#+504
   \       0x62   0x2200             MOVS     R2,#+0
   \       0x64   0xF44F 0x71FC      MOV      R1,#+504
   \       0x68   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \       0x6C   0x.... 0x....      BL       simple_udp_register
    197              simple_udp_register(&unicast_connection4, UDP_PORT4,
    198                                NULL, UDP_PORT4, revceiver_callback);
   \       0x70   0xF240 0x11F9      MOVW     R1,#+505
   \       0x74   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x78   0x000B             MOVS     R3,R1
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \       0x80   0x.... 0x....      BL       simple_udp_register
    199          
    200          #if EXPLICIT_UDP_SEND        
    201              if(get_fan_device_type() == 0x00)
    202                l3_etimer_set(&udp_send_timer, SEND_INTERVAL_ROOT);
    203              else
    204                l3_etimer_set(&udp_send_timer, SEND_INTERVAL);
    205          #endif    
    206          
    207              while(1) {
    208                L3_PROCESS_YIELD();
   \                     ??process_thread_udp_process_3: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0x0007             MOVS     R7,R0
   \       0x88   0x20D0             MOVS     R0,#+208
   \       0x8A   0x8020             STRH     R0,[R4, #+0]
   \                     ??process_thread_udp_process_1: (+1)
   \       0x8C   0x0038             MOVS     R0,R7
   \       0x8E   0xB2C0             UXTB     R0,R0
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD101             BNE.N    ??process_thread_udp_process_4
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0xE004             B.N      ??process_thread_udp_process_5
    209                if ( ev == L3_PROCESS_EVENT_TIMER ){
   \                     ??process_thread_udp_process_4: (+1)
   \       0x98   0xE7F4             B.N      ??process_thread_udp_process_3
    210                  
    211          #if EXPLICIT_UDP_SEND	  
    212                  if((get_fan_device_type() == 0x01) ||
    213                    (get_fan_device_type() == 0x02)){
    214                    if(data == &udp_send_timer &&
    215                      l3_etimer_expired(&udp_send_timer) &&
    216                      udp_send_flag == 0x01){
    217                      explicit_trigger_udp_request();
    218                    }
    219                    else{
    220                      l3_etimer_stop(&udp_send_timer);
    221                      l3_etimer_set(&udp_send_timer, SEND_INTERVAL);        
    222                    }
    223                  }
    224                  else{
    225                    if(data == &udp_send_timer &&
    226                      l3_etimer_expired(&udp_send_timer)){
    227                      explicit_trigger_udp_request();
    228                    }
    229                    else{
    230                      l3_etimer_stop(&udp_send_timer);
    231                      l3_etimer_set(&udp_send_timer, SEND_INTERVAL_ROOT);        
    232                    }  
    233                  }
    234          #endif
    235                  
    236                } 
    237              }
    238              L3_PROCESS_END();
   \                     ??process_thread_udp_process_2: (+1)
   \       0x9A   0x2100             MOVS     R1,#+0
   \       0x9C   0x2000             MOVS     R0,#+0
   \       0x9E   0x8020             STRH     R0,[R4, #+0]
   \       0xA0   0x2003             MOVS     R0,#+3
   \                     ??process_thread_udp_process_5: (+1)
   \       0xA2   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    239          }
    240          /*---------------------------------------------------------------------------*/
    241          //void trigger_udp_request( uint8_t* p_buff )
    242          //{
    243          //        uip_lladdr_t ll_add = {0};
    244          //        uip_ipaddr_t dest_ip_addr = {0};
    245          //        uint16_t datalen = 0;
    246          //        uint8_t data[512] = {0};
    247          //        uint16_t index = 0;
    248          //        rpl_dag_t *dag = NULL;  
    249          //        uint16_t prefix_id = 0;
    250          //        uint8_t addr_opt = p_buff[3];
    251          //        index += 4;
    252          //    
    253          //    dag = rpl_get_any_dag();//current dag
    254          //    if(dag == NULL)
    255          //      return;
    256          //
    257          //    
    258          //    if(addr_opt == 0x00)//global
    259          //      prefix_id = UIP_HTONS(0x2001);
    260          //
    261          //    if(addr_opt == 0x01)//link local
    262          //      prefix_id = UIP_HTONS(0xfe80);
    263          //
    264          //    if(addr_opt == 0x02){//multicast
    265          //      uip_create_linklocal_rplnodes_mcast(&dest_ip_addr);
    266          //      index += 8;
    267          //      datalen = ((p_buff[index] >> 8) | (p_buff[index+1]));    
    268          //      index += 2;
    269          //      memcpy(data, &p_buff[index], datalen);
    270          //      simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);
    271          //      return;      
    272          //    }
    273          //
    274          //    memcpy(ll_add.addr,&(p_buff[index]),8);
    275          //    index += 8;
    276          //    
    277          //    uint8_t* self_ieee_addr = get_self_address();    
    278          //    if(!memcmp(ll_add.addr, self_ieee_addr, 8))
    279          //      return;//requesting to self address error    
    280          //    
    281          //    uip_create_prefix(&dest_ip_addr, prefix_id);        
    282          //    uip_ds6_set_addr_iid(&dest_ip_addr, &ll_add);        
    283          //    
    284          //    datalen = ((p_buff[index] >> 8) | (p_buff[index+1]));    
    285          //    index += 2;
    286          //    
    287          //    memcpy(data, &p_buff[index], datalen);
    288          //    simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);      
    289          //
    290          //    return;
    291          //}
    292          /*---------------------------------------------------------------------------*/
    293          
    294          //#if AUTO_CONFIG_ENABLE 
    295          
    296          //void trigger_both_udp_ping_request(void)
    297          //{
    298          //    uint16_t datalen = 20;
    299          //    uint8_t data[MAX_UDP_LENGTH_SUPPORT/*1024*/] = {0x00};
    300          //    uip_lladdr_t ll_add  = {0};
    301          //    uip_ipaddr_t dest_ip_addr = {0};
    302          //    //uint16_t prefix_id = UIP_HTONS(0x2001);
    303          //
    304          //    if(unicast_connection.local_port != UDP_PORT &&
    305          //      unicast_connection.remote_port != UDP_PORT){
    306          //      simple_udp_register(&unicast_connection, UDP_PORT, NULL, UDP_PORT, 
    307          //                          revceiver_callback);
    308          //    }
    309          //    
    310          //    if(datalen > MAX_UDP_LENGTH_SUPPORT)
    311          //      return;
    312          //    
    313          //    memset(data, temp_buf_set, datalen);
    314          //    data[datalen-1] = 0x2f;//for getting the last byte
    315          //    temp_buf_set+=1;
    316          //
    317          //    uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    318          //    while(nbr != NULL) {
    319          //      if(!nbr->data_test){
    320          //        nbr->data_test = 1;
    321          //        memcpy(ll_add.addr,&nbr->lladdr,8);
    322          //        break;
    323          //      }      
    324          //      nbr = nbr_table_next(ds6_neighbors, nbr);
    325          //    }    
    326          //     
    327          //    if(nbr == NULL){
    328          //      red_led_off();      
    329          //      nbr = nbr_table_head(ds6_neighbors);
    330          //      while(nbr != NULL) {
    331          //        nbr->data_test = 0;
    332          //        nbr = nbr_table_next(ds6_neighbors, nbr);
    333          //      }      
    334          //    }
    335          //    else{      
    336          //      //uip_create_prefix(&dest_ip_addr, prefix_id);
    337          //      //uip_ds6_set_addr_iid(&dest_ip_addr, &ll_add);
    338          //      memcpy(&dest_ip_addr,&nbr->global_addr,16);
    339          //      simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);
    340          //      explicit_trigger_echo_request(&dest_ip_addr);    
    341          //    }      
    342          //}
    343          //#endif
    344          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    345          void send_udp_data_packet()
    346          {
    347          #if EXPLICIT_UDP_SEND  
    348            udp_send_flag = 0x01;
    349          #endif
    350            return;
   \                     send_udp_data_packet: (+1)
   \        0x0   0x4770             BX       LR
    351          }
    352          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    353          void process_udp_port_register(uint8_t *buf, uint16_t length)
    354          {
   \                     process_udp_port_register: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    355              uint16_t source_port_number = 0;    
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    356              uint16_t destination_port_number = 0; 
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    357              uint8_t index=0;
   \       0x12   0x2600             MOVS     R6,#+0
    358              
    359              mem_rev_cpy((uint8_t *)&source_port_number, &buf[index], 2);
   \       0x14   0x2202             MOVS     R2,#+2
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0xEB04 0x0100      ADD      R1,R4,R0
   \       0x1E   0xF10D 0x0006      ADD      R0,SP,#+6
   \       0x22   0x.... 0x....      BL       mem_rev_cpy
    360              index+=2;
   \       0x26   0x1CB6             ADDS     R6,R6,#+2
    361              mem_rev_cpy((uint8_t *)&destination_port_number, &buf[index], 2);
   \       0x28   0x2202             MOVS     R2,#+2
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0xEB04 0x0100      ADD      R1,R4,R0
   \       0x32   0xA801             ADD      R0,SP,#+4
   \       0x34   0x.... 0x....      BL       mem_rev_cpy
    362              index+=2;
   \       0x38   0x1CB6             ADDS     R6,R6,#+2
    363              
    364              simple_udp_register(&unicast_connection, source_port_number, NULL, 
    365                                  destination_port_number, revceiver_callback);
   \       0x3A   0x.... 0x....      ADR.W    R0,revceiver_callback
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF8BD 0x3004      LDRH     R3,[SP, #+4]
   \       0x44   0x2200             MOVS     R2,#+0
   \       0x46   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \       0x4A   0x.... 0x....      LDR.W    R0,??DataTable8
   \       0x4E   0x.... 0x....      BL       simple_udp_register
    366              gu2pcapp_node_config_set_conf(0x00);//hif success
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x.... 0x....      BL       gu2pcapp_node_config_set_conf
    367              return;
   \       0x58   0xBD73             POP      {R0,R1,R4-R6,PC}
    368          }
    369          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    370          uint8_t send_udp_packets(uint8_t* p_buff)
    371          {
   \                     send_udp_packets: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0005             MOVS     R5,R0
    372            memset(&udp_param, 0x00, sizeof(udp_param));  
   \        0x8   0x2030             MOVS     R0,#+48
   \        0xA   0x9005             STR      R0,[SP, #+20]
   \        0xC   0x2600             MOVS     R6,#+0
   \        0xE   0x.... 0x....      LDR.W    R7,??DataTable8_5
   \       0x12   0x003C             MOVS     R4,R7
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x9905             LDR      R1,[SP, #+20]
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
    373            uint16_t index=0;
   \       0x1E   0x2400             MOVS     R4,#+0
    374            memcpy(udp_param.src_ip_addr.u8, &p_buff[index], 16);
   \       0x20   0xF05F 0x0810      MOVS     R8,#+16
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0xB280             UXTH     R0,R0
   \       0x28   0x4428             ADD      R0,R5,R0
   \       0x2A   0x9004             STR      R0,[SP, #+16]
   \       0x2C   0x46B9             MOV      R9,R7
   \       0x2E   0x4642             MOV      R2,R8
   \       0x30   0x9904             LDR      R1,[SP, #+16]
   \       0x32   0x4648             MOV      R0,R9
   \       0x34   0x.... 0x....      BL       __aeabi_memcpy
    375            index+=16;
   \       0x38   0x3410             ADDS     R4,R4,#+16
    376            mem_rev_cpy((uint8_t *)&udp_param.source_port_number, &p_buff[index], 2);
   \       0x3A   0x2202             MOVS     R2,#+2
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0xB280             UXTH     R0,R0
   \       0x40   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x44   0xF117 0x0020      ADDS     R0,R7,#+32
   \       0x48   0x.... 0x....      BL       mem_rev_cpy
    377            index+=2;
   \       0x4C   0x1CA4             ADDS     R4,R4,#+2
    378            memcpy(udp_param.dest_ip_addr.u8, &p_buff[index], 16);
   \       0x4E   0xF05F 0x0A10      MOVS     R10,#+16
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x4428             ADD      R0,R5,R0
   \       0x58   0x9003             STR      R0,[SP, #+12]
   \       0x5A   0x.... 0x....      LDR.W    R9,??DataTable8_6
   \       0x5E   0x46CB             MOV      R11,R9
   \       0x60   0x4652             MOV      R2,R10
   \       0x62   0x9903             LDR      R1,[SP, #+12]
   \       0x64   0x4658             MOV      R0,R11
   \       0x66   0x.... 0x....      BL       __aeabi_memcpy
    379            index+=16; 
   \       0x6A   0x3410             ADDS     R4,R4,#+16
    380            mem_rev_cpy((uint8_t *)&udp_param.destination_port_number, &p_buff[index], 2);
   \       0x6C   0x2202             MOVS     R2,#+2
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x76   0xF117 0x0022      ADDS     R0,R7,#+34
   \       0x7A   0x.... 0x....      BL       mem_rev_cpy
    381            index+=2;
   \       0x7E   0x1CA4             ADDS     R4,R4,#+2
    382            uint16_t length; 
    383            mem_rev_cpy((uint8_t *)&length, &p_buff[index], 2);
   \       0x80   0x2202             MOVS     R2,#+2
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0xB280             UXTH     R0,R0
   \       0x86   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x8A   0xA801             ADD      R0,SP,#+4
   \       0x8C   0x.... 0x....      BL       mem_rev_cpy
    384            index+=2;
   \       0x90   0x1CA4             ADDS     R4,R4,#+2
   \       0x92   0xF8AD 0x4006      STRH     R4,[SP, #+6]
    385            udp_param.data_length = length;
   \       0x96   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \       0x9A   0x84B8             STRH     R0,[R7, #+36]
    386            udp_param.data_buff = (uint8_t *)app_bm_alloc( udp_param.data_length );
   \       0x9C   0x8CB8             LDRH     R0,[R7, #+36]
   \       0x9E   0x.... 0x....      BL       app_bm_alloc
   \       0xA2   0x62F8             STR      R0,[R7, #+44]
    387            memcpy(udp_param.data_buff, &p_buff[index], udp_param.data_length);
   \       0xA4   0x8CB8             LDRH     R0,[R7, #+36]
   \       0xA6   0x9002             STR      R0,[SP, #+8]
   \       0xA8   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \       0xAC   0xEB05 0x0B00      ADD      R11,R5,R0
   \       0xB0   0x6AFC             LDR      R4,[R7, #+44]
   \       0xB2   0x9A02             LDR      R2,[SP, #+8]
   \       0xB4   0x4659             MOV      R1,R11
   \       0xB6   0x0020             MOVS     R0,R4
   \       0xB8   0x.... 0x....      BL       __aeabi_memcpy
    388            udp_param.counter =1;
   \       0xBC   0x2001             MOVS     R0,#+1
   \       0xBE   0x84F8             STRH     R0,[R7, #+38]
    389            udp_param.interval = 5;
   \       0xC0   0x2005             MOVS     R0,#+5
   \       0xC2   0xF887 0x0028      STRB     R0,[R7, #+40]
    390            simple_udp_register(&unicast_connection, udp_param.source_port_number, NULL, 
    391                                  udp_param.destination_port_number, revceiver_callback);
   \       0xC6   0x.... 0x....      LDR.W    R4,??DataTable8
   \       0xCA   0x.... 0x....      ADR.W    R0,revceiver_callback
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0x8C7B             LDRH     R3,[R7, #+34]
   \       0xD2   0x2200             MOVS     R2,#+0
   \       0xD4   0x8C39             LDRH     R1,[R7, #+32]
   \       0xD6   0x0020             MOVS     R0,R4
   \       0xD8   0x.... 0x....      BL       simple_udp_register
    392            simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    393                                udp_param.data_length, &udp_param.dest_ip_addr);
   \       0xDC   0x464B             MOV      R3,R9
   \       0xDE   0x8CBA             LDRH     R2,[R7, #+36]
   \       0xE0   0x6AF9             LDR      R1,[R7, #+44]
   \       0xE2   0x0020             MOVS     R0,R4
   \       0xE4   0x.... 0x....      BL       simple_udp_sendto
    394             app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xE8   0x6AF8             LDR      R0,[R7, #+44]
   \       0xEA   0x.... 0x....      BL       app_bm_free
    395            return 0;
   \       0xEE   0x2000             MOVS     R0,#+0
   \       0xF0   0xB007             ADD      SP,SP,#+28
   \       0xF2   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    396          }
    397          /*---------------------------------------------------------------------------*/
    398          
    399          /*
    400          ** =============================================================================
    401          ** Private Function Definitions
    402          ** =============================================================================
    403          */
    404          

   \                                 In section .bss, align 1
    405           uint8_t udp_test_counter = 0;
   \                     udp_test_counter:
   \        0x0                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    406          uint8_t send_udp(uint8_t *buf, uint16_t length)
    407          {      
   \                     send_udp: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0004             MOVS     R4,R0
    408              memset(&udp_param, 0x00, sizeof(udp_param));   
   \        0x8   0xF05F 0x0B30      MOVS     R11,#+48
   \        0xC   0x2600             MOVS     R6,#+0
   \        0xE   0x.... 0x....      LDR.W    R7,??DataTable8_5
   \       0x12   0x003D             MOVS     R5,R7
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x4659             MOV      R1,R11
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
    409              udp_counter = 0x00;
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \       0x24   0x8001             STRH     R1,[R0, #+0]
    410              uint16_t index = 0;
   \       0x26   0xF05F 0x0A00      MOVS     R10,#+0
    411              
    412              memcpy(udp_param.src_ip_addr.u8, &buf[index], 16);
   \       0x2A   0xF05F 0x0810      MOVS     R8,#+16
   \       0x2E   0x4650             MOV      R0,R10
   \       0x30   0xB280             UXTH     R0,R0
   \       0x32   0xEB04 0x0900      ADD      R9,R4,R0
   \       0x36   0x003D             MOVS     R5,R7
   \       0x38   0x4642             MOV      R2,R8
   \       0x3A   0x4649             MOV      R1,R9
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0x.... 0x....      BL       __aeabi_memcpy
    413              index+=16;//16
   \       0x42   0xF11A 0x0A10      ADDS     R10,R10,#+16
    414              
    415              //currently no port supporting
    416              //mem_rev_cpy((uint8_t *)&udp_param.source_port_number, &buf[index], 2);
    417              //index+=2;//18
    418              if(udp_test_counter == 0)
   \       0x46   0x.... 0x....      LDR.W    R5,??DataTable8_8
   \       0x4A   0x7828             LDRB     R0,[R5, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD102             BNE.N    ??send_udp_0
    419                udp_param.source_port_number = UDP_PORT;//sending with default port
   \       0x50   0xF242 0x00A3      MOVW     R0,#+8355
   \       0x54   0x8438             STRH     R0,[R7, #+32]
    420              if(udp_test_counter == 1)
   \                     ??send_udp_0: (+1)
   \       0x56   0x7828             LDRB     R0,[R5, #+0]
   \       0x58   0x2801             CMP      R0,#+1
   \       0x5A   0xD102             BNE.N    ??send_udp_1
    421                udp_param.source_port_number = UDP_PORT1;//sending with default port
   \       0x5C   0xF44F 0x70FB      MOV      R0,#+502
   \       0x60   0x8438             STRH     R0,[R7, #+32]
    422              if(udp_test_counter == 2)
   \                     ??send_udp_1: (+1)
   \       0x62   0x7828             LDRB     R0,[R5, #+0]
   \       0x64   0x2802             CMP      R0,#+2
   \       0x66   0xD102             BNE.N    ??send_udp_2
    423                udp_param.source_port_number = UDP_PORT2;//sending with default port
   \       0x68   0xF240 0x10F7      MOVW     R0,#+503
   \       0x6C   0x8438             STRH     R0,[R7, #+32]
    424              if(udp_test_counter == 3)
   \                     ??send_udp_2: (+1)
   \       0x6E   0x7828             LDRB     R0,[R5, #+0]
   \       0x70   0x2803             CMP      R0,#+3
   \       0x72   0xD102             BNE.N    ??send_udp_3
    425                udp_param.source_port_number = UDP_PORT3;//sending with default port
   \       0x74   0xF44F 0x70FC      MOV      R0,#+504
   \       0x78   0x8438             STRH     R0,[R7, #+32]
    426              if(udp_test_counter == 4)
   \                     ??send_udp_3: (+1)
   \       0x7A   0x7828             LDRB     R0,[R5, #+0]
   \       0x7C   0x2804             CMP      R0,#+4
   \       0x7E   0xD102             BNE.N    ??send_udp_4
    427                udp_param.source_port_number = UDP_PORT4;//sending with default port
   \       0x80   0xF240 0x10F9      MOVW     R0,#+505
   \       0x84   0x8438             STRH     R0,[R7, #+32]
    428                    
    429              memcpy(udp_param.dest_ip_addr.u8, &buf[index], 16);
   \                     ??send_udp_4: (+1)
   \       0x86   0xF05F 0x0810      MOVS     R8,#+16
   \       0x8A   0x4650             MOV      R0,R10
   \       0x8C   0xB280             UXTH     R0,R0
   \       0x8E   0xEB04 0x0600      ADD      R6,R4,R0
   \       0x92   0xF117 0x0910      ADDS     R9,R7,#+16
   \       0x96   0x46CB             MOV      R11,R9
   \       0x98   0x4642             MOV      R2,R8
   \       0x9A   0x0031             MOVS     R1,R6
   \       0x9C   0x4658             MOV      R0,R11
   \       0x9E   0x.... 0x....      BL       __aeabi_memcpy
    430              index+=16;//34
   \       0xA2   0xF11A 0x0A10      ADDS     R10,R10,#+16
    431              
    432              //currently no port supporting
    433              //mem_rev_cpy((uint8_t *)&udp_param.destination_port_number, &buf[index], 2);
    434              //index+=2;//36
    435              if(udp_test_counter == 0)
   \       0xA6   0x7828             LDRB     R0,[R5, #+0]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD102             BNE.N    ??send_udp_5
    436                udp_param.destination_port_number = UDP_PORT;//sending with default port
   \       0xAC   0xF242 0x00A3      MOVW     R0,#+8355
   \       0xB0   0x8478             STRH     R0,[R7, #+34]
    437              if(udp_test_counter == 1)
   \                     ??send_udp_5: (+1)
   \       0xB2   0x7828             LDRB     R0,[R5, #+0]
   \       0xB4   0x2801             CMP      R0,#+1
   \       0xB6   0xD102             BNE.N    ??send_udp_6
    438                udp_param.destination_port_number = UDP_PORT1;//sending with default port
   \       0xB8   0xF44F 0x70FB      MOV      R0,#+502
   \       0xBC   0x8478             STRH     R0,[R7, #+34]
    439              if(udp_test_counter == 2)
   \                     ??send_udp_6: (+1)
   \       0xBE   0x7828             LDRB     R0,[R5, #+0]
   \       0xC0   0x2802             CMP      R0,#+2
   \       0xC2   0xD102             BNE.N    ??send_udp_7
    440                udp_param.destination_port_number = UDP_PORT2;//sending with default port
   \       0xC4   0xF240 0x10F7      MOVW     R0,#+503
   \       0xC8   0x8478             STRH     R0,[R7, #+34]
    441              if(udp_test_counter == 3)
   \                     ??send_udp_7: (+1)
   \       0xCA   0x7828             LDRB     R0,[R5, #+0]
   \       0xCC   0x2803             CMP      R0,#+3
   \       0xCE   0xD102             BNE.N    ??send_udp_8
    442                udp_param.destination_port_number = UDP_PORT3;//sending with default port
   \       0xD0   0xF44F 0x70FC      MOV      R0,#+504
   \       0xD4   0x8478             STRH     R0,[R7, #+34]
    443              if(udp_test_counter == 4)
   \                     ??send_udp_8: (+1)
   \       0xD6   0x7828             LDRB     R0,[R5, #+0]
   \       0xD8   0x2804             CMP      R0,#+4
   \       0xDA   0xD102             BNE.N    ??send_udp_9
    444                udp_param.destination_port_number = UDP_PORT4;//sending with default port
   \       0xDC   0xF240 0x10F9      MOVW     R0,#+505
   \       0xE0   0x8478             STRH     R0,[R7, #+34]
    445          
    446              uint8_t* self_ieee_addr = get_self_address();
   \                     ??send_udp_9: (+1)
   \       0xE2   0x.... 0x....      BL       get_self_address
   \       0xE6   0x0006             MOVS     R6,R0
    447              uip_lladdr_t ll_add;
    448              memcpy(ll_add.addr, &udp_param.dest_ip_addr.u8[8], 8);
   \       0xE8   0xF05F 0x0808      MOVS     R8,#+8
   \       0xEC   0xF117 0x0018      ADDS     R0,R7,#+24
   \       0xF0   0x9000             STR      R0,[SP, #+0]
   \       0xF2   0xF10D 0x0B08      ADD      R11,SP,#+8
   \       0xF6   0x4642             MOV      R2,R8
   \       0xF8   0x9900             LDR      R1,[SP, #+0]
   \       0xFA   0x4658             MOV      R0,R11
   \       0xFC   0x.... 0x....      BL       __aeabi_memcpy
    449              ll_add.addr[0] ^= 0x02;
   \      0x100   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x104   0xF090 0x0002      EORS     R0,R0,#0x2
   \      0x108   0xF88D 0x0008      STRB     R0,[SP, #+8]
    450              if(!memcmp(ll_add.addr, self_ieee_addr, 8))
   \      0x10C   0x2208             MOVS     R2,#+8
   \      0x10E   0x0031             MOVS     R1,R6
   \      0x110   0xA802             ADD      R0,SP,#+8
   \      0x112   0x.... 0x....      BL       memcmp
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD101             BNE.N    ??send_udp_10
    451                return 1;//requesting to self address error
   \      0x11A   0x2001             MOVS     R0,#+1
   \      0x11C   0xE0A4             B.N      ??send_udp_11
    452              
    453              mem_rev_cpy((uint8_t *)&udp_param.counter, &buf[index], 2);
   \                     ??send_udp_10: (+1)
   \      0x11E   0x2202             MOVS     R2,#+2
   \      0x120   0x4650             MOV      R0,R10
   \      0x122   0xB280             UXTH     R0,R0
   \      0x124   0xEB04 0x0100      ADD      R1,R4,R0
   \      0x128   0xF117 0x0026      ADDS     R0,R7,#+38
   \      0x12C   0x.... 0x....      BL       mem_rev_cpy
    454              index+=2;//38
   \      0x130   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \      0x134   0x46D0             MOV      R8,R10
    455          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    456              edfe_information.edfe_trigger_packt =  udp_param.counter;
    457          #endif
    458              udp_param.interval = buf[index];
   \      0x136   0x4640             MOV      R0,R8
   \      0x138   0xB280             UXTH     R0,R0
   \      0x13A   0x5C20             LDRB     R0,[R4, R0]
   \      0x13C   0xF887 0x0028      STRB     R0,[R7, #+40]
    459              index+=1;//39
   \      0x140   0xF118 0x0801      ADDS     R8,R8,#+1
    460              
    461              mem_rev_cpy((uint8_t *)&udp_param.data_length, &buf[index], 2);
   \      0x144   0x2202             MOVS     R2,#+2
   \      0x146   0x4640             MOV      R0,R8
   \      0x148   0xB280             UXTH     R0,R0
   \      0x14A   0xEB04 0x0100      ADD      R1,R4,R0
   \      0x14E   0xF117 0x0024      ADDS     R0,R7,#+36
   \      0x152   0x.... 0x....      BL       mem_rev_cpy
    462              index+=2;//CURRENT_UDP_PARAM_LEN = 41         
   \      0x156   0xF118 0x0802      ADDS     R8,R8,#+2
    463          
    464              if(udp_param.data_length == 0 || udp_param.data_length > MAX_UDP_LENGTH_SUPPORT || 
    465                 udp_param.counter == 0 || udp_param.counter >= 0xFFFF ||
    466                 udp_param.interval == 0 || udp_param.interval >= 0xFF)
   \      0x15A   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x15C   0x2800             CMP      R0,#+0
   \      0x15E   0xD014             BEQ.N    ??send_udp_12
   \      0x160   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x162   0xF240 0x51DD      MOVW     R1,#+1501
   \      0x166   0x4288             CMP      R0,R1
   \      0x168   0xDA0F             BGE.N    ??send_udp_12
   \      0x16A   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x16C   0x2800             CMP      R0,#+0
   \      0x16E   0xD00C             BEQ.N    ??send_udp_12
   \      0x170   0x8CF9             LDRH     R1,[R7, #+38]
   \      0x172   0xF64F 0x70FF      MOVW     R0,#+65535
   \      0x176   0x4281             CMP      R1,R0
   \      0x178   0xD007             BEQ.N    ??send_udp_12
   \      0x17A   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x17E   0x2800             CMP      R0,#+0
   \      0x180   0xD003             BEQ.N    ??send_udp_12
   \      0x182   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x186   0x28FF             CMP      R0,#+255
   \      0x188   0xD101             BNE.N    ??send_udp_13
    467                return 1;//sending fail status
   \                     ??send_udp_12: (+1)
   \      0x18A   0x2001             MOVS     R0,#+1
   \      0x18C   0xE06C             B.N      ??send_udp_11
    468              
    469              //explicitly setting to 5 sec, due more than 10 hopping
    470              if(udp_param.interval <= 5)
   \                     ??send_udp_13: (+1)
   \      0x18E   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x192   0x2806             CMP      R0,#+6
   \      0x194   0xDA02             BGE.N    ??send_udp_14
    471                udp_param.interval = 5;
   \      0x196   0x2005             MOVS     R0,#+5
   \      0x198   0xF887 0x0028      STRB     R0,[R7, #+40]
    472              udp_param.data_buff = (uint8_t *)app_bm_alloc( udp_param.data_length );
   \                     ??send_udp_14: (+1)
   \      0x19C   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x19E   0x.... 0x....      BL       app_bm_alloc
   \      0x1A2   0x62F8             STR      R0,[R7, #+44]
    473              if(udp_param.data_buff == NULL)
   \      0x1A4   0x6AF8             LDR      R0,[R7, #+44]
   \      0x1A6   0x2800             CMP      R0,#+0
   \      0x1A8   0xD101             BNE.N    ??send_udp_15
    474              {
    475                return 1;
   \      0x1AA   0x2001             MOVS     R0,#+1
   \      0x1AC   0xE05C             B.N      ??send_udp_11
    476              }
    477              memcpy(udp_param.data_buff, &buf[index], udp_param.data_length);//NEED DYNAMIC ALLOCATION
   \                     ??send_udp_15: (+1)
   \      0x1AE   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x1B0   0x9000             STR      R0,[SP, #+0]
   \      0x1B2   0x4640             MOV      R0,R8
   \      0x1B4   0xB280             UXTH     R0,R0
   \      0x1B6   0xEB04 0x0A00      ADD      R10,R4,R0
   \      0x1BA   0xF8D7 0xB02C      LDR      R11,[R7, #+44]
   \      0x1BE   0x9A00             LDR      R2,[SP, #+0]
   \      0x1C0   0x4651             MOV      R1,R10
   \      0x1C2   0x4658             MOV      R0,R11
   \      0x1C4   0x.... 0x....      BL       __aeabi_memcpy
    478              index+=udp_param.data_length;    
   \      0x1C8   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x1CA   0xEB10 0x0808      ADDS     R8,R0,R8
    479              
    480              //simple_udp_register(&unicast_connection, udp_param.source_port_number, NULL, 
    481              //                    udp_param.destination_port_number, revceiver_callback);    
    482              
    483                if(udp_test_counter == 0)
   \      0x1CE   0x7828             LDRB     R0,[R5, #+0]
   \      0x1D0   0x2800             CMP      R0,#+0
   \      0x1D2   0xD105             BNE.N    ??send_udp_16
    484                simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    485                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1D4   0x464B             MOV      R3,R9
   \      0x1D6   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1D8   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1DA   0x....             LDR.N    R0,??DataTable8
   \      0x1DC   0x.... 0x....      BL       simple_udp_sendto
    486              if(udp_test_counter == 1)
   \                     ??send_udp_16: (+1)
   \      0x1E0   0x7828             LDRB     R0,[R5, #+0]
   \      0x1E2   0x2801             CMP      R0,#+1
   \      0x1E4   0xD105             BNE.N    ??send_udp_17
    487                simple_udp_sendto(&unicast_connection1, udp_param.data_buff, 
    488                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1E6   0x464B             MOV      R3,R9
   \      0x1E8   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1EA   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1EC   0x....             LDR.N    R0,??DataTable8_1
   \      0x1EE   0x.... 0x....      BL       simple_udp_sendto
    489              if(udp_test_counter == 2)
   \                     ??send_udp_17: (+1)
   \      0x1F2   0x7828             LDRB     R0,[R5, #+0]
   \      0x1F4   0x2802             CMP      R0,#+2
   \      0x1F6   0xD105             BNE.N    ??send_udp_18
    490                simple_udp_sendto(&unicast_connection2, udp_param.data_buff, 
    491                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1F8   0x464B             MOV      R3,R9
   \      0x1FA   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1FC   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1FE   0x....             LDR.N    R0,??DataTable8_2
   \      0x200   0x.... 0x....      BL       simple_udp_sendto
    492              if(udp_test_counter == 3)
   \                     ??send_udp_18: (+1)
   \      0x204   0x7828             LDRB     R0,[R5, #+0]
   \      0x206   0x2803             CMP      R0,#+3
   \      0x208   0xD105             BNE.N    ??send_udp_19
    493                simple_udp_sendto(&unicast_connection3, udp_param.data_buff, 
    494                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x20A   0x464B             MOV      R3,R9
   \      0x20C   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x20E   0x6AF9             LDR      R1,[R7, #+44]
   \      0x210   0x....             LDR.N    R0,??DataTable8_3
   \      0x212   0x.... 0x....      BL       simple_udp_sendto
    495              if(udp_test_counter == 4)
   \                     ??send_udp_19: (+1)
   \      0x216   0x7828             LDRB     R0,[R5, #+0]
   \      0x218   0x2804             CMP      R0,#+4
   \      0x21A   0xD105             BNE.N    ??send_udp_20
    496                simple_udp_sendto(&unicast_connection4, udp_param.data_buff, 
    497                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x21C   0x464B             MOV      R3,R9
   \      0x21E   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x220   0x6AF9             LDR      R1,[R7, #+44]
   \      0x222   0x....             LDR.N    R0,??DataTable8_4
   \      0x224   0x.... 0x....      BL       simple_udp_sendto
    498              
    499          //    simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    500          //                      udp_param.data_length, &udp_param.dest_ip_addr);
    501              udp_param.counter--;
   \                     ??send_udp_20: (+1)
   \      0x228   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x22A   0x1E40             SUBS     R0,R0,#+1
   \      0x22C   0x84F8             STRH     R0,[R7, #+38]
    502              send_udp_conf();
   \      0x22E   0x.... 0x....      BL       send_udp_conf
    503              //gu2pcapp_node_config_set_conf(0x00);
    504          
    505              if(udp_param.counter)
   \      0x232   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xD00D             BEQ.N    ??send_udp_21
    506              {
    507                l3_ctimer_set(&udp_send_ctimer, udp_param.interval*CLOCK_SECOND, 
    508                           udp_send_ctimer_callback, NULL);      
   \      0x238   0x2000             MOVS     R0,#+0
   \      0x23A   0x9001             STR      R0,[SP, #+4]
   \      0x23C   0x.... 0x....      ADR.W    R0,udp_send_ctimer_callback
   \      0x240   0x9000             STR      R0,[SP, #+0]
   \      0x242   0xF897 0x2028      LDRB     R2,[R7, #+40]
   \      0x246   0xF44F 0x707A      MOV      R0,#+1000
   \      0x24A   0x4342             MULS     R2,R0,R2
   \      0x24C   0x17D3             ASRS     R3,R2,#+31
   \      0x24E   0x....             LDR.N    R0,??DataTable8_9
   \      0x250   0x.... 0x....      BL       l3_ctimer_set
    509              }
    510              if (udp_test_counter == 4)
   \                     ??send_udp_21: (+1)
   \      0x254   0x7828             LDRB     R0,[R5, #+0]
   \      0x256   0x2804             CMP      R0,#+4
   \      0x258   0xD102             BNE.N    ??send_udp_22
    511                udp_test_counter = 0;
   \      0x25A   0x2000             MOVS     R0,#+0
   \      0x25C   0x7028             STRB     R0,[R5, #+0]
   \      0x25E   0xE002             B.N      ??send_udp_23
    512              else
    513                udp_test_counter++;
   \                     ??send_udp_22: (+1)
   \      0x260   0x7828             LDRB     R0,[R5, #+0]
   \      0x262   0x1C40             ADDS     R0,R0,#+1
   \      0x264   0x7028             STRB     R0,[R5, #+0]
    514              
    515              return 0;
   \                     ??send_udp_23: (+1)
   \      0x266   0x2000             MOVS     R0,#+0
   \                     ??send_udp_11: (+1)
   \      0x268   0xB005             ADD      SP,SP,#+20
   \      0x26A   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    516          }
    517          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    518          static void udp_send_ctimer_callback(void* ptr)
    519          {
   \                     udp_send_ctimer_callback: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    520              simple_udp_sendto(&unicast_connection, udp_param.data_buff, udp_param.data_length, 
    521                                &udp_param.dest_ip_addr);
   \        0x4   0x....             LDR.N    R5,??DataTable8_5
   \        0x6   0xF115 0x0310      ADDS     R3,R5,#+16
   \        0xA   0x8CAA             LDRH     R2,[R5, #+36]
   \        0xC   0x6AE9             LDR      R1,[R5, #+44]
   \        0xE   0x....             LDR.N    R0,??DataTable8
   \       0x10   0x.... 0x....      BL       simple_udp_sendto
    522              udp_param.counter--;
   \       0x14   0x8CE8             LDRH     R0,[R5, #+38]
   \       0x16   0x1E40             SUBS     R0,R0,#+1
   \       0x18   0x84E8             STRH     R0,[R5, #+38]
    523              send_udp_conf();
   \       0x1A   0x.... 0x....      BL       send_udp_conf
    524              //gu2pcapp_node_config_set_conf(0x00);    
    525              if(udp_param.counter)
   \       0x1E   0x8CE8             LDRH     R0,[R5, #+38]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD00D             BEQ.N    ??udp_send_ctimer_callback_0
    526              {
    527                l3_ctimer_set(&udp_send_ctimer, udp_param.interval*CLOCK_SECOND, 
    528                           udp_send_ctimer_callback, NULL);      
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0x....             LDR.N    R0,??DataTable8_10
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0xF895 0x2028      LDRB     R2,[R5, #+40]
   \       0x30   0xF44F 0x707A      MOV      R0,#+1000
   \       0x34   0x4342             MULS     R2,R0,R2
   \       0x36   0x17D3             ASRS     R3,R2,#+31
   \       0x38   0x....             LDR.N    R0,??DataTable8_9
   \       0x3A   0x.... 0x....      BL       l3_ctimer_set
   \       0x3E   0xE002             B.N      ??udp_send_ctimer_callback_1
    529              }
    530              else
    531              {
    532                l3_ctimer_stop(&udp_send_ctimer);          
   \                     ??udp_send_ctimer_callback_0: (+1)
   \       0x40   0x....             LDR.N    R0,??DataTable8_9
   \       0x42   0x.... 0x....      BL       l3_ctimer_stop
    533              }
    534          }
   \                     ??udp_send_ctimer_callback_1: (+1)
   \       0x46   0xBD37             POP      {R0-R2,R4,R5,PC}
    535          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    536          static void send_udp_conf(void)
    537          {
   \                     send_udp_conf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    538          #ifdef SEND_UDP_PKT_TO_HIF
    539              enet_msg_t* msg = allocate_hif_msg( udp_param.data_length+50 );//50 bytes is sefty zone    
   \        0x4   0x....             LDR.N    R5,??DataTable8_5
   \        0x6   0x8CA8             LDRH     R0,[R5, #+36]
   \        0x8   0x3032             ADDS     R0,R0,#+50
   \        0xA   0xB280             UXTH     R0,R0
   \        0xC   0x.... 0x....      BL       allocate_hif_msg
   \       0x10   0x0004             MOVS     R4,R0
    540              uint8_t* buf = msg->data;    
   \       0x12   0x1DA6             ADDS     R6,R4,#+6
    541              if(msg != NULL)
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD04E             BEQ.N    ??send_udp_conf_0
    542               {
    543                    *buf++ = SEND_UDP_PACKET;
   \       0x18   0x2089             MOVS     R0,#+137
   \       0x1A   0x7030             STRB     R0,[R6, #+0]
   \       0x1C   0xF116 0x0801      ADDS     R8,R6,#+1
    544                    
    545                    memcpy(buf,udp_param.src_ip_addr.u8,16);
   \       0x20   0xF05F 0x0B10      MOVS     R11,#+16
   \       0x24   0x002E             MOVS     R6,R5
   \       0x26   0x4647             MOV      R7,R8
   \       0x28   0x465A             MOV      R2,R11
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0x0038             MOVS     R0,R7
   \       0x2E   0x.... 0x....      BL       __aeabi_memcpy
    546                    buf+=16;
   \       0x32   0xF118 0x0710      ADDS     R7,R8,#+16
    547                    
    548                    memcpy(buf,udp_param.dest_ip_addr.u8,16);
   \       0x36   0xF05F 0x0810      MOVS     R8,#+16
   \       0x3A   0xF115 0x0910      ADDS     R9,R5,#+16
   \       0x3E   0x46BA             MOV      R10,R7
   \       0x40   0x4642             MOV      R2,R8
   \       0x42   0x4649             MOV      R1,R9
   \       0x44   0x4650             MOV      R0,R10
   \       0x46   0x.... 0x....      BL       __aeabi_memcpy
    549                    buf+=16;
   \       0x4A   0x3710             ADDS     R7,R7,#+16
    550                    ++udp_counter;
   \       0x4C   0x....             LDR.N    R1,??DataTable8_7
   \       0x4E   0x8808             LDRH     R0,[R1, #+0]
   \       0x50   0x1C40             ADDS     R0,R0,#+1
   \       0x52   0x8008             STRH     R0,[R1, #+0]
    551          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    552                    edfe_information.edfe_sent_pkt = udp_counter;
    553          #endif
    554                    if(udp_counter == 0xFFFF)
   \       0x54   0x880A             LDRH     R2,[R1, #+0]
   \       0x56   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x5A   0x4282             CMP      R2,R0
   \       0x5C   0xD101             BNE.N    ??send_udp_conf_1
    555                    {
    556                      udp_counter = 0x00;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x8008             STRH     R0,[R1, #+0]
    557                    }
    558                    mem_rev_cpy(buf,(uint8_t*)&udp_counter,2);
   \                     ??send_udp_conf_1: (+1)
   \       0x62   0x2202             MOVS     R2,#+2
   \       0x64   0x0038             MOVS     R0,R7
   \       0x66   0x.... 0x....      BL       mem_rev_cpy
    559                    buf+=2;
   \       0x6A   0x1CB9             ADDS     R1,R7,#+2
    560                    
    561                    *buf++ = udp_param.interval;
   \       0x6C   0xF895 0x0028      LDRB     R0,[R5, #+40]
   \       0x70   0x7008             STRB     R0,[R1, #+0]
   \       0x72   0x1C48             ADDS     R0,R1,#+1
    562                    
    563                    put_ushort_BE(buf,udp_param.data_length);
   \       0x74   0x8CA9             LDRH     R1,[R5, #+36]
   \       0x76   0x7041             STRB     R1,[R0, #+1]
   \       0x78   0x8CA9             LDRH     R1,[R5, #+36]
   \       0x7A   0xB289             UXTH     R1,R1
   \       0x7C   0x0A09             LSRS     R1,R1,#+8
   \       0x7E   0x7001             STRB     R1,[R0, #+0]
    564                    buf += 2;
   \       0x80   0x1C86             ADDS     R6,R0,#+2
    565                    
    566                    memcpy(buf,udp_param.data_buff,udp_param.data_length);
   \       0x82   0x8CAF             LDRH     R7,[R5, #+36]
   \       0x84   0xF8D5 0x802C      LDR      R8,[R5, #+44]
   \       0x88   0x46B1             MOV      R9,R6
   \       0x8A   0x003A             MOVS     R2,R7
   \       0x8C   0x4641             MOV      R1,R8
   \       0x8E   0x4648             MOV      R0,R9
   \       0x90   0x.... 0x....      BL       __aeabi_memcpy
    567                    buf += udp_param.data_length;
   \       0x94   0x8CA8             LDRH     R0,[R5, #+36]
   \       0x96   0xEB06 0x0100      ADD      R1,R6,R0
    568                    
    569                    *buf++ = DUMMY_COMPORT;
   \       0x9A   0x2055             MOVS     R0,#+85
   \       0x9C   0x7008             STRB     R0,[R1, #+0]
   \       0x9E   0x1C4E             ADDS     R6,R1,#+1
    570                    
    571                    msg->data_length  = buf - msg->data;
   \       0xA0   0x1DA0             ADDS     R0,R4,#+6
   \       0xA2   0x1A30             SUBS     R0,R6,R0
   \       0xA4   0x80A0             STRH     R0,[R4, #+4]
    572                    // data_length -1 :: -1 is for command ID   
    573          //[Kimbal]
    574          //        hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);
    575          //          free_hif_msg( msg );
    576                    if(udp_param.counter == 0x00)
   \       0xA6   0x8CE8             LDRH     R0,[R5, #+38]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD102             BNE.N    ??send_udp_conf_2
    577                      app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xAC   0x6AE8             LDR      R0,[R5, #+44]
   \       0xAE   0x.... 0x....      BL       app_bm_free
    578                    
    579                    udp_param.data_buff = NULL;
   \                     ??send_udp_conf_2: (+1)
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0x62E8             STR      R0,[R5, #+44]
    580               }
    581              
    582              if(udp_param.data_buff != NULL)
   \                     ??send_udp_conf_0: (+1)
   \       0xB6   0x6AE8             LDR      R0,[R5, #+44]
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD007             BEQ.N    ??send_udp_conf_3
    583              {
    584                if(udp_param.counter == 0x00)
   \       0xBC   0x8CE8             LDRH     R0,[R5, #+38]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD102             BNE.N    ??send_udp_conf_4
    585                      app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xC2   0x6AE8             LDR      R0,[R5, #+44]
   \       0xC4   0x.... 0x....      BL       app_bm_free
    586                
    587                udp_param.data_buff = NULL;
   \                     ??send_udp_conf_4: (+1)
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x62E8             STR      R0,[R5, #+44]
    588              }
    589               
    590          #endif 
    591          }
   \                     ??send_udp_conf_3: (+1)
   \       0xCC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    592          
    593          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    594          static void
    595          revceiver_callback (struct simple_udp_connection *c,
    596                   const uip_ipaddr_t *sender_addr,
    597                   uint16_t sender_port,
    598                   const uip_ipaddr_t *receiver_addr,
    599                   uint16_t receiver_port,
    600                   const uint8_t *data,
    601                   uint16_t datalen)
    602          {
   \                     revceiver_callback: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4682             MOV      R10,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0xF8DD 0x8024      LDR      R8,[SP, #+36]
   \       0x10   0x9C0A             LDR      R4,[SP, #+40]
    603          
    604          #if 0// Raka .. for checking RAW UART on HIF .. [ 12-OCt-2023 ]
    605          #ifdef SEND_UDP_PKT_TO_HIF
    606            
    607              enet_msg_t* msg = allocate_hif_msg( datalen+25 );
    608              uint8_t* buf = msg->data;	
    609              
    610          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    611              if(edfe_information.edfe_frame_enabled == 0x01)
    612              {
    613                if((edfe_information.edfe_transmit_flow_contrl == 0)&&(edfe_information.edfe_receiver_flow_contrl != 0))
    614                {
    615                  enable_disable_edfe_frame(1,FINAL_RESPONSE_FRAME);
    616                  send_edfe_initial_frame(edfe_information.edfe_ini_mac_addr ,1,FINAL_RESPONSE_FRAME);
    617                  enable_disable_edfe_frame(0,255);//go to currunt channel listing
    618                }
    619                if((edfe_information.edfe_transmit_flow_contrl != 0)&&(edfe_information.edfe_receiver_flow_contrl != 0))
    620                {
    621                  enable_disable_edfe_frame(1,RESPONSE_FRAME);
    622                  send_edfe_initial_frame(edfe_information.edfe_ini_mac_addr ,1,RESPONSE_FRAME);
    623                }
    624              }
    625          #endif
    626               if(msg != NULL)
    627               {
    628                 *buf++ = UDP_RECIVED_IND;
    629                 
    630                 memcpy(buf,sender_addr->u8,16);
    631                 buf+=16;
    632                 
    633                 mem_rev_cpy(buf,(uint8_t *)&sender_port,2);
    634                 buf+=2;
    635                 ++recv_counter;
    636                 if(recv_counter == 0xFFFF)
    637                 {
    638                   recv_counter = 0x00;
    639                 }
    640                 mem_rev_cpy(buf,(uint8_t *)&recv_counter,2);
    641                 buf+=2;
    642                 
    643                 put_ushort_BE(buf,datalen);
    644                 buf += 2;
    645                 
    646                 memcpy(buf,data,datalen);
    647                 buf += datalen;
    648                 
    649                 *buf++ = DUMMY_COMPORT;
    650                 
    651                 msg->data_length  = buf - msg->data;
    652                 
    653                 // data_length -1 :: -1 is for command ID
    654          //[Kimbal]
    655          //       hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);
    656          //       free_hif_msg( msg );
    657               }
    658          #endif 
    659              
    660          #else  // for #if 0
    661          
    662          // This code is to send the data to HES from the Linux Gateway ..
    663          //    uint8_t tempMACAddr [ 8] = {0};
    664          //    
    665          //    enet_msg_t* msg = allocate_hif_msg( datalen+25 );
    666          //    uint8_t* buf = msg->data;	
    667          //    
    668          //////[kimbal]
    669          //    if(msg != NULL)
    670          //    {
    671          //       
    672          //       memcpy(buf,data,datalen);       
    673          //       buf += datalen;       
    674          //       msg->data_length  = buf - msg->data;
    675          //       //debug_UDP_revceiver_callback_cnt++;
    676          //       
    677          //      // hif_send_msg_up(msg->data,msg->data_length,response_laye_ID, 0xAA);
    678          //       //free_hif_msg( msg );
    679          //       
    680          //        uart_hal_write((uint8_t *)msg->data, msg->data_length);
    681          //        
    682          //        free_hif_msg( msg );
    683          //           
    684          //    }        
    685              
    686              
    687              
    688              
    689              uart_hal_write((uint8_t *)data, datalen);
   \       0x12   0x0021             MOVS     R1,R4
   \       0x14   0xB289             UXTH     R1,R1
   \       0x16   0x4640             MOV      R0,R8
   \       0x18   0x.... 0x....      BL       uart_hal_write
    690              
    691              
    692          ////[kimbal]
    693              
    694          //     if(msg != NULL)
    695          //     {
    696          //       
    697          //       *buf++ = 0x03; // HIF Frame CMD ID
    698          //       
    699          //       *buf++ = 0x03;  // pRIMITIVE id
    700          //       *buf++ = 0x04;  // Frame ID
    701          //       
    702          //       put_ushort(buf,datalen);  // Data Lengtgh
    703          //       buf += 2;
    704          //       
    705          //       *buf++ = 0x00;
    706          //       
    707          //       memcpy(&tempMACAddr[0], (uint8_t *)&sender_addr->u8[8], 8 );
    708          //       tempMACAddr[0] ^= 0x02;
    709          //       mem_rev_cpy(buf,(uint8_t *)&tempMACAddr[0],8); // Src MAC Addr
    710          //       
    711          //       buf+=8;
    712          //         memcpy(buf,(uint8_t *)&sender_port,2);  // Src Port
    713          //       buf+=2;
    714          //       
    715          //       memset (&tempMACAddr[0], 0x00, 8);
    716          //       memcpy(&tempMACAddr[0], (uint8_t *)&receiver_addr->u8[8], 8 );
    717          //       tempMACAddr[0] ^= 0x02;
    718          //       mem_rev_cpy(buf,(uint8_t *)&tempMACAddr[0],8); // Dst MAC Addr
    719          //       buf+=8;
    720          //       
    721          //       
    722          //       memcpy(buf,(uint8_t *)&receiver_port,2); // Dst port
    723          //       buf+=2;
    724          //      
    725          //       *buf++  = 0x05;  // Hop count 
    726          //        memset(buf,0x01,4); // Travel Time TBD
    727          //         buf+=4;
    728          //         
    729          //       put_ushort(buf,datalen);  // get_ushort  // APDU Length
    730          //       buf += 2;
    731          //       
    732          //       memcpy(buf,data,datalen);       
    733          //       buf += datalen;
    734          //       
    735          //       
    736          //       *buf++ = DUMMY_COMPORT;//Dummy Comport 
    737          //       
    738          //       msg->data_length  = buf - msg->data;
    739          //       debug_UDP_revceiver_callback_cnt++;
    740          //       hif_send_msg_up(msg->data,msg->data_length-1,APP_DEF_LAYER_ID_LINUXGATEWAY, PROTOCOL_ID_FOR_APP);
    741          //       free_hif_msg( msg );
    742          //       
    743          //      
    744          //     }
    745               
    746          
    747          #endif    
    748           
    749           for (int i = 0; i <= 6; i++) {
   \       0x1C   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??revceiver_callback_0: (+1)
   \       0x20   0xF1B9 0x0F07      CMP      R9,#+7
   \       0x24   0xDA07             BGE.N    ??revceiver_callback_1
    750              APP_LED_TOGGLE();
   \       0x26   0x.... 0x....      BL       APP_LED_TOGGLE
    751              tmr_delay(500000);    
                     ^
Warning[Pe223]: function "tmr_delay" declared implicitly

  static uint16_t recv_counter = 0;
                  ^
"C:\Users\PHYTEC\Desktop\custom-FG23\MeshApp_FG23_Node\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c",93  Warning[Pe177]: 
          variable "recv_counter" was declared but never referenced
   \       0x2A   0x....             LDR.N    R0,??DataTable8_11
   \       0x2C   0x.... 0x....      BL       tmr_delay
    752          }
   \       0x30   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0x34   0xE7F4             B.N      ??revceiver_callback_0
    753          }
   \                     ??revceiver_callback_1: (+1)
   \       0x36   0xE8BD 0x87F0      POP      {R4-R10,PC}
    754          /*---------------------------------------------------------------------------*/
    755          
    756          extern uint8_t global_addr_device[16];
    757          //uint8_t sorce_ip[16]={0X00};
    758          //2020000D00B800001322334411112222
    759          extern uip_ipaddr_t root_global_addr; 
    760          //uint8_t destination_ip[16]={0x20,0x20,0x00,0x0D,0x00,0xB8,0x00,0x00,0x13,0x22,0x33,0x44,0xEE,0xEE,0xAA,0xAA};
    761          //2020000D00B8000013223344EEEEAAAA

   \                                 In section .bss, align 4
    762          int udp_send_counter = 0;
   \                     udp_send_counter:
   \        0x0                      DS8 4
    763          
    764          
    765          

   \                                 In section .text, align 2, keep-with-next
    766          uint8_t UART_Data_send_udp(uint8_t *buf, uint16_t length)
    767          {      
   \                     UART_Data_send_udp: (+1)
   \        0x0   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
    768              udp_send_counter++;
   \        0x6   0x....             LDR.N    R1,??DataTable8_12
   \        0x8   0x6808             LDR      R0,[R1, #+0]
   \        0xA   0x1C40             ADDS     R0,R0,#+1
   \        0xC   0x6008             STR      R0,[R1, #+0]
    769              memset(&udp_param, 0x00, sizeof(udp_param));   
   \        0xE   0x2030             MOVS     R0,#+48
   \       0x10   0x9005             STR      R0,[SP, #+20]
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9001             STR      R0,[SP, #+4]
   \       0x16   0x....             LDR.N    R4,??DataTable8_5
   \       0x18   0x0025             MOVS     R5,R4
   \       0x1A   0x9A01             LDR      R2,[SP, #+4]
   \       0x1C   0x9905             LDR      R1,[SP, #+20]
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x.... 0x....      BL       __aeabi_memset
    770              udp_counter = 0x00;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x....             LDR.N    R1,??DataTable8_7
   \       0x28   0x8008             STRH     R0,[R1, #+0]
    771              //uint16_t index = 0;
    772              
    773              memcpy(udp_param.src_ip_addr.u8, &global_addr_device[0], 16);
   \       0x2A   0xF05F 0x0A10      MOVS     R10,#+16
   \       0x2E   0x....             LDR.N    R6,??DataTable8_13
   \       0x30   0x0025             MOVS     R5,R4
   \       0x32   0x4652             MOV      R2,R10
   \       0x34   0x0031             MOVS     R1,R6
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0x.... 0x....      BL       __aeabi_memcpy
    774             // index+=16;//16
    775              
    776              //currently no port supporting
    777              //mem_rev_cpy((uint8_t *)&udp_param.source_port_number, &buf[index], 2);
    778              //index+=2;//18
    779              udp_param.source_port_number = UDP_PORT;//sending with default port
   \       0x3C   0xF242 0x0BA3      MOVW     R11,#+8355
   \       0x40   0xF8A4 0xB020      STRH     R11,[R4, #+32]
    780              
    781              memcpy(udp_param.dest_ip_addr.u8, &root_global_addr.u8[0], 16);
   \       0x44   0x2710             MOVS     R7,#+16
   \       0x46   0x.... 0x....      LDR.W    R8,??DataTable8_14
   \       0x4A   0x....             LDR.N    R5,??DataTable8_6
   \       0x4C   0x46A9             MOV      R9,R5
   \       0x4E   0x003A             MOVS     R2,R7
   \       0x50   0x4641             MOV      R1,R8
   \       0x52   0x4648             MOV      R0,R9
   \       0x54   0x.... 0x....      BL       __aeabi_memcpy
    782             // index+=16;//34
    783              
    784              //currently no port supporting
    785              //mem_rev_cpy((uint8_t *)&udp_param.destination_port_number, &buf[index], 2);
    786              //index+=2;//36
    787              udp_param.destination_port_number = UDP_PORT;//sending with default port
   \       0x58   0xF8A4 0xB022      STRH     R11,[R4, #+34]
    788          
    789              uint8_t* self_ieee_addr = get_self_address();
   \       0x5C   0x.... 0x....      BL       get_self_address
   \       0x60   0x9004             STR      R0,[SP, #+16]
    790              uip_lladdr_t ll_add;
    791              memcpy(ll_add.addr, &udp_param.dest_ip_addr.u8[8], 8);
   \       0x62   0xF05F 0x0908      MOVS     R9,#+8
   \       0x66   0xF114 0x0018      ADDS     R0,R4,#+24
   \       0x6A   0x9000             STR      R0,[SP, #+0]
   \       0x6C   0xF10D 0x0B08      ADD      R11,SP,#+8
   \       0x70   0x464A             MOV      R2,R9
   \       0x72   0x9900             LDR      R1,[SP, #+0]
   \       0x74   0x4658             MOV      R0,R11
   \       0x76   0x.... 0x....      BL       __aeabi_memcpy
    792              ll_add.addr[0] ^= 0x02;
   \       0x7A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x7E   0xF090 0x0002      EORS     R0,R0,#0x2
   \       0x82   0xF88D 0x0008      STRB     R0,[SP, #+8]
    793              if(!memcmp(ll_add.addr, self_ieee_addr, 8))
   \       0x86   0x2208             MOVS     R2,#+8
   \       0x88   0x9904             LDR      R1,[SP, #+16]
   \       0x8A   0xA802             ADD      R0,SP,#+8
   \       0x8C   0x.... 0x....      BL       memcmp
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD101             BNE.N    ??UART_Data_send_udp_0
    794                return 1;//requesting to self address error
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0xE057             B.N      ??UART_Data_send_udp_1
    795              
    796          //    mem_rev_cpy((uint8_t *)&udp_param.counter, &buf[index], 2);
    797          //    index+=2;//38
    798              
    799              udp_param.counter = 1;
   \                     ??UART_Data_send_udp_0: (+1)
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0x84E0             STRH     R0,[R4, #+38]
    800              
    801              
    802          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    803              edfe_information.edfe_trigger_packt =  udp_param.counter;
    804          #endif
    805              
    806              udp_param.interval = 1 ; //buf[index];
   \       0x9C   0x2001             MOVS     R0,#+1
   \       0x9E   0xF884 0x0028      STRB     R0,[R4, #+40]
    807              //index+=1;//39
    808              
    809          //    mem_rev_cpy((uint8_t *)&udp_param.data_length, &buf[index], 2);
    810          //    index+=2;//CURRENT_UDP_PARAM_LEN = 41    
    811              
    812              udp_param.data_length = length ;
   \       0xA2   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \       0xA6   0x84A0             STRH     R0,[R4, #+36]
    813          
    814              if(udp_param.data_length == 0 || udp_param.data_length > MAX_UDP_LENGTH_SUPPORT || 
    815                 udp_param.counter == 0 || udp_param.counter >= 0xFFFF ||
    816                 udp_param.interval == 0 || udp_param.interval >= 0xFF)
   \       0xA8   0x8CA0             LDRH     R0,[R4, #+36]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD014             BEQ.N    ??UART_Data_send_udp_2
   \       0xAE   0x8CA1             LDRH     R1,[R4, #+36]
   \       0xB0   0xF240 0x50DD      MOVW     R0,#+1501
   \       0xB4   0x4281             CMP      R1,R0
   \       0xB6   0xDA0F             BGE.N    ??UART_Data_send_udp_2
   \       0xB8   0x8CE0             LDRH     R0,[R4, #+38]
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD00C             BEQ.N    ??UART_Data_send_udp_2
   \       0xBE   0x8CE1             LDRH     R1,[R4, #+38]
   \       0xC0   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0xC4   0x4281             CMP      R1,R0
   \       0xC6   0xD007             BEQ.N    ??UART_Data_send_udp_2
   \       0xC8   0xF894 0x0028      LDRB     R0,[R4, #+40]
   \       0xCC   0x2800             CMP      R0,#+0
   \       0xCE   0xD003             BEQ.N    ??UART_Data_send_udp_2
   \       0xD0   0xF894 0x0028      LDRB     R0,[R4, #+40]
   \       0xD4   0x28FF             CMP      R0,#+255
   \       0xD6   0xD101             BNE.N    ??UART_Data_send_udp_3
    817                return 1;//sending fail status
   \                     ??UART_Data_send_udp_2: (+1)
   \       0xD8   0x2001             MOVS     R0,#+1
   \       0xDA   0xE035             B.N      ??UART_Data_send_udp_1
    818              
    819              //explicitly setting to 5 sec, due more than 10 hopping
    820              if(udp_param.interval <= 5)
   \                     ??UART_Data_send_udp_3: (+1)
   \       0xDC   0xF894 0x0028      LDRB     R0,[R4, #+40]
   \       0xE0   0x2806             CMP      R0,#+6
   \       0xE2   0xDA02             BGE.N    ??UART_Data_send_udp_4
    821                udp_param.interval = 5;
   \       0xE4   0x2005             MOVS     R0,#+5
   \       0xE6   0xF884 0x0028      STRB     R0,[R4, #+40]
    822              udp_param.data_buff = (uint8_t *)app_bm_alloc( udp_param.data_length );
   \                     ??UART_Data_send_udp_4: (+1)
   \       0xEA   0x8CA0             LDRH     R0,[R4, #+36]
   \       0xEC   0x.... 0x....      BL       app_bm_alloc
   \       0xF0   0x62E0             STR      R0,[R4, #+44]
    823              if(udp_param.data_buff == NULL)
   \       0xF2   0x6AE0             LDR      R0,[R4, #+44]
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD101             BNE.N    ??UART_Data_send_udp_5
    824              {
    825                return 1;
   \       0xF8   0x2001             MOVS     R0,#+1
   \       0xFA   0xE025             B.N      ??UART_Data_send_udp_1
    826              }
    827              memcpy(udp_param.data_buff, &buf[0], udp_param.data_length);//NEED DYNAMIC ALLOCATION
   \                     ??UART_Data_send_udp_5: (+1)
   \       0xFC   0x8CA6             LDRH     R6,[R4, #+36]
   \       0xFE   0x9807             LDR      R0,[SP, #+28]
   \      0x100   0x9000             STR      R0,[SP, #+0]
   \      0x102   0x6AE7             LDR      R7,[R4, #+44]
   \      0x104   0x0032             MOVS     R2,R6
   \      0x106   0x9900             LDR      R1,[SP, #+0]
   \      0x108   0x0038             MOVS     R0,R7
   \      0x10A   0x.... 0x....      BL       __aeabi_memcpy
    828              //index+=udp_param.data_length;    
    829              
    830              //simple_udp_register(&unicast_connection, udp_param.source_port_number, NULL, 
    831              //                    udp_param.destination_port_number, revceiver_callback);    
    832              
    833              simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    834                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x10E   0x002B             MOVS     R3,R5
   \      0x110   0x8CA2             LDRH     R2,[R4, #+36]
   \      0x112   0x6AE1             LDR      R1,[R4, #+44]
   \      0x114   0x....             LDR.N    R0,??DataTable8
   \      0x116   0x.... 0x....      BL       simple_udp_sendto
    835              udp_param.counter--;
   \      0x11A   0x8CE0             LDRH     R0,[R4, #+38]
   \      0x11C   0x1E40             SUBS     R0,R0,#+1
   \      0x11E   0x84E0             STRH     R0,[R4, #+38]
    836          
    837             // send_udp_conf();
    838              //gu2pcapp_node_config_set_conf(0x00);
    839          
    840              app_bm_free(udp_param.data_buff);
   \      0x120   0x6AE0             LDR      R0,[R4, #+44]
   \      0x122   0x.... 0x....      BL       app_bm_free
    841              if(udp_param.counter)
   \      0x126   0x8CE0             LDRH     R0,[R4, #+38]
   \      0x128   0x2800             CMP      R0,#+0
   \      0x12A   0xD00C             BEQ.N    ??UART_Data_send_udp_6
    842              {
    843                l3_ctimer_set(&udp_send_ctimer, udp_param.interval*CLOCK_SECOND, 
    844                           udp_send_ctimer_callback, NULL);      
   \      0x12C   0x2000             MOVS     R0,#+0
   \      0x12E   0x9001             STR      R0,[SP, #+4]
   \      0x130   0x....             LDR.N    R0,??DataTable8_10
   \      0x132   0x9000             STR      R0,[SP, #+0]
   \      0x134   0xF894 0x2028      LDRB     R2,[R4, #+40]
   \      0x138   0xF44F 0x707A      MOV      R0,#+1000
   \      0x13C   0x4342             MULS     R2,R0,R2
   \      0x13E   0x17D3             ASRS     R3,R2,#+31
   \      0x140   0x....             LDR.N    R0,??DataTable8_9
   \      0x142   0x.... 0x....      BL       l3_ctimer_set
    845              }
    846              return 0;
   \                     ??UART_Data_send_udp_6: (+1)
   \      0x146   0x2000             MOVS     R0,#+0
   \                     ??UART_Data_send_udp_1: (+1)
   \      0x148   0xB009             ADD      SP,SP,#+36
   \      0x14A   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    847          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x....'....        DC32     unicast_connection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x....'....        DC32     unicast_connection1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x....'....        DC32     unicast_connection2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x....'....        DC32     unicast_connection3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x....'....        DC32     unicast_connection4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x....'....        DC32     udp_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x....'....        DC32     udp_param+16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x....'....        DC32     udp_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x....'....        DC32     udp_test_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \        0x0   0x....'....        DC32     udp_send_ctimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \        0x0   0x....'....        DC32     udp_send_ctimer_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \        0x0   0x0007'A120        DC32     0x7a120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \        0x0   0x....'....        DC32     udp_send_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \        0x0   0x....'....        DC32     global_addr_device

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \        0x0   0x....'....        DC32     root_global_addr

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   UART_Data_send_udp
        72   -> __aeabi_memcpy
        72   -> __aeabi_memset
        72   -> app_bm_alloc
        72   -> app_bm_free
        72   -> get_self_address
        72   -> l3_ctimer_set
        72   -> memcmp
        72   -> simple_udp_sendto
       8   mem_reverse_cpy
      32   process_thread_udp_process
        32   -> simple_udp_register
      24   process_udp_port_register
        24   -> gu2pcapp_node_config_set_conf
        24   -> mem_rev_cpy
        24   -> simple_udp_register
      32   revceiver_callback
        32   -> APP_LED_TOGGLE
        32   -> tmr_delay
        32   -> uart_hal_write
      56   send_udp
        56   -> __aeabi_memcpy
        56   -> __aeabi_memset
        56   -> app_bm_alloc
        56   -> get_self_address
        56   -> l3_ctimer_set
        56   -> mem_rev_cpy
        56   -> memcmp
        56   -> send_udp_conf
        56   -> simple_udp_sendto
      40   send_udp_conf
        40   -> __aeabi_memcpy
        40   -> allocate_hif_msg
        40   -> app_bm_free
        40   -> mem_rev_cpy
       0   send_udp_data_packet
      64   send_udp_packets
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset
        64   -> app_bm_alloc
        64   -> app_bm_free
        64   -> mem_rev_cpy
        64   -> simple_udp_register
        64   -> simple_udp_sendto
      24   udp_send_ctimer_callback
        24   -> l3_ctimer_set
        24   -> l3_ctimer_stop
        24   -> send_udp_conf
        24   -> simple_udp_sendto


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     334  UART_Data_send_udp
       1  data_send_idx
      50  mem_reverse_cpy
     166  process_thread_udp_process
      90  process_udp_port_register
      58  revceiver_callback
     622  send_udp
     208  send_udp_conf
       2  send_udp_data_packet
     246  send_udp_packets
       1  temp_buf_set
       2  udp_counter
      48  udp_param
      12  udp_process
       4  udp_send_counter
      48  udp_send_ctimer
      72  udp_send_ctimer_callback
       1  udp_test_counter
      36  unicast_connection
      36  unicast_connection1
      36  unicast_connection2
      36  unicast_connection3
      36  unicast_connection4

 
   284 bytes in section .bss
    13 bytes in section .data
 1'908 bytes in section .text
 
 1'908 bytes of CODE memory
   297 bytes of DATA memory

Errors: none
Warnings: 2
