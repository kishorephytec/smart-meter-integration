###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         02/Dec/2024  12:57:39
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
#    Command line                 =
#        -f
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o.rsp
#        (D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
#        -D EFR32FG23A020F512GM40=1 -D SL_COMPONENT_CATALOG_PRESENT=1 -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -lC
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir
#        --diag_suppress Pa050 -o
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse -e --fpu=VFPv5_sp --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\.\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\AppConfigs\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\config\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\autogen\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\HAL\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\NVM\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\buffer_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\event_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\list_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\queue_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\timer_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\hif\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\raw_uart_if\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\debug_console\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\Device\SiliconLabs\EFR32FG23\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\CMSIS\Core\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\device_init\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\mpu\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\toolchain\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\system\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\network-manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\RAIL_TRX\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MAC\Inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\wisun_modified\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\FANApp\AppInc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_callbacks\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ip\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\multicast\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\rpl\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\OS_interface\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\L2_L3_interface\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\cpu\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\contiki_mac_interface_layer\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\mac_sicslowpan_if\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emlib\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\platform\p3_lp_dk\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\common\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ble\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ieee802154\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\zwave\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\efr32xg1x\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_protocol\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_rssi\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MeterApp\Inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\dmadrv\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\common\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\FLASH\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\APP_LOG\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\config\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\NVM\nvm3\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\
#        -On --use_c++_inline) --dependencies=n
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\Src_14949699383848397354.dir\AppUDPprocess.lst
#    Object file                  =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Src_14949699383848397354.dir\AppUDPprocess.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c
      1          /** \file udp_port8.c
      2           *******************************************************************************
      3           ** \brief 
      4           **
      5           ** \cond 
      6           **
      7           ** COPYRIGHT(c) 2023-24 Procubed Innovations Pvt Ltd.
      8           ** All rights reserved.
      9           **
     10           ** THIS SOFTWARE IS PROVIDED BY "AS IS" AND ALL WARRANTIES OF ANY KIND,
     11           ** INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR USE,
     12           ** ARE EXPRESSLY DISCLAIMED.  THE DEVELOPER SHALL NOT BE LIABLE FOR ANY
     13           ** DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. THIS SOFTWARE
     14           ** MAY NOT BE USED IN PRODUCTS INTENDED FOR USE IN IMPLANTATION OR OTHER
     15           ** DIRECT LIFE SUPPORT APPLICATIONS WHERE MALFUNCTION MAY RESULT IN THE DIRECT
     16           ** PHYSICAL HARM OR INJURY TO PERSONS. ALL SUCH IS USE IS EXPRESSLY PROHIBITED.
     17           **
     18           *******************************************************************************
     19           **  \endcond
     20           */
     21          
     22          /*
     23          ********************************************************************************
     24          * File inclusion
     25          ********************************************************************************
     26          */
     27          
     28          
     29          #include "StackAppConf.h"
     30          #include "common.h"
     31          #include <stdio.h>
     32          #include <string.h>
     33          #include "contiki-net.h"
     34          #include "AppUDPprocess.h"
     35          #include "uart_hal.h"
     36          #include "queue_latest.h"
     37          #include "hif_utility.h"
     38          #include "fan_app_auto.h"
     39          #include "fan_api.h"
     40          #include "ie_element_info.h"
     41          #include "fan_app_test_harness.h"
     42          #include "sm.h"
     43          #include "fan_mac_interface.h"
     44          
     45          /*
     46          ** =============================================================================
     47          ** Private Macro definitions
     48          ** =============================================================================
     49          */
     50          	
     51          #define EXPLICIT_UDP_SEND       0
     52          
     53          /*
     54          ** =============================================================================
     55          ** Private Structures, Unions & enums Type Definitions
     56          ** =============================================================================
     57          **/
     58          
     59          typedef struct udp_config{
     60              uip_ipaddr_t src_ip_addr;
     61              uip_ipaddr_t dest_ip_addr;
     62              uint16_t source_port_number;    
     63              uint16_t destination_port_number;
     64              uint16_t data_length;
     65              uint16_t counter;    /*for sending number of packets*/
     66              uint8_t interval;    /*interval during send*/
     67              uint8_t *data_buff;
     68          }udp_config_t;
     69          
     70          /*
     71          ** =============================================================================
     72          ** Private Variable Definitions
     73          ** =============================================================================
     74          */
     75          

   \                                 In section .bss, align 4
     76          static struct simple_udp_connection unicast_connection;
   \                     unicast_connection:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     77          static struct simple_udp_connection unicast_connection1;
   \                     unicast_connection1:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     78          static struct simple_udp_connection unicast_connection2;
   \                     unicast_connection2:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     79          static struct simple_udp_connection unicast_connection3;
   \                     unicast_connection3:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     80          static struct simple_udp_connection unicast_connection4;
   \                     unicast_connection4:
   \        0x0                      DS8 36

   \                                 In section .bss, align 4
     81          static udp_config_t udp_param = {0};
   \                     udp_param:
   \        0x0                      DS8 48
     82          #if EXPLICIT_UDP_SEND
     83          static uint8_t udp_send_flag = 0x00;
     84          #endif
     85          
     86          /*Umesh :30-01-2018*/

   \                                 In section .bss, align 1
     87          uint8_t data_send_idx=0x00;
   \                     data_send_idx:
   \        0x0                      DS8 1
     88          /*this varriable never used*/

   \                                 In section .bss, align 2
     89          static uint16_t udp_counter = 0;
   \                     udp_counter:
   \        0x0                      DS8 2
     90          static uint16_t recv_counter = 0;
     91          //static l3_etimer_t udp_send_timer;

   \                                 In section .bss, align 8
     92          static l3_ctimer_t udp_send_ctimer;
   \                     udp_send_ctimer:
   \        0x0                      DS8 48
     93          
     94          /*
     95          ** =============================================================================
     96          ** Private Function Prototypes
     97          ** =============================================================================
     98          */
     99          /*Umesh : 30-01-2018*/
    100          //static uint8_t process_udp(uip_ipaddr_t addr, uint8_t *data,uint16_t datalen);
    101          uint8_t send_udp(uint8_t *buf, uint16_t length);
    102          //static void process_udp_packet(uint8_t *buffer, uint16_t length);
    103          /*this function not called from anywhere*/
    104          //static void explicit_trigger_udp_request();
    105          static void udp_send_ctimer_callback(void* buf);
    106          static void send_udp_conf(void);
    107          static void
    108          revceiver_callback (struct simple_udp_connection *c,
    109                   const uip_ipaddr_t *sender_addr,
    110                   uint16_t sender_port,
    111                   const uip_ipaddr_t *receiver_addr,
    112                   uint16_t receiver_port,
    113                   const uint8_t *data,
    114                   uint16_t datalen);
    115          
    116          /*
    117          ** =============================================================================
    118          ** External Variable Declarations
    119          ** =============================================================================
    120          */
    121          
    122          /* None */
    123          
    124          /*
    125          ** =============================================================================
    126          ** External Function Prototypes
    127          ** =============================================================================
    128          */
    129          extern uint8_t response_laye_ID;
    130          extern uint8_t get_fan_device_type(void);
    131          extern void red_led_off(void);
    132          extern void mem_rev_cpy(uint8_t* dest, uint8_t* src, uint16_t len );
    133          extern uint8_t gu2pcapp_node_config_set_conf( uint8_t status );
    134          extern enet_msg_t* allocate_hif_msg( uint16_t length );
    135          extern void free_hif_msg( enet_msg_t * msgp );
    136          extern uint8_t* get_self_address(void);
    137          extern void explicit_trigger_echo_request(uip_ipaddr_t* dest_ip_addr);
    138          /*Umesh :30-01-2018*/
    139          extern int uip_ds6_nbr_num(void);
    140          /*this function not called form this file*/
    141          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    142          extern edfe_info_t edfe_information;
    143          #endif
    144          extern void * app_bm_alloc( uint16_t length );
    145          extern void app_bm_free( uint8_t *pMem  );
    146          
    147          

   \                                 In section .data, align 4
    148          L3_PROCESS(udp_process, "UDP process");
   \                     udp_process:
   \        0x0   0x0000'0000        DC32 0x0, process_thread_udp_process
   \              0x....'....
   \        0x8                      DS8 4
    149          
    150          /*
    151          ** =============================================================================
    152          ** Public Variables Definitions
    153          ** =============================================================================
    154          **/
    155          

   \                                 In section .data, align 1
    156          uint8_t temp_buf_set = 0x11;
   \                     temp_buf_set:
   \        0x0   0x11               DC8 17
    157          
    158          /*
    159          ** =============================================================================
    160          ** Public Function Prototypes
    161          ** =============================================================================
    162          */
    163          
    164          uint8_t send_udp_packets(uint8_t* p_buff);
    165          
    166          /*
    167          ** =============================================================================
    168          ** Public Function Definitions
    169          ** =============================================================================
    170          */
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void mem_reverse_cpy(uint8_t* dest, uint8_t* src, uint16_t len )
    173          {
   \                     mem_reverse_cpy: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    174              uint16_t i = 0;
   \        0x2   0x2300             MOVS     R3,#+0
    175              for (i=0;i<len;i++)
   \        0x4   0x2400             MOVS     R4,#+0
   \                     ??mem_reverse_cpy_0: (+1)
   \        0x6   0x0025             MOVS     R5,R4
   \        0x8   0x0013             MOVS     R3,R2
   \        0xA   0xB2AD             UXTH     R5,R5
   \        0xC   0xB29B             UXTH     R3,R3
   \        0xE   0x429D             CMP      R5,R3
   \       0x10   0xD20D             BCS.N    ??mem_reverse_cpy_1
    176              {
    177                dest[len-i-1] = src[i];
   \       0x12   0x0015             MOVS     R5,R2
   \       0x14   0xB2AD             UXTH     R5,R5
   \       0x16   0x0023             MOVS     R3,R4
   \       0x18   0xB29B             UXTH     R3,R3
   \       0x1A   0x1AED             SUBS     R5,R5,R3
   \       0x1C   0xEB00 0x0305      ADD      R3,R0,R5
   \       0x20   0x0025             MOVS     R5,R4
   \       0x22   0xB2AD             UXTH     R5,R5
   \       0x24   0x5D4D             LDRB     R5,[R1, R5]
   \       0x26   0xF803 0x5C01      STRB     R5,[R3, #-1]
    178              }
   \       0x2A   0x1C64             ADDS     R4,R4,#+1
   \       0x2C   0xE7EB             B.N      ??mem_reverse_cpy_0
    179          }
   \                     ??mem_reverse_cpy_1: (+1)
   \       0x2E   0xBC30             POP      {R4,R5}
   \       0x30   0x4770             BX       LR
    180          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    181          L3_PROCESS_THREAD(udp_process, ev, data)
    182          {
   \                     process_thread_udp_process: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    183              L3_PROCESS_BEGIN();
   \        0xA   0x2701             MOVS     R7,#+1
   \        0xC   0x8820             LDRH     R0,[R4, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??process_thread_udp_process_0
   \       0x12   0x28CD             CMP      R0,#+205
   \       0x14   0xD03A             BEQ.N    ??process_thread_udp_process_1
   \       0x16   0xE040             B.N      ??process_thread_udp_process_2
    184           
    185              simple_udp_register(&unicast_connection, UDP_PORT,
    186                                NULL, UDP_PORT, revceiver_callback);
   \                     ??process_thread_udp_process_0: (+1)
   \       0x18   0xF242 0x03A3      MOVW     R3,#+8355
   \       0x1C   0x.... 0x....      ADR.W    R8,revceiver_callback
   \       0x20   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0x0019             MOVS     R1,R3
   \       0x28   0x.... 0x....      LDR.W    R0,??DataTable7
   \       0x2C   0x.... 0x....      BL       simple_udp_register
    187              
    188              simple_udp_register(&unicast_connection1, UDP_PORT1,
    189                                NULL, UDP_PORT1, revceiver_callback);
   \       0x30   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x34   0xF44F 0x73FB      MOV      R3,#+502
   \       0x38   0x2200             MOVS     R2,#+0
   \       0x3A   0xF44F 0x71FB      MOV      R1,#+502
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \       0x42   0x.... 0x....      BL       simple_udp_register
    190              simple_udp_register(&unicast_connection2, UDP_PORT2,
    191                                NULL, UDP_PORT2, revceiver_callback);
   \       0x46   0xF240 0x11F7      MOVW     R1,#+503
   \       0x4A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x4E   0x000B             MOVS     R3,R1
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \       0x56   0x.... 0x....      BL       simple_udp_register
    192              simple_udp_register(&unicast_connection3, UDP_PORT3,
    193                                NULL, UDP_PORT3, revceiver_callback);
   \       0x5A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x5E   0xF44F 0x73FC      MOV      R3,#+504
   \       0x62   0x2200             MOVS     R2,#+0
   \       0x64   0xF44F 0x71FC      MOV      R1,#+504
   \       0x68   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \       0x6C   0x.... 0x....      BL       simple_udp_register
    194              simple_udp_register(&unicast_connection4, UDP_PORT4,
    195                                NULL, UDP_PORT4, revceiver_callback);
   \       0x70   0xF240 0x11F9      MOVW     R1,#+505
   \       0x74   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x78   0x000B             MOVS     R3,R1
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \       0x80   0x.... 0x....      BL       simple_udp_register
    196          
    197          #if EXPLICIT_UDP_SEND        
    198              if(get_fan_device_type() == 0x00)
    199                l3_etimer_set(&udp_send_timer, SEND_INTERVAL_ROOT);
    200              else
    201                l3_etimer_set(&udp_send_timer, SEND_INTERVAL);
    202          #endif    
    203          
    204              while(1) {
    205                L3_PROCESS_YIELD();
   \                     ??process_thread_udp_process_3: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0x0007             MOVS     R7,R0
   \       0x88   0x20CD             MOVS     R0,#+205
   \       0x8A   0x8020             STRH     R0,[R4, #+0]
   \                     ??process_thread_udp_process_1: (+1)
   \       0x8C   0x0038             MOVS     R0,R7
   \       0x8E   0xB2C0             UXTB     R0,R0
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD101             BNE.N    ??process_thread_udp_process_4
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0xE004             B.N      ??process_thread_udp_process_5
    206                if ( ev == L3_PROCESS_EVENT_TIMER ){
   \                     ??process_thread_udp_process_4: (+1)
   \       0x98   0xE7F4             B.N      ??process_thread_udp_process_3
    207                  
    208          #if EXPLICIT_UDP_SEND	  
    209                  if((get_fan_device_type() == 0x01) ||
    210                    (get_fan_device_type() == 0x02)){
    211                    if(data == &udp_send_timer &&
    212                      l3_etimer_expired(&udp_send_timer) &&
    213                      udp_send_flag == 0x01){
    214                      explicit_trigger_udp_request();
    215                    }
    216                    else{
    217                      l3_etimer_stop(&udp_send_timer);
    218                      l3_etimer_set(&udp_send_timer, SEND_INTERVAL);        
    219                    }
    220                  }
    221                  else{
    222                    if(data == &udp_send_timer &&
    223                      l3_etimer_expired(&udp_send_timer)){
    224                      explicit_trigger_udp_request();
    225                    }
    226                    else{
    227                      l3_etimer_stop(&udp_send_timer);
    228                      l3_etimer_set(&udp_send_timer, SEND_INTERVAL_ROOT);        
    229                    }  
    230                  }
    231          #endif
    232                  
    233                } 
    234              }
    235              L3_PROCESS_END();
   \                     ??process_thread_udp_process_2: (+1)
   \       0x9A   0x2100             MOVS     R1,#+0
   \       0x9C   0x2000             MOVS     R0,#+0
   \       0x9E   0x8020             STRH     R0,[R4, #+0]
   \       0xA0   0x2003             MOVS     R0,#+3
   \                     ??process_thread_udp_process_5: (+1)
   \       0xA2   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    236          }
    237          /*---------------------------------------------------------------------------*/
    238          //void trigger_udp_request( uint8_t* p_buff )
    239          //{
    240          //        uip_lladdr_t ll_add = {0};
    241          //        uip_ipaddr_t dest_ip_addr = {0};
    242          //        uint16_t datalen = 0;
    243          //        uint8_t data[512] = {0};
    244          //        uint16_t index = 0;
    245          //        rpl_dag_t *dag = NULL;  
    246          //        uint16_t prefix_id = 0;
    247          //        uint8_t addr_opt = p_buff[3];
    248          //        index += 4;
    249          //    
    250          //    dag = rpl_get_any_dag();//current dag
    251          //    if(dag == NULL)
    252          //      return;
    253          //
    254          //    
    255          //    if(addr_opt == 0x00)//global
    256          //      prefix_id = UIP_HTONS(0x2001);
    257          //
    258          //    if(addr_opt == 0x01)//link local
    259          //      prefix_id = UIP_HTONS(0xfe80);
    260          //
    261          //    if(addr_opt == 0x02){//multicast
    262          //      uip_create_linklocal_rplnodes_mcast(&dest_ip_addr);
    263          //      index += 8;
    264          //      datalen = ((p_buff[index] >> 8) | (p_buff[index+1]));    
    265          //      index += 2;
    266          //      memcpy(data, &p_buff[index], datalen);
    267          //      simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);
    268          //      return;      
    269          //    }
    270          //
    271          //    memcpy(ll_add.addr,&(p_buff[index]),8);
    272          //    index += 8;
    273          //    
    274          //    uint8_t* self_ieee_addr = get_self_address();    
    275          //    if(!memcmp(ll_add.addr, self_ieee_addr, 8))
    276          //      return;//requesting to self address error    
    277          //    
    278          //    uip_create_prefix(&dest_ip_addr, prefix_id);        
    279          //    uip_ds6_set_addr_iid(&dest_ip_addr, &ll_add);        
    280          //    
    281          //    datalen = ((p_buff[index] >> 8) | (p_buff[index+1]));    
    282          //    index += 2;
    283          //    
    284          //    memcpy(data, &p_buff[index], datalen);
    285          //    simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);      
    286          //
    287          //    return;
    288          //}
    289          /*---------------------------------------------------------------------------*/
    290          
    291          //#if AUTO_CONFIG_ENABLE 
    292          
    293          //void trigger_both_udp_ping_request(void)
    294          //{
    295          //    uint16_t datalen = 20;
    296          //    uint8_t data[MAX_UDP_LENGTH_SUPPORT/*1024*/] = {0x00};
    297          //    uip_lladdr_t ll_add  = {0};
    298          //    uip_ipaddr_t dest_ip_addr = {0};
    299          //    //uint16_t prefix_id = UIP_HTONS(0x2001);
    300          //
    301          //    if(unicast_connection.local_port != UDP_PORT &&
    302          //      unicast_connection.remote_port != UDP_PORT){
    303          //      simple_udp_register(&unicast_connection, UDP_PORT, NULL, UDP_PORT, 
    304          //                          revceiver_callback);
    305          //    }
    306          //    
    307          //    if(datalen > MAX_UDP_LENGTH_SUPPORT)
    308          //      return;
    309          //    
    310          //    memset(data, temp_buf_set, datalen);
    311          //    data[datalen-1] = 0x2f;//for getting the last byte
    312          //    temp_buf_set+=1;
    313          //
    314          //    uip_ds6_nbr_t *nbr = nbr_table_head(ds6_neighbors);
    315          //    while(nbr != NULL) {
    316          //      if(!nbr->data_test){
    317          //        nbr->data_test = 1;
    318          //        memcpy(ll_add.addr,&nbr->lladdr,8);
    319          //        break;
    320          //      }      
    321          //      nbr = nbr_table_next(ds6_neighbors, nbr);
    322          //    }    
    323          //     
    324          //    if(nbr == NULL){
    325          //      red_led_off();      
    326          //      nbr = nbr_table_head(ds6_neighbors);
    327          //      while(nbr != NULL) {
    328          //        nbr->data_test = 0;
    329          //        nbr = nbr_table_next(ds6_neighbors, nbr);
    330          //      }      
    331          //    }
    332          //    else{      
    333          //      //uip_create_prefix(&dest_ip_addr, prefix_id);
    334          //      //uip_ds6_set_addr_iid(&dest_ip_addr, &ll_add);
    335          //      memcpy(&dest_ip_addr,&nbr->global_addr,16);
    336          //      simple_udp_sendto(&unicast_connection, data, datalen, &dest_ip_addr);
    337          //      explicit_trigger_echo_request(&dest_ip_addr);    
    338          //    }      
    339          //}
    340          //#endif
    341          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    342          void send_udp_data_packet()
    343          {
    344          #if EXPLICIT_UDP_SEND  
    345            udp_send_flag = 0x01;
    346          #endif
    347            return;
   \                     send_udp_data_packet: (+1)
   \        0x0   0x4770             BX       LR
    348          }
    349          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    350          void process_udp_port_register(uint8_t *buf, uint16_t length)
    351          {
   \                     process_udp_port_register: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    352              uint16_t source_port_number = 0;    
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    353              uint16_t destination_port_number = 0; 
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    354              uint8_t index=0;
   \       0x12   0x2600             MOVS     R6,#+0
    355              
    356              mem_rev_cpy((uint8_t *)&source_port_number, &buf[index], 2);
   \       0x14   0x2202             MOVS     R2,#+2
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0xEB04 0x0100      ADD      R1,R4,R0
   \       0x1E   0xF10D 0x0006      ADD      R0,SP,#+6
   \       0x22   0x.... 0x....      BL       mem_rev_cpy
    357              index+=2;
   \       0x26   0x1CB6             ADDS     R6,R6,#+2
    358              mem_rev_cpy((uint8_t *)&destination_port_number, &buf[index], 2);
   \       0x28   0x2202             MOVS     R2,#+2
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0xEB04 0x0100      ADD      R1,R4,R0
   \       0x32   0xA801             ADD      R0,SP,#+4
   \       0x34   0x.... 0x....      BL       mem_rev_cpy
    359              index+=2;
   \       0x38   0x1CB6             ADDS     R6,R6,#+2
    360              
    361              simple_udp_register(&unicast_connection, source_port_number, NULL, 
    362                                  destination_port_number, revceiver_callback);
   \       0x3A   0x.... 0x....      ADR.W    R0,revceiver_callback
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF8BD 0x3004      LDRH     R3,[SP, #+4]
   \       0x44   0x2200             MOVS     R2,#+0
   \       0x46   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \       0x4A   0x.... 0x....      LDR.W    R0,??DataTable7
   \       0x4E   0x.... 0x....      BL       simple_udp_register
    363              gu2pcapp_node_config_set_conf(0x00);//hif success
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x.... 0x....      BL       gu2pcapp_node_config_set_conf
    364              return;
   \       0x58   0xBD73             POP      {R0,R1,R4-R6,PC}
    365          }
    366          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    367          uint8_t send_udp_packets(uint8_t* p_buff)
    368          {
   \                     send_udp_packets: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0005             MOVS     R5,R0
    369            memset(&udp_param, 0x00, sizeof(udp_param));  
   \        0x8   0x2030             MOVS     R0,#+48
   \        0xA   0x9005             STR      R0,[SP, #+20]
   \        0xC   0x2600             MOVS     R6,#+0
   \        0xE   0x.... 0x....      LDR.W    R7,??DataTable7_5
   \       0x12   0x003C             MOVS     R4,R7
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x9905             LDR      R1,[SP, #+20]
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
    370            uint16_t index=0;
   \       0x1E   0x2400             MOVS     R4,#+0
    371            memcpy(udp_param.src_ip_addr.u8, &p_buff[index], 16);
   \       0x20   0xF05F 0x0810      MOVS     R8,#+16
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0xB280             UXTH     R0,R0
   \       0x28   0x4428             ADD      R0,R5,R0
   \       0x2A   0x9004             STR      R0,[SP, #+16]
   \       0x2C   0x46B9             MOV      R9,R7
   \       0x2E   0x4642             MOV      R2,R8
   \       0x30   0x9904             LDR      R1,[SP, #+16]
   \       0x32   0x4648             MOV      R0,R9
   \       0x34   0x.... 0x....      BL       __aeabi_memcpy
    372            index+=16;
   \       0x38   0x3410             ADDS     R4,R4,#+16
    373            mem_rev_cpy((uint8_t *)&udp_param.source_port_number, &p_buff[index], 2);
   \       0x3A   0x2202             MOVS     R2,#+2
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0xB280             UXTH     R0,R0
   \       0x40   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x44   0xF117 0x0020      ADDS     R0,R7,#+32
   \       0x48   0x.... 0x....      BL       mem_rev_cpy
    374            index+=2;
   \       0x4C   0x1CA4             ADDS     R4,R4,#+2
    375            memcpy(udp_param.dest_ip_addr.u8, &p_buff[index], 16);
   \       0x4E   0xF05F 0x0A10      MOVS     R10,#+16
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x4428             ADD      R0,R5,R0
   \       0x58   0x9003             STR      R0,[SP, #+12]
   \       0x5A   0x.... 0x....      LDR.W    R9,??DataTable7_6
   \       0x5E   0x46CB             MOV      R11,R9
   \       0x60   0x4652             MOV      R2,R10
   \       0x62   0x9903             LDR      R1,[SP, #+12]
   \       0x64   0x4658             MOV      R0,R11
   \       0x66   0x.... 0x....      BL       __aeabi_memcpy
    376            index+=16; 
   \       0x6A   0x3410             ADDS     R4,R4,#+16
    377            mem_rev_cpy((uint8_t *)&udp_param.destination_port_number, &p_buff[index], 2);
   \       0x6C   0x2202             MOVS     R2,#+2
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x76   0xF117 0x0022      ADDS     R0,R7,#+34
   \       0x7A   0x.... 0x....      BL       mem_rev_cpy
    378            index+=2;
   \       0x7E   0x1CA4             ADDS     R4,R4,#+2
    379            uint16_t length; 
    380            mem_rev_cpy((uint8_t *)&length, &p_buff[index], 2);
   \       0x80   0x2202             MOVS     R2,#+2
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0xB280             UXTH     R0,R0
   \       0x86   0xEB05 0x0100      ADD      R1,R5,R0
   \       0x8A   0xA801             ADD      R0,SP,#+4
   \       0x8C   0x.... 0x....      BL       mem_rev_cpy
    381            index+=2;
   \       0x90   0x1CA4             ADDS     R4,R4,#+2
   \       0x92   0xF8AD 0x4006      STRH     R4,[SP, #+6]
    382            udp_param.data_length = length;
   \       0x96   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \       0x9A   0x84B8             STRH     R0,[R7, #+36]
    383            udp_param.data_buff = (uint8_t *)app_bm_alloc( udp_param.data_length );
   \       0x9C   0x8CB8             LDRH     R0,[R7, #+36]
   \       0x9E   0x.... 0x....      BL       app_bm_alloc
   \       0xA2   0x62F8             STR      R0,[R7, #+44]
    384            memcpy(udp_param.data_buff, &p_buff[index], udp_param.data_length);
   \       0xA4   0x8CB8             LDRH     R0,[R7, #+36]
   \       0xA6   0x9002             STR      R0,[SP, #+8]
   \       0xA8   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \       0xAC   0xEB05 0x0B00      ADD      R11,R5,R0
   \       0xB0   0x6AFC             LDR      R4,[R7, #+44]
   \       0xB2   0x9A02             LDR      R2,[SP, #+8]
   \       0xB4   0x4659             MOV      R1,R11
   \       0xB6   0x0020             MOVS     R0,R4
   \       0xB8   0x.... 0x....      BL       __aeabi_memcpy
    385            udp_param.counter =1;
   \       0xBC   0x2001             MOVS     R0,#+1
   \       0xBE   0x84F8             STRH     R0,[R7, #+38]
    386            udp_param.interval = 5;
   \       0xC0   0x2005             MOVS     R0,#+5
   \       0xC2   0xF887 0x0028      STRB     R0,[R7, #+40]
    387            simple_udp_register(&unicast_connection, udp_param.source_port_number, NULL, 
    388                                  udp_param.destination_port_number, revceiver_callback);
   \       0xC6   0x.... 0x....      LDR.W    R4,??DataTable7
   \       0xCA   0x.... 0x....      ADR.W    R0,revceiver_callback
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0x8C7B             LDRH     R3,[R7, #+34]
   \       0xD2   0x2200             MOVS     R2,#+0
   \       0xD4   0x8C39             LDRH     R1,[R7, #+32]
   \       0xD6   0x0020             MOVS     R0,R4
   \       0xD8   0x.... 0x....      BL       simple_udp_register
    389            simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    390                                udp_param.data_length, &udp_param.dest_ip_addr);
   \       0xDC   0x464B             MOV      R3,R9
   \       0xDE   0x8CBA             LDRH     R2,[R7, #+36]
   \       0xE0   0x6AF9             LDR      R1,[R7, #+44]
   \       0xE2   0x0020             MOVS     R0,R4
   \       0xE4   0x.... 0x....      BL       simple_udp_sendto
    391             app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xE8   0x6AF8             LDR      R0,[R7, #+44]
   \       0xEA   0x.... 0x....      BL       app_bm_free
    392            return 0;
   \       0xEE   0x2000             MOVS     R0,#+0
   \       0xF0   0xB007             ADD      SP,SP,#+28
   \       0xF2   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    393          }
    394          /*---------------------------------------------------------------------------*/
    395          
    396          /*
    397          ** =============================================================================
    398          ** Private Function Definitions
    399          ** =============================================================================
    400          */
    401          

   \                                 In section .bss, align 1
    402           uint8_t udp_test_counter = 0;
   \                     udp_test_counter:
   \        0x0                      DS8 1

   \                                 In section .text, align 2, keep-with-next
    403          uint8_t send_udp(uint8_t *buf, uint16_t length)
    404          {      
   \                     send_udp: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0004             MOVS     R4,R0
    405              memset(&udp_param, 0x00, sizeof(udp_param));   
   \        0x8   0xF05F 0x0B30      MOVS     R11,#+48
   \        0xC   0x2600             MOVS     R6,#+0
   \        0xE   0x.... 0x....      LDR.W    R7,??DataTable7_5
   \       0x12   0x003D             MOVS     R5,R7
   \       0x14   0x0032             MOVS     R2,R6
   \       0x16   0x4659             MOV      R1,R11
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0x.... 0x....      BL       __aeabi_memset
    406              udp_counter = 0x00;
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable7_7
   \       0x24   0x8001             STRH     R1,[R0, #+0]
    407              uint16_t index = 0;
   \       0x26   0xF05F 0x0A00      MOVS     R10,#+0
    408              
    409              memcpy(udp_param.src_ip_addr.u8, &buf[index], 16);
   \       0x2A   0xF05F 0x0810      MOVS     R8,#+16
   \       0x2E   0x4650             MOV      R0,R10
   \       0x30   0xB280             UXTH     R0,R0
   \       0x32   0xEB04 0x0900      ADD      R9,R4,R0
   \       0x36   0x003D             MOVS     R5,R7
   \       0x38   0x4642             MOV      R2,R8
   \       0x3A   0x4649             MOV      R1,R9
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0x.... 0x....      BL       __aeabi_memcpy
    410              index+=16;//16
   \       0x42   0xF11A 0x0A10      ADDS     R10,R10,#+16
    411              
    412              //currently no port supporting
    413              //mem_rev_cpy((uint8_t *)&udp_param.source_port_number, &buf[index], 2);
    414              //index+=2;//18
    415              if(udp_test_counter == 0)
   \       0x46   0x.... 0x....      LDR.W    R5,??DataTable7_8
   \       0x4A   0x7828             LDRB     R0,[R5, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD102             BNE.N    ??send_udp_0
    416                udp_param.source_port_number = UDP_PORT;//sending with default port
   \       0x50   0xF242 0x00A3      MOVW     R0,#+8355
   \       0x54   0x8438             STRH     R0,[R7, #+32]
    417              if(udp_test_counter == 1)
   \                     ??send_udp_0: (+1)
   \       0x56   0x7828             LDRB     R0,[R5, #+0]
   \       0x58   0x2801             CMP      R0,#+1
   \       0x5A   0xD102             BNE.N    ??send_udp_1
    418                udp_param.source_port_number = UDP_PORT1;//sending with default port
   \       0x5C   0xF44F 0x70FB      MOV      R0,#+502
   \       0x60   0x8438             STRH     R0,[R7, #+32]
    419              if(udp_test_counter == 2)
   \                     ??send_udp_1: (+1)
   \       0x62   0x7828             LDRB     R0,[R5, #+0]
   \       0x64   0x2802             CMP      R0,#+2
   \       0x66   0xD102             BNE.N    ??send_udp_2
    420                udp_param.source_port_number = UDP_PORT2;//sending with default port
   \       0x68   0xF240 0x10F7      MOVW     R0,#+503
   \       0x6C   0x8438             STRH     R0,[R7, #+32]
    421              if(udp_test_counter == 3)
   \                     ??send_udp_2: (+1)
   \       0x6E   0x7828             LDRB     R0,[R5, #+0]
   \       0x70   0x2803             CMP      R0,#+3
   \       0x72   0xD102             BNE.N    ??send_udp_3
    422                udp_param.source_port_number = UDP_PORT3;//sending with default port
   \       0x74   0xF44F 0x70FC      MOV      R0,#+504
   \       0x78   0x8438             STRH     R0,[R7, #+32]
    423              if(udp_test_counter == 4)
   \                     ??send_udp_3: (+1)
   \       0x7A   0x7828             LDRB     R0,[R5, #+0]
   \       0x7C   0x2804             CMP      R0,#+4
   \       0x7E   0xD102             BNE.N    ??send_udp_4
    424                udp_param.source_port_number = UDP_PORT4;//sending with default port
   \       0x80   0xF240 0x10F9      MOVW     R0,#+505
   \       0x84   0x8438             STRH     R0,[R7, #+32]
    425                    
    426              memcpy(udp_param.dest_ip_addr.u8, &buf[index], 16);
   \                     ??send_udp_4: (+1)
   \       0x86   0xF05F 0x0810      MOVS     R8,#+16
   \       0x8A   0x4650             MOV      R0,R10
   \       0x8C   0xB280             UXTH     R0,R0
   \       0x8E   0xEB04 0x0600      ADD      R6,R4,R0
   \       0x92   0xF117 0x0910      ADDS     R9,R7,#+16
   \       0x96   0x46CB             MOV      R11,R9
   \       0x98   0x4642             MOV      R2,R8
   \       0x9A   0x0031             MOVS     R1,R6
   \       0x9C   0x4658             MOV      R0,R11
   \       0x9E   0x.... 0x....      BL       __aeabi_memcpy
    427              index+=16;//34
   \       0xA2   0xF11A 0x0A10      ADDS     R10,R10,#+16
    428              
    429              //currently no port supporting
    430              //mem_rev_cpy((uint8_t *)&udp_param.destination_port_number, &buf[index], 2);
    431              //index+=2;//36
    432              if(udp_test_counter == 0)
   \       0xA6   0x7828             LDRB     R0,[R5, #+0]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD102             BNE.N    ??send_udp_5
    433                udp_param.destination_port_number = UDP_PORT;//sending with default port
   \       0xAC   0xF242 0x00A3      MOVW     R0,#+8355
   \       0xB0   0x8478             STRH     R0,[R7, #+34]
    434              if(udp_test_counter == 1)
   \                     ??send_udp_5: (+1)
   \       0xB2   0x7828             LDRB     R0,[R5, #+0]
   \       0xB4   0x2801             CMP      R0,#+1
   \       0xB6   0xD102             BNE.N    ??send_udp_6
    435                udp_param.destination_port_number = UDP_PORT1;//sending with default port
   \       0xB8   0xF44F 0x70FB      MOV      R0,#+502
   \       0xBC   0x8478             STRH     R0,[R7, #+34]
    436              if(udp_test_counter == 2)
   \                     ??send_udp_6: (+1)
   \       0xBE   0x7828             LDRB     R0,[R5, #+0]
   \       0xC0   0x2802             CMP      R0,#+2
   \       0xC2   0xD102             BNE.N    ??send_udp_7
    437                udp_param.destination_port_number = UDP_PORT2;//sending with default port
   \       0xC4   0xF240 0x10F7      MOVW     R0,#+503
   \       0xC8   0x8478             STRH     R0,[R7, #+34]
    438              if(udp_test_counter == 3)
   \                     ??send_udp_7: (+1)
   \       0xCA   0x7828             LDRB     R0,[R5, #+0]
   \       0xCC   0x2803             CMP      R0,#+3
   \       0xCE   0xD102             BNE.N    ??send_udp_8
    439                udp_param.destination_port_number = UDP_PORT3;//sending with default port
   \       0xD0   0xF44F 0x70FC      MOV      R0,#+504
   \       0xD4   0x8478             STRH     R0,[R7, #+34]
    440              if(udp_test_counter == 4)
   \                     ??send_udp_8: (+1)
   \       0xD6   0x7828             LDRB     R0,[R5, #+0]
   \       0xD8   0x2804             CMP      R0,#+4
   \       0xDA   0xD102             BNE.N    ??send_udp_9
    441                udp_param.destination_port_number = UDP_PORT4;//sending with default port
   \       0xDC   0xF240 0x10F9      MOVW     R0,#+505
   \       0xE0   0x8478             STRH     R0,[R7, #+34]
    442          
    443              uint8_t* self_ieee_addr = get_self_address();
   \                     ??send_udp_9: (+1)
   \       0xE2   0x.... 0x....      BL       get_self_address
   \       0xE6   0x0006             MOVS     R6,R0
    444              uip_lladdr_t ll_add;
    445              memcpy(ll_add.addr, &udp_param.dest_ip_addr.u8[8], 8);
   \       0xE8   0xF05F 0x0808      MOVS     R8,#+8
   \       0xEC   0xF117 0x0018      ADDS     R0,R7,#+24
   \       0xF0   0x9000             STR      R0,[SP, #+0]
   \       0xF2   0xF10D 0x0B08      ADD      R11,SP,#+8
   \       0xF6   0x4642             MOV      R2,R8
   \       0xF8   0x9900             LDR      R1,[SP, #+0]
   \       0xFA   0x4658             MOV      R0,R11
   \       0xFC   0x.... 0x....      BL       __aeabi_memcpy
    446              ll_add.addr[0] ^= 0x02;
   \      0x100   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \      0x104   0xF090 0x0002      EORS     R0,R0,#0x2
   \      0x108   0xF88D 0x0008      STRB     R0,[SP, #+8]
    447              if(!memcmp(ll_add.addr, self_ieee_addr, 8))
   \      0x10C   0x2208             MOVS     R2,#+8
   \      0x10E   0x0031             MOVS     R1,R6
   \      0x110   0xA802             ADD      R0,SP,#+8
   \      0x112   0x.... 0x....      BL       memcmp
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD101             BNE.N    ??send_udp_10
    448                return 1;//requesting to self address error
   \      0x11A   0x2001             MOVS     R0,#+1
   \      0x11C   0xE0A4             B.N      ??send_udp_11
    449              
    450              mem_rev_cpy((uint8_t *)&udp_param.counter, &buf[index], 2);
   \                     ??send_udp_10: (+1)
   \      0x11E   0x2202             MOVS     R2,#+2
   \      0x120   0x4650             MOV      R0,R10
   \      0x122   0xB280             UXTH     R0,R0
   \      0x124   0xEB04 0x0100      ADD      R1,R4,R0
   \      0x128   0xF117 0x0026      ADDS     R0,R7,#+38
   \      0x12C   0x.... 0x....      BL       mem_rev_cpy
    451              index+=2;//38
   \      0x130   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \      0x134   0x46D0             MOV      R8,R10
    452          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    453              edfe_information.edfe_trigger_packt =  udp_param.counter;
    454          #endif
    455              udp_param.interval = buf[index];
   \      0x136   0x4640             MOV      R0,R8
   \      0x138   0xB280             UXTH     R0,R0
   \      0x13A   0x5C20             LDRB     R0,[R4, R0]
   \      0x13C   0xF887 0x0028      STRB     R0,[R7, #+40]
    456              index+=1;//39
   \      0x140   0xF118 0x0801      ADDS     R8,R8,#+1
    457              
    458              mem_rev_cpy((uint8_t *)&udp_param.data_length, &buf[index], 2);
   \      0x144   0x2202             MOVS     R2,#+2
   \      0x146   0x4640             MOV      R0,R8
   \      0x148   0xB280             UXTH     R0,R0
   \      0x14A   0xEB04 0x0100      ADD      R1,R4,R0
   \      0x14E   0xF117 0x0024      ADDS     R0,R7,#+36
   \      0x152   0x.... 0x....      BL       mem_rev_cpy
    459              index+=2;//CURRENT_UDP_PARAM_LEN = 41         
   \      0x156   0xF118 0x0802      ADDS     R8,R8,#+2
    460          
    461              if(udp_param.data_length == 0 || udp_param.data_length > MAX_UDP_LENGTH_SUPPORT || 
    462                 udp_param.counter == 0 || udp_param.counter >= 0xFFFF ||
    463                 udp_param.interval == 0 || udp_param.interval >= 0xFF)
   \      0x15A   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x15C   0x2800             CMP      R0,#+0
   \      0x15E   0xD014             BEQ.N    ??send_udp_12
   \      0x160   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x162   0xF240 0x51DD      MOVW     R1,#+1501
   \      0x166   0x4288             CMP      R0,R1
   \      0x168   0xDA0F             BGE.N    ??send_udp_12
   \      0x16A   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x16C   0x2800             CMP      R0,#+0
   \      0x16E   0xD00C             BEQ.N    ??send_udp_12
   \      0x170   0x8CF9             LDRH     R1,[R7, #+38]
   \      0x172   0xF64F 0x70FF      MOVW     R0,#+65535
   \      0x176   0x4281             CMP      R1,R0
   \      0x178   0xD007             BEQ.N    ??send_udp_12
   \      0x17A   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x17E   0x2800             CMP      R0,#+0
   \      0x180   0xD003             BEQ.N    ??send_udp_12
   \      0x182   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x186   0x28FF             CMP      R0,#+255
   \      0x188   0xD101             BNE.N    ??send_udp_13
    464                return 1;//sending fail status
   \                     ??send_udp_12: (+1)
   \      0x18A   0x2001             MOVS     R0,#+1
   \      0x18C   0xE06C             B.N      ??send_udp_11
    465              
    466              //explicitly setting to 5 sec, due more than 10 hopping
    467              if(udp_param.interval <= 5)
   \                     ??send_udp_13: (+1)
   \      0x18E   0xF897 0x0028      LDRB     R0,[R7, #+40]
   \      0x192   0x2806             CMP      R0,#+6
   \      0x194   0xDA02             BGE.N    ??send_udp_14
    468                udp_param.interval = 5;
   \      0x196   0x2005             MOVS     R0,#+5
   \      0x198   0xF887 0x0028      STRB     R0,[R7, #+40]
    469              udp_param.data_buff = (uint8_t *)app_bm_alloc( udp_param.data_length );
   \                     ??send_udp_14: (+1)
   \      0x19C   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x19E   0x.... 0x....      BL       app_bm_alloc
   \      0x1A2   0x62F8             STR      R0,[R7, #+44]
    470              if(udp_param.data_buff == NULL)
   \      0x1A4   0x6AF8             LDR      R0,[R7, #+44]
   \      0x1A6   0x2800             CMP      R0,#+0
   \      0x1A8   0xD101             BNE.N    ??send_udp_15
    471              {
    472                return 1;
   \      0x1AA   0x2001             MOVS     R0,#+1
   \      0x1AC   0xE05C             B.N      ??send_udp_11
    473              }
    474              memcpy(udp_param.data_buff, &buf[index], udp_param.data_length);//NEED DYNAMIC ALLOCATION
   \                     ??send_udp_15: (+1)
   \      0x1AE   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x1B0   0x9000             STR      R0,[SP, #+0]
   \      0x1B2   0x4640             MOV      R0,R8
   \      0x1B4   0xB280             UXTH     R0,R0
   \      0x1B6   0xEB04 0x0A00      ADD      R10,R4,R0
   \      0x1BA   0xF8D7 0xB02C      LDR      R11,[R7, #+44]
   \      0x1BE   0x9A00             LDR      R2,[SP, #+0]
   \      0x1C0   0x4651             MOV      R1,R10
   \      0x1C2   0x4658             MOV      R0,R11
   \      0x1C4   0x.... 0x....      BL       __aeabi_memcpy
    475              index+=udp_param.data_length;    
   \      0x1C8   0x8CB8             LDRH     R0,[R7, #+36]
   \      0x1CA   0xEB10 0x0808      ADDS     R8,R0,R8
    476              
    477              //simple_udp_register(&unicast_connection, udp_param.source_port_number, NULL, 
    478              //                    udp_param.destination_port_number, revceiver_callback);    
    479              
    480                if(udp_test_counter == 0)
   \      0x1CE   0x7828             LDRB     R0,[R5, #+0]
   \      0x1D0   0x2800             CMP      R0,#+0
   \      0x1D2   0xD105             BNE.N    ??send_udp_16
    481                simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    482                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1D4   0x464B             MOV      R3,R9
   \      0x1D6   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1D8   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1DA   0x....             LDR.N    R0,??DataTable7
   \      0x1DC   0x.... 0x....      BL       simple_udp_sendto
    483              if(udp_test_counter == 1)
   \                     ??send_udp_16: (+1)
   \      0x1E0   0x7828             LDRB     R0,[R5, #+0]
   \      0x1E2   0x2801             CMP      R0,#+1
   \      0x1E4   0xD105             BNE.N    ??send_udp_17
    484                simple_udp_sendto(&unicast_connection1, udp_param.data_buff, 
    485                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1E6   0x464B             MOV      R3,R9
   \      0x1E8   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1EA   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1EC   0x....             LDR.N    R0,??DataTable7_1
   \      0x1EE   0x.... 0x....      BL       simple_udp_sendto
    486              if(udp_test_counter == 2)
   \                     ??send_udp_17: (+1)
   \      0x1F2   0x7828             LDRB     R0,[R5, #+0]
   \      0x1F4   0x2802             CMP      R0,#+2
   \      0x1F6   0xD105             BNE.N    ??send_udp_18
    487                simple_udp_sendto(&unicast_connection2, udp_param.data_buff, 
    488                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x1F8   0x464B             MOV      R3,R9
   \      0x1FA   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x1FC   0x6AF9             LDR      R1,[R7, #+44]
   \      0x1FE   0x....             LDR.N    R0,??DataTable7_2
   \      0x200   0x.... 0x....      BL       simple_udp_sendto
    489              if(udp_test_counter == 3)
   \                     ??send_udp_18: (+1)
   \      0x204   0x7828             LDRB     R0,[R5, #+0]
   \      0x206   0x2803             CMP      R0,#+3
   \      0x208   0xD105             BNE.N    ??send_udp_19
    490                simple_udp_sendto(&unicast_connection3, udp_param.data_buff, 
    491                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x20A   0x464B             MOV      R3,R9
   \      0x20C   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x20E   0x6AF9             LDR      R1,[R7, #+44]
   \      0x210   0x....             LDR.N    R0,??DataTable7_3
   \      0x212   0x.... 0x....      BL       simple_udp_sendto
    492              if(udp_test_counter == 4)
   \                     ??send_udp_19: (+1)
   \      0x216   0x7828             LDRB     R0,[R5, #+0]
   \      0x218   0x2804             CMP      R0,#+4
   \      0x21A   0xD105             BNE.N    ??send_udp_20
    493                simple_udp_sendto(&unicast_connection4, udp_param.data_buff, 
    494                                udp_param.data_length, &udp_param.dest_ip_addr);
   \      0x21C   0x464B             MOV      R3,R9
   \      0x21E   0x8CBA             LDRH     R2,[R7, #+36]
   \      0x220   0x6AF9             LDR      R1,[R7, #+44]
   \      0x222   0x....             LDR.N    R0,??DataTable7_4
   \      0x224   0x.... 0x....      BL       simple_udp_sendto
    495              
    496          //    simple_udp_sendto(&unicast_connection, udp_param.data_buff, 
    497          //                      udp_param.data_length, &udp_param.dest_ip_addr);
    498              udp_param.counter--;
   \                     ??send_udp_20: (+1)
   \      0x228   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x22A   0x1E40             SUBS     R0,R0,#+1
   \      0x22C   0x84F8             STRH     R0,[R7, #+38]
    499              send_udp_conf();
   \      0x22E   0x.... 0x....      BL       send_udp_conf
    500              //gu2pcapp_node_config_set_conf(0x00);
    501          
    502              if(udp_param.counter)
   \      0x232   0x8CF8             LDRH     R0,[R7, #+38]
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xD00D             BEQ.N    ??send_udp_21
    503              {
    504                l3_ctimer_set(&udp_send_ctimer, udp_param.interval*CLOCK_SECOND, 
    505                           udp_send_ctimer_callback, NULL);      
   \      0x238   0x2000             MOVS     R0,#+0
   \      0x23A   0x9001             STR      R0,[SP, #+4]
   \      0x23C   0x.... 0x....      ADR.W    R0,udp_send_ctimer_callback
   \      0x240   0x9000             STR      R0,[SP, #+0]
   \      0x242   0xF897 0x2028      LDRB     R2,[R7, #+40]
   \      0x246   0xF44F 0x707A      MOV      R0,#+1000
   \      0x24A   0x4342             MULS     R2,R0,R2
   \      0x24C   0x17D3             ASRS     R3,R2,#+31
   \      0x24E   0x....             LDR.N    R0,??DataTable7_9
   \      0x250   0x.... 0x....      BL       l3_ctimer_set
    506              }
    507              if (udp_test_counter == 4)
   \                     ??send_udp_21: (+1)
   \      0x254   0x7828             LDRB     R0,[R5, #+0]
   \      0x256   0x2804             CMP      R0,#+4
   \      0x258   0xD102             BNE.N    ??send_udp_22
    508                udp_test_counter = 0;
   \      0x25A   0x2000             MOVS     R0,#+0
   \      0x25C   0x7028             STRB     R0,[R5, #+0]
   \      0x25E   0xE002             B.N      ??send_udp_23
    509              else
    510                udp_test_counter++;
   \                     ??send_udp_22: (+1)
   \      0x260   0x7828             LDRB     R0,[R5, #+0]
   \      0x262   0x1C40             ADDS     R0,R0,#+1
   \      0x264   0x7028             STRB     R0,[R5, #+0]
    511              
    512              return 0;
   \                     ??send_udp_23: (+1)
   \      0x266   0x2000             MOVS     R0,#+0
   \                     ??send_udp_11: (+1)
   \      0x268   0xB005             ADD      SP,SP,#+20
   \      0x26A   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    513          }
    514          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    515          static void udp_send_ctimer_callback(void* ptr)
    516          {
   \                     udp_send_ctimer_callback: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    517              simple_udp_sendto(&unicast_connection, udp_param.data_buff, udp_param.data_length, 
    518                                &udp_param.dest_ip_addr);
   \        0x4   0x....             LDR.N    R5,??DataTable7_5
   \        0x6   0xF115 0x0310      ADDS     R3,R5,#+16
   \        0xA   0x8CAA             LDRH     R2,[R5, #+36]
   \        0xC   0x6AE9             LDR      R1,[R5, #+44]
   \        0xE   0x....             LDR.N    R0,??DataTable7
   \       0x10   0x.... 0x....      BL       simple_udp_sendto
    519              udp_param.counter--;
   \       0x14   0x8CE8             LDRH     R0,[R5, #+38]
   \       0x16   0x1E40             SUBS     R0,R0,#+1
   \       0x18   0x84E8             STRH     R0,[R5, #+38]
    520              send_udp_conf();
   \       0x1A   0x.... 0x....      BL       send_udp_conf
    521              //gu2pcapp_node_config_set_conf(0x00);    
    522              if(udp_param.counter)
   \       0x1E   0x8CE8             LDRH     R0,[R5, #+38]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD00D             BEQ.N    ??udp_send_ctimer_callback_0
    523              {
    524                l3_ctimer_set(&udp_send_ctimer, udp_param.interval*CLOCK_SECOND, 
    525                           udp_send_ctimer_callback, NULL);      
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0x....             LDR.N    R0,??DataTable7_10
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0xF895 0x2028      LDRB     R2,[R5, #+40]
   \       0x30   0xF44F 0x707A      MOV      R0,#+1000
   \       0x34   0x4342             MULS     R2,R0,R2
   \       0x36   0x17D3             ASRS     R3,R2,#+31
   \       0x38   0x....             LDR.N    R0,??DataTable7_9
   \       0x3A   0x.... 0x....      BL       l3_ctimer_set
   \       0x3E   0xE002             B.N      ??udp_send_ctimer_callback_1
    526              }
    527              else
    528              {
    529                l3_ctimer_stop(&udp_send_ctimer);          
   \                     ??udp_send_ctimer_callback_0: (+1)
   \       0x40   0x....             LDR.N    R0,??DataTable7_9
   \       0x42   0x.... 0x....      BL       l3_ctimer_stop
    530              }
    531          }
   \                     ??udp_send_ctimer_callback_1: (+1)
   \       0x46   0xBD37             POP      {R0-R2,R4,R5,PC}
    532          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    533          static void send_udp_conf(void)
    534          {
   \                     send_udp_conf: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    535          #ifdef SEND_UDP_PKT_TO_HIF
    536              enet_msg_t* msg = allocate_hif_msg( udp_param.data_length+50 );//50 bytes is sefty zone    
   \        0x4   0x....             LDR.N    R5,??DataTable7_5
   \        0x6   0x8CA8             LDRH     R0,[R5, #+36]
   \        0x8   0x3032             ADDS     R0,R0,#+50
   \        0xA   0xB280             UXTH     R0,R0
   \        0xC   0x.... 0x....      BL       allocate_hif_msg
   \       0x10   0x0004             MOVS     R4,R0
    537              uint8_t* buf = msg->data;    
   \       0x12   0x1DA6             ADDS     R6,R4,#+6
    538              if(msg != NULL)
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD04E             BEQ.N    ??send_udp_conf_0
    539               {
    540                    *buf++ = SEND_UDP_PACKET;
   \       0x18   0x2089             MOVS     R0,#+137
   \       0x1A   0x7030             STRB     R0,[R6, #+0]
   \       0x1C   0xF116 0x0801      ADDS     R8,R6,#+1
    541                    
    542                    memcpy(buf,udp_param.src_ip_addr.u8,16);
   \       0x20   0xF05F 0x0B10      MOVS     R11,#+16
   \       0x24   0x002E             MOVS     R6,R5
   \       0x26   0x4647             MOV      R7,R8
   \       0x28   0x465A             MOV      R2,R11
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0x0038             MOVS     R0,R7
   \       0x2E   0x.... 0x....      BL       __aeabi_memcpy
    543                    buf+=16;
   \       0x32   0xF118 0x0710      ADDS     R7,R8,#+16
    544                    
    545                    memcpy(buf,udp_param.dest_ip_addr.u8,16);
   \       0x36   0xF05F 0x0810      MOVS     R8,#+16
   \       0x3A   0xF115 0x0910      ADDS     R9,R5,#+16
   \       0x3E   0x46BA             MOV      R10,R7
   \       0x40   0x4642             MOV      R2,R8
   \       0x42   0x4649             MOV      R1,R9
   \       0x44   0x4650             MOV      R0,R10
   \       0x46   0x.... 0x....      BL       __aeabi_memcpy
    546                    buf+=16;
   \       0x4A   0x3710             ADDS     R7,R7,#+16
    547                    ++udp_counter;
   \       0x4C   0x....             LDR.N    R1,??DataTable7_7
   \       0x4E   0x8808             LDRH     R0,[R1, #+0]
   \       0x50   0x1C40             ADDS     R0,R0,#+1
   \       0x52   0x8008             STRH     R0,[R1, #+0]
    548          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    549                    edfe_information.edfe_sent_pkt = udp_counter;
    550          #endif
    551                    if(udp_counter == 0xFFFF)
   \       0x54   0x880A             LDRH     R2,[R1, #+0]
   \       0x56   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x5A   0x4282             CMP      R2,R0
   \       0x5C   0xD101             BNE.N    ??send_udp_conf_1
    552                    {
    553                      udp_counter = 0x00;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x8008             STRH     R0,[R1, #+0]
    554                    }
    555                    mem_rev_cpy(buf,(uint8_t*)&udp_counter,2);
   \                     ??send_udp_conf_1: (+1)
   \       0x62   0x2202             MOVS     R2,#+2
   \       0x64   0x0038             MOVS     R0,R7
   \       0x66   0x.... 0x....      BL       mem_rev_cpy
    556                    buf+=2;
   \       0x6A   0x1CB9             ADDS     R1,R7,#+2
    557                    
    558                    *buf++ = udp_param.interval;
   \       0x6C   0xF895 0x0028      LDRB     R0,[R5, #+40]
   \       0x70   0x7008             STRB     R0,[R1, #+0]
   \       0x72   0x1C48             ADDS     R0,R1,#+1
    559                    
    560                    put_ushort_BE(buf,udp_param.data_length);
   \       0x74   0x8CA9             LDRH     R1,[R5, #+36]
   \       0x76   0x7041             STRB     R1,[R0, #+1]
   \       0x78   0x8CA9             LDRH     R1,[R5, #+36]
   \       0x7A   0xB289             UXTH     R1,R1
   \       0x7C   0x0A09             LSRS     R1,R1,#+8
   \       0x7E   0x7001             STRB     R1,[R0, #+0]
    561                    buf += 2;
   \       0x80   0x1C86             ADDS     R6,R0,#+2
    562                    
    563                    memcpy(buf,udp_param.data_buff,udp_param.data_length);
   \       0x82   0x8CAF             LDRH     R7,[R5, #+36]
   \       0x84   0xF8D5 0x802C      LDR      R8,[R5, #+44]
   \       0x88   0x46B1             MOV      R9,R6
   \       0x8A   0x003A             MOVS     R2,R7
   \       0x8C   0x4641             MOV      R1,R8
   \       0x8E   0x4648             MOV      R0,R9
   \       0x90   0x.... 0x....      BL       __aeabi_memcpy
    564                    buf += udp_param.data_length;
   \       0x94   0x8CA8             LDRH     R0,[R5, #+36]
   \       0x96   0xEB06 0x0100      ADD      R1,R6,R0
    565                    
    566                    *buf++ = DUMMY_COMPORT;
   \       0x9A   0x2055             MOVS     R0,#+85
   \       0x9C   0x7008             STRB     R0,[R1, #+0]
   \       0x9E   0x1C4E             ADDS     R6,R1,#+1
    567                    
    568                    msg->data_length  = buf - msg->data;
   \       0xA0   0x1DA0             ADDS     R0,R4,#+6
   \       0xA2   0x1A30             SUBS     R0,R6,R0
   \       0xA4   0x80A0             STRH     R0,[R4, #+4]
    569                    // data_length -1 :: -1 is for command ID   
    570          //        hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);
    571                 //   free_hif_msg( msg );
    572                    if(udp_param.counter == 0x00)
   \       0xA6   0x8CE8             LDRH     R0,[R5, #+38]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD102             BNE.N    ??send_udp_conf_2
    573                      app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xAC   0x6AE8             LDR      R0,[R5, #+44]
   \       0xAE   0x.... 0x....      BL       app_bm_free
    574                    
    575                    udp_param.data_buff = NULL;
   \                     ??send_udp_conf_2: (+1)
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0x62E8             STR      R0,[R5, #+44]
    576               }
    577              
    578              if(udp_param.data_buff != NULL)
   \                     ??send_udp_conf_0: (+1)
   \       0xB6   0x6AE8             LDR      R0,[R5, #+44]
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD007             BEQ.N    ??send_udp_conf_3
    579              {
    580                if(udp_param.counter == 0x00)
   \       0xBC   0x8CE8             LDRH     R0,[R5, #+38]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD102             BNE.N    ??send_udp_conf_4
    581                      app_bm_free((uint8_t*)udp_param.data_buff);
   \       0xC2   0x6AE8             LDR      R0,[R5, #+44]
   \       0xC4   0x.... 0x....      BL       app_bm_free
    582                
    583                udp_param.data_buff = NULL;
   \                     ??send_udp_conf_4: (+1)
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x62E8             STR      R0,[R5, #+44]
    584              }
    585               
    586          #endif 
    587          }
   \                     ??send_udp_conf_3: (+1)
   \       0xCC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    588          
    589          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    590          static void
    591          revceiver_callback (struct simple_udp_connection *c,
    592                   const uip_ipaddr_t *sender_addr,
    593                   uint16_t sender_port,
    594                   const uip_ipaddr_t *receiver_addr,
    595                   uint16_t receiver_port,
    596                   const uint8_t *data,
    597                   uint16_t datalen)
    598          {
   \                     revceiver_callback: (+1)
   \        0x0   0xE92D 0x47F3      PUSH     {R0,R1,R4-R10,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
   \        0xA   0x9D10             LDR      R5,[SP, #+64]
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0xAC01             ADD      R4,SP,#+4
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       __aeabi_memset
    599          
    600          #if 0// Raka .. for checking RAW UART on HIF .. [ 12-OCt-2023 ]
    601          #ifdef SEND_UDP_PKT_TO_HIF
    602            
    603              enet_msg_t* msg = allocate_hif_msg( datalen+25 );
    604              uint8_t* buf = msg->data;	
    605              
    606          #if(FAN_EDFE_FEATURE_ENABLED == 1)
    607              if(edfe_information.edfe_frame_enabled == 0x01)
    608              {
    609                if((edfe_information.edfe_transmit_flow_contrl == 0)&&(edfe_information.edfe_receiver_flow_contrl != 0))
    610                {
    611                  enable_disable_edfe_frame(1,FINAL_RESPONSE_FRAME);
    612                  send_edfe_initial_frame(edfe_information.edfe_ini_mac_addr ,1,FINAL_RESPONSE_FRAME);
    613                  enable_disable_edfe_frame(0,255);//go to currunt channel listing
    614                }
    615                if((edfe_information.edfe_transmit_flow_contrl != 0)&&(edfe_information.edfe_receiver_flow_contrl != 0))
    616                {
    617                  enable_disable_edfe_frame(1,RESPONSE_FRAME);
    618                  send_edfe_initial_frame(edfe_information.edfe_ini_mac_addr ,1,RESPONSE_FRAME);
    619                }
    620              }
    621          #endif
    622               if(msg != NULL)
    623               {
    624                 *buf++ = UDP_RECIVED_IND;
    625                 
    626                 memcpy(buf,sender_addr->u8,16);
    627                 buf+=16;
    628                 
    629                 mem_rev_cpy(buf,(uint8_t *)&sender_port,2);
    630                 buf+=2;
    631                 ++recv_counter;
    632                 if(recv_counter == 0xFFFF)
    633                 {
    634                   recv_counter = 0x00;
    635                 }
    636                 mem_rev_cpy(buf,(uint8_t *)&recv_counter,2);
    637                 buf+=2;
    638                 
    639                 put_ushort_BE(buf,datalen);
    640                 buf += 2;
    641                 
    642                 memcpy(buf,data,datalen);
    643                 buf += datalen;
    644                 
    645                 *buf++ = DUMMY_COMPORT;
    646                 
    647                 msg->data_length  = buf - msg->data;
    648                 
    649                 // data_length -1 :: -1 is for command ID
    650                 hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);
    651                 free_hif_msg( msg );
    652               }
    653          #endif 
    654              
    655          #else  // for #if 0
    656          
    657          // This code is to send the data to HES from the Linux Gateway ..
    658              uint8_t tempMACAddr [ 8] = {0};
                             ^
Warning[Pe177]: variable "tempMACAddr" was declared but never referenced

  static uint16_t recv_counter = 0;
                  ^
"D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\AppUDPprocess.c",90  Warning[Pe177]: 
          variable "recv_counter" was declared but never referenced
    659              
    660              enet_msg_t* msg = allocate_hif_msg( datalen+25 );
   \       0x18   0xF115 0x0019      ADDS     R0,R5,#+25
   \       0x1C   0xB280             UXTH     R0,R0
   \       0x1E   0x.... 0x....      BL       allocate_hif_msg
   \       0x22   0x0004             MOVS     R4,R0
    661              uint8_t* buf = msg->data;	
   \       0x24   0xF114 0x0806      ADDS     R8,R4,#+6
    662              
    663          ////[kimbal]
    664              if(msg != NULL)
   \       0x28   0x2C00             CMP      R4,#+0
   \       0x2A   0xD01B             BEQ.N    ??revceiver_callback_0
    665              {
    666                 
    667               memcpy(buf,data,datalen);       
   \       0x2C   0x46A9             MOV      R9,R5
   \       0x2E   0xFA1F 0xF989      UXTH     R9,R9
   \       0x32   0x980F             LDR      R0,[SP, #+60]
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0x46C2             MOV      R10,R8
   \       0x38   0x464A             MOV      R2,R9
   \       0x3A   0x9900             LDR      R1,[SP, #+0]
   \       0x3C   0x4650             MOV      R0,R10
   \       0x3E   0x.... 0x....      BL       __aeabi_memcpy
    668                 buf += datalen;       
   \       0x42   0x0028             MOVS     R0,R5
   \       0x44   0xB280             UXTH     R0,R0
   \       0x46   0x4480             ADD      R8,R8,R0
    669                 msg->data_length  = buf - msg->data;
   \       0x48   0x1DA0             ADDS     R0,R4,#+6
   \       0x4A   0xEBB8 0x0000      SUBS     R0,R8,R0
   \       0x4E   0x80A0             STRH     R0,[R4, #+4]
    670                 //debug_UDP_revceiver_callback_cnt++;
    671                 hif_send_msg_up(msg->data,msg->data_length,response_laye_ID, PROTOCOL_ID_FOR_APP);
   \       0x50   0x2301             MOVS     R3,#+1
   \       0x52   0x....             LDR.N    R0,??DataTable7_11
   \       0x54   0x7802             LDRB     R2,[R0, #+0]
   \       0x56   0x88A1             LDRH     R1,[R4, #+4]
   \       0x58   0x1DA0             ADDS     R0,R4,#+6
   \       0x5A   0x.... 0x....      BL       hif_send_msg_up
    672                 free_hif_msg( msg );
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0x.... 0x....      BL       free_hif_msg
    673                     
    674              }        
    675              
    676          ////[kimbal]
    677              
    678          //     if(msg != NULL)
    679          //     {
    680          //       
    681          //       *buf++ = 0x03; // HIF Frame CMD ID
    682          //       
    683          //       *buf++ = 0x03;  // pRIMITIVE id
    684          //       *buf++ = 0x04;  // Frame ID
    685          //       
    686          //       put_ushort(buf,datalen);  // Data Lengtgh
    687          //       buf += 2;
    688          //       
    689          //       *buf++ = 0x00;
    690          //       
    691          //       memcpy(&tempMACAddr[0], (uint8_t *)&sender_addr->u8[8], 8 );
    692          //       tempMACAddr[0] ^= 0x02;
    693          //       mem_rev_cpy(buf,(uint8_t *)&tempMACAddr[0],8); // Src MAC Addr
    694          //       
    695          //       buf+=8;
    696          //         memcpy(buf,(uint8_t *)&sender_port,2);  // Src Port
    697          //       buf+=2;
    698          //       
    699          //       memset (&tempMACAddr[0], 0x00, 8);
    700          //       memcpy(&tempMACAddr[0], (uint8_t *)&receiver_addr->u8[8], 8 );
    701          //       tempMACAddr[0] ^= 0x02;
    702          //       mem_rev_cpy(buf,(uint8_t *)&tempMACAddr[0],8); // Dst MAC Addr
    703          //       buf+=8;
    704          //       
    705          //       
    706          //       memcpy(buf,(uint8_t *)&receiver_port,2); // Dst port
    707          //       buf+=2;
    708          //      
    709          //       *buf++  = 0x05;  // Hop count 
    710          //        memset(buf,0x01,4); // Travel Time TBD
    711          //         buf+=4;
    712          //         
    713          //       put_ushort(buf,datalen);  // get_ushort  // APDU Length
    714          //       buf += 2;
    715          //       
    716          //       memcpy(buf,data,datalen);       
    717          //       buf += datalen;
    718          //       
    719          //       
    720          //       *buf++ = DUMMY_COMPORT;//Dummy Comport 
    721          //       
    722          //       msg->data_length  = buf - msg->data;
    723          //       debug_UDP_revceiver_callback_cnt++;
    724          //       hif_send_msg_up(msg->data,msg->data_length-1,APP_DEF_LAYER_ID_LINUXGATEWAY, PROTOCOL_ID_FOR_APP);
    725          //       free_hif_msg( msg );
    726          //       
    727          //      
    728          //     }
    729               
    730          
    731          #endif    
    732           
    733          }
   \                     ??revceiver_callback_0: (+1)
   \       0x64   0xB006             ADD      SP,SP,#+24
   \       0x66   0xE8BD 0x87F0      POP      {R4-R10,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x....'....        DC32     unicast_connection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x....'....        DC32     unicast_connection1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     unicast_connection2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     unicast_connection3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x....'....        DC32     unicast_connection4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x....'....        DC32     udp_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x....'....        DC32     udp_param+16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x....'....        DC32     udp_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x....'....        DC32     udp_test_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     udp_send_ctimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x....'....        DC32     udp_send_ctimer_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x....'....        DC32     response_laye_ID
    734          /*---------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mem_reverse_cpy
      32   process_thread_udp_process
        32   -> simple_udp_register
      24   process_udp_port_register
        24   -> gu2pcapp_node_config_set_conf
        24   -> mem_rev_cpy
        24   -> simple_udp_register
      56   revceiver_callback
        56   -> __aeabi_memcpy
        56   -> __aeabi_memset
        56   -> allocate_hif_msg
        56   -> free_hif_msg
        56   -> hif_send_msg_up
      56   send_udp
        56   -> __aeabi_memcpy
        56   -> __aeabi_memset
        56   -> app_bm_alloc
        56   -> get_self_address
        56   -> l3_ctimer_set
        56   -> mem_rev_cpy
        56   -> memcmp
        56   -> send_udp_conf
        56   -> simple_udp_sendto
      40   send_udp_conf
        40   -> __aeabi_memcpy
        40   -> allocate_hif_msg
        40   -> app_bm_free
        40   -> mem_rev_cpy
       0   send_udp_data_packet
      64   send_udp_packets
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset
        64   -> app_bm_alloc
        64   -> app_bm_free
        64   -> mem_rev_cpy
        64   -> simple_udp_register
        64   -> simple_udp_sendto
      24   udp_send_ctimer_callback
        24   -> l3_ctimer_set
        24   -> l3_ctimer_stop
        24   -> send_udp_conf
        24   -> simple_udp_sendto


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       1  data_send_idx
      50  mem_reverse_cpy
     166  process_thread_udp_process
      90  process_udp_port_register
     106  revceiver_callback
     622  send_udp
     208  send_udp_conf
       2  send_udp_data_packet
     246  send_udp_packets
       1  temp_buf_set
       2  udp_counter
      48  udp_param
      12  udp_process
      48  udp_send_ctimer
      72  udp_send_ctimer_callback
       1  udp_test_counter
      36  unicast_connection
      36  unicast_connection1
      36  unicast_connection2
      36  unicast_connection3
      36  unicast_connection4

 
   280 bytes in section .bss
    13 bytes in section .data
 1'610 bytes in section .text
 
 1'610 bytes of CODE memory
   293 bytes of DATA memory

Errors: none
Warnings: 2
