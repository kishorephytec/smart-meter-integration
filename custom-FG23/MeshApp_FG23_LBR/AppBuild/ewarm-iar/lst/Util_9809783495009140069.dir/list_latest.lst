###############################################################################
#
# IAR ANSI C/C++ Compiler V9.50.2.385/W64 for ARM         02/Dec/2024  12:57:45
# Copyright 1999-2024 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\Util\list_manager\list_latest.c
#    Command line                 =
#        -f
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Util_9809783495009140069.dir\list_latest.o.rsp
#        (D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\Util\list_manager\list_latest.c
#        -D EFR32FG23A020F512GM40=1 -D SL_COMPONENT_CATALOG_PRESENT=1 -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -lC
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\Util_9809783495009140069.dir
#        --diag_suppress Pa050 -o
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Util_9809783495009140069.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse -e --fpu=VFPv5_sp --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\.\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\AppConfigs\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\config\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\autogen\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\HAL\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\NVM\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\buffer_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\event_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\list_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\queue_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\timer_manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\hif\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\raw_uart_if\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\debug_console\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\Device\SiliconLabs\EFR32FG23\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\CMSIS\Core\Include\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\device_init\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\mpu\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\toolchain\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\system\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\network-manager\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\RAIL_TRX\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MAC\Inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\wisun_modified\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\FANApp\AppInc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_callbacks\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ip\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\multicast\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\rpl\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\OS_interface\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\L2_L3_interface\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\cpu\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\contiki_mac_interface_layer\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\mac_sicslowpan_if\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emlib\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\platform\p3_lp_dk\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\common\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ble\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ieee802154\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\zwave\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\efr32xg1x\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_protocol\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_rssi\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MeterApp\Inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\dmadrv\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\common\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\FLASH\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\APP_LOG\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\config\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\NVM\nvm3\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\
#        -On --use_c++_inline) --dependencies=n
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Util_9809783495009140069.dir\list_latest.o.iar_deps
#    Locale                       =  C
#    List file                    =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\Util_9809783495009140069.dir\list_latest.lst
#    Object file                  =
#        D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\Util_9809783495009140069.dir\list_latest.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\FG23\FG23_final_code\MeshApp_FG23_LBR\Kimbal_MeshApp_FG23_LBR\ProAppSrc\Util\list_manager\list_latest.c
      1          /** \file list_latest.c
      2           *******************************************************************************
      3           ** \brief This file provides the two list functionalities.
      4           **
      5           ** This file provides the functions like adding an entry at the end of the 
      6           ** list and deleting an entry from the list.
      7           **
      8           ** \cond STD_FILE_HEADER
      9           **
     10           ** COPYRIGHT(c) 2023-24 Procubed Innovations Pvt Ltd.
     11           ** All rights reserved.
     12           **
     13           ** THIS SOFTWARE IS PROVIDED BY "AS IS" AND ALL WARRANTIES OF ANY KIND,
     14           ** INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR USE,
     15           ** ARE EXPRESSLY DISCLAIMED.  THE DEVELOPER SHALL NOT BE LIABLE FOR ANY
     16           ** DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. THIS SOFTWARE
     17           ** MAY NOT BE USED IN PRODUCTS INTENDED FOR USE IN IMPLANTATION OR OTHER
     18           ** DIRECT LIFE SUPPORT APPLICATIONS WHERE MALFUNCTION MAY RESULT IN THE DIRECT
     19           ** PHYSICAL HARM OR INJURY TO PERSONS. ALL SUCH IS USE IS EXPRESSLY PROHIBITED.
     20           **
     21           *******************************************************************************
     22           **  \endcond
     23           */
     24             
     25          /*
     26          ********************************************************************************
     27          * File inclusion
     28          ********************************************************************************
     29          */
     30          
     31          #include "StackPHYConf.h"
     32          #include "common.h"
     33          #include "list_latest.h"
     34          
     35          /*
     36          ** =============================================================================
     37          ** Private Macro definitions
     38          ** =============================================================================
     39          */
     40          	
     41          /* None */
     42          
     43          /*
     44          ** =============================================================================
     45          ** Private Structures, Unions & enums Type Definitions
     46          ** =============================================================================
     47          **/
     48          
     49          /* None */
     50          
     51          /*
     52          ** =============================================================================
     53          ** Private Variable Definitions
     54          ** =============================================================================
     55          */
     56          
     57          /* None */
     58          
     59          /*
     60          ** =============================================================================
     61          ** Private Function Prototypes
     62          ** =============================================================================
     63          */
     64          
     65          //static void list_entry_add_end( 
     66          //      p3_list_t *list,     
     67          //      list_item_t* ptr  
     68          //      );
     69          //
     70          //static list_item_t* list_entry_delete_next(
     71          //    p3_list_t *list,    
     72          //    list_item_t* ptr 
     73          //    );
     74          
     75          /*
     76          ** =============================================================================
     77          ** External Variable Declarations
     78          ** =============================================================================
     79          */
     80          
     81          /* None */
     82          
     83          /*
     84          ** =============================================================================
     85          ** External Function Prototypes
     86          ** =============================================================================
     87          */
     88          
     89          /* None */
     90          
     91          /*
     92          ** =============================================================================
     93          ** Public Variables Definitions
     94          ** =============================================================================
     95          **/
     96          
     97          /* None */
     98          
     99          /*
    100          ** =============================================================================
    101          ** Public Function Prototypes
    102          ** =============================================================================
    103          */
    104          
    105          /* None */
    106          
    107          /*
    108          ** =============================================================================
    109          ** Public Function Definitions
    110          ** =============================================================================
    111          */
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void p3list_init( p3_list_t *list )
    114          {
    115              list->start = NULL;
   \                     p3list_init: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
    116          }
   \        0x4   0x4770             BX       LR
    117          
    118          /*----------------------------------------------------------------------------*/
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void p3list_entry_add_start( 
    121                p3_list_t *list,     /**< the list    */
    122                list_item_t* ptr  /**< the item to be saved */
    123                )
    124          {
    125          //    irq_state_t flags = __get_interrupt_state();//Umesh
    126          
    127          //    flags = irq_disable();
    128              
    129          	ptr->next = NULL;
   \                     p3list_entry_add_start: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x600A             STR      R2,[R1, #+0]
    130          
    131          	if ( list->start != NULL)
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD001             BEQ.N    ??p3list_entry_add_start_0
    132              {
    133                  // Add to front of the list
    134                  ptr->next  = list->start;       
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0x600A             STR      R2,[R1, #+0]
    135              }
    136          	list->start = ptr;
   \                     ??p3list_entry_add_start_0: (+1)
   \        0xE   0x6001             STR      R1,[R0, #+0]
    137          
    138              /*if ( list->start == NULL)
    139              {
    140                  // This is the first
    141                  list->start = ptr;
    142              }
    143              else
    144              {
    145                  // Add to front of the list
    146                  ptr->next  = list->start;
    147                  list->start = ptr;
    148              }*/
    149              
    150          //    irq_enable( flags );
    151          }
   \       0x10   0x4770             BX       LR
    152          
    153          /*----------------------------------------------------------------------------*/
    154           

   \                                 In section .text, align 2, keep-with-next
    155           void list_entry_add_after( 
    156              p3_list_t *list,     
    157              list_item_t* ptr, 
    158              list_item_t* lptr 
    159              )
    160          {
   \                     list_entry_add_after: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0014             MOVS     R4,R2
    161          //    irq_state_t flags = __get_interrupt_state();//Umesh;
    162          
    163          //    flags = irq_disable();
    164              
    165          	if ( lptr == NULL )
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD104             BNE.N    ??list_entry_add_after_0
    166              {
    167                  p3list_entry_add_start( list, ptr );
   \        0xC   0x0031             MOVS     R1,R6
   \        0xE   0x0028             MOVS     R0,R5
   \       0x10   0x.... 0x....      BL       p3list_entry_add_start
   \       0x14   0xE002             B.N      ??list_entry_add_after_1
    168              }
    169              else
    170              {
    171              	ptr->next = lptr->next;
   \                     ??list_entry_add_after_0: (+1)
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x6030             STR      R0,[R6, #+0]
    172              	lptr->next = ptr;	
   \       0x1A   0x6026             STR      R6,[R4, #+0]
    173              }        
    174          
    175          //   irq_enable( flags );
    176          }
   \                     ??list_entry_add_after_1: (+1)
   \       0x1C   0xBD70             POP      {R4-R6,PC}
    177          
    178          /*----------------------------------------------------------------------------*/
    179          

   \                                 In section .text, align 2, keep-with-next
    180           void list_concat( 
    181          					p3_list_t *list1,
    182          					p3_list_t *list2     
    183          				  )
    184          {
   \                     list_concat: (+1)
   \        0x0   0xB410             PUSH     {R4}
    185          //    irq_state_t flags = __get_interrupt_state();//Umesh
    186              list_item_t *current = NULL;
   \        0x2   0x2300             MOVS     R3,#+0
    187          //    flags = irq_disable();
    188              
    189              
    190              
    191              if ( list1->start == NULL )
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD102             BNE.N    ??list_concat_0
    192              {
    193              	*list1 = *list2;
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0x6002             STR      R2,[R0, #+0]
    194          //    	irq_enable( flags );
    195              	return;
   \        0xE   0xE00A             B.N      ??list_concat_1
    196              }
    197              
    198              if( list2->start == NULL )
   \                     ??list_concat_0: (+1)
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0x2A00             CMP      R2,#+0
   \       0x14   0xD007             BEQ.N    ??list_concat_1
    199              {
    200          //    	irq_enable( flags );
    201              	return;
    202              }
    203              	
    204              current = list1->start;
   \                     ??list_concat_2: (+1)
   \       0x16   0x6804             LDR      R4,[R0, #+0]
    205              
    206              while( current->next != NULL)
   \                     ??list_concat_3: (+1)
   \       0x18   0x6822             LDR      R2,[R4, #+0]
   \       0x1A   0x2A00             CMP      R2,#+0
   \       0x1C   0xD001             BEQ.N    ??list_concat_4
    207              {
    208                  current = current->next;
   \       0x1E   0x6824             LDR      R4,[R4, #+0]
   \       0x20   0xE7FA             B.N      ??list_concat_3
    209              }
    210              current->next = list2->start;
   \                     ??list_concat_4: (+1)
   \       0x22   0x680A             LDR      R2,[R1, #+0]
   \       0x24   0x6022             STR      R2,[R4, #+0]
    211              
    212          //    irq_enable( flags );
    213          }
   \                     ??list_concat_1: (+1)
   \       0x26   0xBC10             POP      {R4}
   \       0x28   0x4770             BX       LR
    214          
    215          /*----------------------------------------------------------------------------*/
    216          

   \                                 In section .text, align 2, keep-with-next
    217           list_item_t* list_entry_get_start(
    218                                                    p3_list_t*list     
    219          								  )
    220          {
   \                     list_entry_get_start: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    221              list_item_t* start_item = NULL;
   \        0x2   0x2100             MOVS     R1,#+0
    222          //    irq_state_t flags = __get_interrupt_state();//Umesh
    223          
    224          //    flags = irq_disable();
    225              
    226              start_item =  list->start;
   \        0x4   0x6810             LDR      R0,[R2, #+0]
    227              
    228          //     irq_enable( flags );
    229               return start_item;
   \        0x6   0x4770             BX       LR
    230          }
    231          
    232          
    233          /*----------------------------------------------------------------------------*/
    234          

   \                                 In section .text, align 2, keep-with-next
    235           list_item_t* list_entry_scan_next(
    236              p3_list_t* list,     
    237              list_item_t* ptr 
    238              )
    239          {
   \                     list_entry_scan_next: (+1)
   \        0x0   0x0003             MOVS     R3,R0
    240               list_item_t* next_item = NULL;
   \        0x2   0x2200             MOVS     R2,#+0
    241          //     irq_state_t flags = __get_interrupt_state();//Umesh
    242          
    243          //    flags = irq_disable();
    244              
    245              next_item = ptr->next;
   \        0x4   0x6808             LDR      R0,[R1, #+0]
    246              
    247          //    irq_enable( flags );
    248              return next_item;
   \        0x6   0x4770             BX       LR
    249          }
    250          
    251          /*----------------------------------------------------------------------------*/
    252            

   \                                 In section .text, align 2, keep-with-next
    253            bool list_entry_is_start(
    254              p3_list_t*list,     
    255              list_item_t* ptr 
    256              )
    257          {
   \                     list_entry_is_start: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    258          //     irq_state_t flags = __get_interrupt_state();//Umesh
    259               bool is_start = false;
   \        0x2   0x2300             MOVS     R3,#+0
    260          
    261          //    flags = irq_disable();
    262              is_start =  ( list->start == ptr )?true:false;
   \        0x4   0x6810             LDR      R0,[R2, #+0]
   \        0x6   0x4288             CMP      R0,R1
   \        0x8   0xD101             BNE.N    ??list_entry_is_start_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??list_entry_is_start_1
   \                     ??list_entry_is_start_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
    263          //     irq_enable( flags );
    264              return is_start;
   \                     ??list_entry_is_start_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x4770             BX       LR
    265          }
    266          
    267          /*----------------------------------------------------------------------------*/
    268          

   \                                 In section .text, align 2, keep-with-next
    269          void list_entry_delete( 
    270                p3_list_t *list,     
    271                list_item_t* ptr  
    272                )
    273          {
    274              list_item_t *current;//, *ret = NULL;
    275          //    irq_state_t flags = __get_interrupt_state();//Umesh
    276          
    277          //    flags = irq_disable();
    278              
    279              current = list->start;
   \                     list_entry_delete: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
    280          	
    281          	if ( ptr == list->start )
   \        0x2   0x6803             LDR      R3,[R0, #+0]
   \        0x4   0x4299             CMP      R1,R3
   \        0x6   0xD102             BNE.N    ??list_entry_delete_0
    282          	{
    283          		list->start = ptr->next;
   \        0x8   0x680B             LDR      R3,[R1, #+0]
   \        0xA   0x6003             STR      R3,[R0, #+0]
    284          		//ret = ptr;
    285          //		irq_enable( flags );  
    286          		return;
   \        0xC   0xE00A             B.N      ??list_entry_delete_1
    287          	}
    288              while (( current != NULL ) && ( current->next != ptr ))
   \                     ??list_entry_delete_0: (+1)
   \        0xE   0x2A00             CMP      R2,#+0
   \       0x10   0xD004             BEQ.N    ??list_entry_delete_2
   \       0x12   0x6813             LDR      R3,[R2, #+0]
   \       0x14   0x428B             CMP      R3,R1
   \       0x16   0xD001             BEQ.N    ??list_entry_delete_2
    289              {
    290                  current = current->next;
   \       0x18   0x6812             LDR      R2,[R2, #+0]
   \       0x1A   0xE7F8             B.N      ??list_entry_delete_0
    291              }
    292              if ( NULL != current )
   \                     ??list_entry_delete_2: (+1)
   \       0x1C   0x2A00             CMP      R2,#+0
   \       0x1E   0xD001             BEQ.N    ??list_entry_delete_3
    293              {
    294                  //current->next = ptr; 
    295          		current->next = ptr->next;   
   \       0x20   0x680B             LDR      R3,[R1, #+0]
   \       0x22   0x6013             STR      R3,[R2, #+0]
    296                  //ret = ptr;
    297              }              
    298          //    irq_enable( flags );      	
    299              return;
   \                     ??list_entry_delete_3: (+1)
   \                     ??list_entry_delete_1: (+1)
   \       0x24   0x4770             BX       LR
    300          }
    301          
    302          /*----------------------------------------------------------------------------*/
    303          

   \                                 In section .text, align 2, keep-with-next
    304           void list_entry_set_start(
    305              p3_list_t*list,     
    306              list_item_t* ptr 
    307              )
    308          {
    309          //      irq_state_t flags = __get_interrupt_state();//Umesh
    310           
    311          
    312          //    flags = irq_disable();
    313              list->start = ptr;
   \                     list_entry_set_start: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
    314          //     irq_enable( flags );  
    315          }
   \        0x2   0x4770             BX       LR
    316          
    317          /*----------------------------------------------------------------------------*/
    318          
    319          // Sagar: Not Used 
    320          #if (0)
    321            list_item_t* list_entry_get_prev(
    322              p3_list_t*list,     
    323              list_item_t* ptr 
    324              )
    325          {
    326          //	irq_state_t flags = __get_interrupt_state();//Umesh
    327          	list_item_t *current = NULL;
    328          
    329          //        flags = irq_disable();
    330              
    331          	if (ptr == list->start)
    332          	{
    333          		//If trying to get the previous item of start
    334          //		irq_enable( flags );
    335          		return NULL;
    336          	}
    337          
    338              current = list->start;
    339          
    340              while(( current != NULL ) && ( current->next != ptr )) 
    341              {
    342                  current = current->next;
    343              }
    344              
    345          //    irq_enable( flags );
    346              
    347              return current;
    348          }
    349          
    350          /*----------------------------------------------------------------------------*/
    351           
    352          /*
    353          ** =============================================================================
    354          ** Private Function Definitions
    355          ** =============================================================================
    356          */
    357          
    358          static list_item_t* list_entry_delete_next(
    359              p3_list_t *list,    
    360              list_item_t* ptr 
    361              )
    362          {
    363              list_item_t *a = NULL;
    364              //list_item_t *b;
    365          //    irq_state_t flags = __get_interrupt_state();//Umesh
    366          
    367          //    flags = irq_disable();
    368              
    369              a = list->start;
    370          
    371              if ( a == NULL )
    372              {
    373          //    	irq_enable( flags );  
    374              	return NULL;
    375              }
    376                  
    377              /* If we are trying to remove the item after first entry */
    378              if ( list->start == ptr )
    379              {
    380                  list->start = a->next;
    381          //        irq_enable( flags );                  
    382          		return ptr->next;  
    383              }   
    384              
    385              /* Get the one we want to remove */
    386              a = ptr->next;
    387          
    388              if (ptr->next == NULL)
    389          	{
    390          		// If we are removing after last entry
    391          //		irq_enable( flags );  
    392          		return ptr->next;
    393          	}
    394          	else
    395          	{
    396          	    /* Remove the unwanted item */
    397          	    ptr->next = a->next;
    398          	}	
    399          //	irq_enable( flags );  
    400              
    401              return ptr->next;
    402          }
    403          
    404          /*----------------------------------------------------------------------------*/
    405          
    406          static void list_entry_add_end( 
    407                p3_list_t *list,     
    408                list_item_t* ptr  
    409                )
    410          {
    411              list_item_t *current = NULL;
    412              
    413          //    irq_state_t flags = __get_interrupt_state();//Umesh
    414          
    415          //    flags = irq_disable();
    416              
    417              current = list->start;
    418          
    419              ptr->next = NULL;
    420          
    421              if ( list->start == NULL)
    422              {
    423                  // This is the first
    424                  list->start = ptr;
    425              }
    426              else
    427              {
    428                  while( current->next != NULL)
    429                  {
    430                      current = current->next;
    431                  }
    432                  current->next = ptr;
    433              }
    434              
    435          //    irq_enable( flags );
    436          }
    437          #endif
    438          
    439          
    440          /*----------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   list_concat
      16   list_entry_add_after
        16   -> p3list_entry_add_start
       0   list_entry_delete
       0   list_entry_get_start
       0   list_entry_is_start
       0   list_entry_scan_next
       0   list_entry_set_start
       0   p3list_entry_add_start
       0   p3list_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      42  list_concat
      30  list_entry_add_after
      38  list_entry_delete
       8  list_entry_get_start
      20  list_entry_is_start
       8  list_entry_scan_next
       4  list_entry_set_start
      18  p3list_entry_add_start
       6  p3list_init

 
 174 bytes in section .text
 
 174 bytes of CODE memory

Errors: none
Warnings: none
