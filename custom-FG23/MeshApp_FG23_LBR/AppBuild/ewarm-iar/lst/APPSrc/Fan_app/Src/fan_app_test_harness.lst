###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         30/Apr/2024  13:12:18
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
#    Command line                 =
#        -f
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\APPSrc\Fan_app\Src\fan_app_test_harness.lst.rsp
#        (D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
#        -D EFR32FG23A020F512GM40=1 -D SL_COMPONENT_CATALOG_PRESENT=1 -D
#        SL_RAIL_LIB_MULTIPROTOCOL_SUPPORT=0 -D
#        SL_RAIL_UTIL_PA_CONFIG_HEADER=<sl_rail_util_pa_config.h> -lC
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\APPSrc\Fan_app\Src
#        --diag_suppress Pa050 -o
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\APPSrc\Fan_app\Src
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33 --cmse -e --fpu=VFPv5_sp --dlib_config "C:\Program
#        Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\.\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\AppConfigs\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\config\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\autogen\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\HAL\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\NVM\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Include\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\buffer_manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\event_manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\list_manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\queue_manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\timer_manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\hif\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\raw_uart_if\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\Util\debug_console\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\Device\SiliconLabs\EFR32FG23\Include\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\CMSIS\Core\Include\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\device_init\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\mpu\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\common\toolchain\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\system\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\network-manager\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\RAIL_TRX\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MAC\Inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\wisun_modified\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\ProAppSrc\FANApp\AppInc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_callbacks\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ip\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\multicast\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\ipv6\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\rpl\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\OS_interface\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\L3\L2_L3_interface\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\cpu\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\contiki_mac_interface_layer\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\Interface_Layer\mac_sicslowpan_if\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emlib\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\os\platform\p3_lp_dk\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\common\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\chip\efr32\efr32xg2x\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ble\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\ieee802154\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\protocol\zwave\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\pa-conversions\efr32xg1x\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_protocol\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_pti\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\rail_lib\plugin\rail_util_rssi\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\PHY\radio\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\MeterApp\Inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\dmadrv\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\emdrv\common\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\FLASH\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\APP_LOG\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\config\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\DebugLog\response_print\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\NVM\nvm3\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\..\SiliconLabs\platform\service\iostream\inc\
#        -I
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\
#        -On --use_c++_inline) --dependencies=n
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\APPSrc\Fan_app\Src\fan_app_test_harness.o.d
#    Locale                       =  C
#    List file                    =
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\lst\APPSrc\Fan_app\Src\fan_app_test_harness.lst
#    Object file                  =
#        D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\AppBuild\ewarm-iar\obj\APPSrc\Fan_app\Src\fan_app_test_harness.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\NITHISH\EFR32FG\EFR32FG23\TestBench\Kimbal\Kimbal_MeshApp_FG23_LBR\ProAppSrc\FANApp\AppSrc\fan_app_test_harness.c
      1          /** \file fan_app_test_harness.c
      2           *******************************************************************************
      3           ** \brief Implements the finctions for testing the FAN stack using 
      4           **             Procubed Stack Validation tool and TBC
      5           **
      6           ** \cond STD_FILE_HEADER
      7           **
      8           ** COPYRIGHT(c) 2023-24 Procubed Innovations Pvt Ltd.
      9           ** All rights reserved.
     10           **
     11           ** THIS SOFTWARE IS PROVIDED BY "AS IS" AND ALL WARRANTIES OF ANY KIND,
     12           ** INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR USE,
     13           ** ARE EXPRESSLY DISCLAIMED.  THE DEVELOPER SHALL NOT BE LIABLE FOR ANY
     14           ** DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. THIS SOFTWARE
     15           ** MAY NOT BE USED IN PRODUCTS INTENDED FOR USE IN IMPLANTATION OR OTHER
     16           ** DIRECT LIFE SUPPORT APPLICATIONS WHERE MALFUNCTION MAY RESULT IN THE DIRECT
     17           ** PHYSICAL HARM OR INJURY TO PERSONS. ALL SUCH IS USE IS EXPRESSLY PROHIBITED.
     18           **
     19           *******************************************************************************
     20           **  \endcond
     21           */
     22          
     23          /*
     24          ********************************************************************************
     25          * File inclusion
     26          ********************************************************************************
     27          */
     28          
     29          #include "StackAppConf.h"
     30          #include "common.h"
     31          #include "em_device.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SystemReset(void)
   \                     __NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable15
   \        0x8   0x6801             LDR      R1,[R0, #+0]
   \        0xA   0xF411 0x61E0      ANDS     R1,R1,#0x700
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x12   0x4301             ORRS     R1,R0,R1
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x18   0x6001             STR      R1,[R0, #+0]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \                     ??__NVIC_SystemReset_0: (+1)
   \       0x1E   0xBF00             Nop
   \       0x20   0xE7FD             B.N      ??__NVIC_SystemReset_0
     32          #include "list_latest.h"
     33          #include "queue_latest.h"
     34          #include "uart_hal.h"
     35          #include "mac.h"
     36          #include "hif_utility.h"
     37          #include "hif_service.h"
     38          #include "buff_mgmt.h"
     39          #include "buffer_service.h"
     40          #include "hw_tmr.h"
     41          #include "sw_timer.h"
     42          #include "mac_interface_layer.h"
     43          #include "fan_mac_security.h"
     44          #include "sm.h"
     45          #include "contiki-net.h"
     46          #include "ie_element_info.h"
     47          #include "fan_app_test_harness.h"
     48          #include "network-manager.h"
     49          #include "fan_api.h"
     50          #include "fan_app_auto.h"
     51          #include "fan_factorycmd.h"
     52          #include "fan_mac_security.h"
     53          
     54          /*
     55          ** =============================================================================
     56          ** Private Macro definitions
     57          ** =============================================================================
     58          */
     59          	
     60          #define VERSION_NUMBER  "1.0.2"
     61          
     62          /*
     63          ** =============================================================================
     64          ** Private Structures, Unions & enums Type Definitions
     65          ** =============================================================================
     66          **/
     67          
     68          enum modulation{
     69                FSK2,
     70                NOT_APLICABLE  
     71                };
     72          
     73          
     74          /*
     75          ** =============================================================================
     76          ** Private Variable Definitions
     77          ** =============================================================================
     78          */
     79          
     80          

   \                                 In section .bss, align 4
     81          static hif_service_t hif_fan_test;
   \                     hif_fan_test:
   \        0x0                      DS8 16
     82          
     83          
     84          
     85          /*
     86          ** =============================================================================
     87          ** Private Function Prototypes
     88          ** =============================================================================
     89          */
     90          
     91          static void process_send_udp(uint8_t *buf, uint16_t length);
     92          extern void process_set_facort_mode_PA_level_api(uint8_t *buf, uint16_t length);
     93          
     94          /*
     95          ** =============================================================================
     96          ** External Variable Declarations
     97          ** =============================================================================
     98          */
     99          
    100          #if(APP_NVM_FEATURE_ENABLED == 1)
    101          extern void change_join_state_for_nvm();
    102          #endif
    103          extern fan_nwk_manager_sm_t fan_nwk_manager_app;
    104          /*Umesh : 30-01-2018*/
    105          extern bool upper_layer_started;
    106          extern volatile uint8_t load_wd;
    107          extern uint16_t icmv6_response_counter;
    108          extern uint8_t MACSecKey1[16];
    109          /*this varriable not used*/
    110          extern uint8_t send_udp(uint8_t *buf, uint16_t length);
    111          extern uint8_t key_id_index  ; 
    112          extern uint8_t relay_reply_flag;
    113          extern uint8_t authnt_interfac_id [8];
    114          extern uint8_t TANSIT_KMP_ID ;
    115          extern uint8_t trickle_IMIN;
    116          extern uint8_t trickle_IMAX;
    117          
    118          #ifdef WISUN_FAN_MAC  
    119          extern self_info_fan_mac_t mac_self_fan_info;
    120          extern fan_mac_security mac_key_list;
    121          #endif
    122          
    123          extern void App_factory_mode_channel_set();
    124          
    125          extern hif_t hif;
    126          
    127          /*
    128          ** =============================================================================
    129          ** External Function Prototypes
    130          ** =============================================================================
    131          */
    132          
    133          /*UDP*/
    134          extern uint8_t send_udp_packets(uint8_t* p_buff);
    135          extern void process_udp_port_register(uint8_t *buf, uint16_t length);
    136          
    137          /*PING*/
    138          extern void send_icmpv6(uint8_t *buf, uint16_t length);
    139          
    140          /*Umesh : 30-01-2018*/
    141          //extern uint8_t send_udp(uint8_t *buf, uint16_t length);
    142          extern  void mem_reverse_cpy(uint8_t* dest, uint8_t* src, uint16_t len );
    143          //extern void nvm_erase_node_basic_info( void );
    144          extern void set_mac_security_enable_disable(uint8_t enable_security_flag);
    145          /*this varriable not used*/
    146          
    147          extern uint8_t send_hif_conf_cb( uint8_t cmd_id,uint8_t status );
    148          extern uint8_t send_hif_seckey_cb( uint8_t cmd_id,uint8_t* seckey );
    149          extern void trigger_echo_request( uint8_t* p_buff  );
    150          extern uint8_t process_telec_set_operating_country( uint8_t CountryCode  ) ;
    151          //extern void trigger_udp_request( uint8_t* p_buff );
    152          extern void send_host_apd_bootup();
    153          /*Umesh :  30-01-2018*/
    154          extern void send_mac_addr(uint8_t *buff , uint16_t len);
    155          /*this fuctions was defined this file and extern also used????*/
    156          extern uint8_t generate_MAC_Security_Key (uint8_t live_gtk_key_index,uint16_t len);
    157          extern void set_mac_security_on_LBR(uint8_t *rec_buff, uint16_t len);
    158          extern void set_mac_security_on_router_node(uint8_t *rec_buff, uint16_t len);
    159          
    160          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
    161          extern void send_data_to_eapol_relay_process(uint8_t *payload ,uint16_t payload_length);
    162          extern void send_eapol_data_to_mac_request(uint8_t *eapol_data, uint16_t data_len);
    163          void send_eapol_packt_to_lbr(uint8_t *buff , uint16_t len , uint8_t *self_addr);
    164          #endif
    165          
    166          extern uint8_t is_send_as_udp(uint8_t *data_ptr);
    167          extern uint8_t get_current_join_state();
    168          void trickle_timer_inconsistency_pc(void);
    169          void trickle_timer_consistency_pc(void);
    170          extern void add_dev_desc_on_MAC_for_security(uint8_t* macAddrOfNeighbour);
    171          extern void reset_incoming_frame_counter_for_stale_key (uint8_t stale_key_index);
    172          uint8_t set_revoaction_key(uint8_t *revoaction_list, uint16_t len);
    173          uint8_t set_lbr_mac_lifetime_config (uint32_t pmk_lifetime,
    174                                               uint32_t ptk_lifetime,
    175                                               uint32_t gtk_lifetime,
    176                                               uint32_t gtk_new_activation_time,
    177                                               uint32_t revocation_lifetime_reduction);
    178          void send_all_param_info_req (void);
    179          
    180          #if(FAN_FRQ_HOPPING_FEATURE_ENABLED == 1)
    181          void fan_freq_hop_start_hopping (void *);
    182          #endif
    183          
    184          void send_dhcp_data_to_server(uint8_t* buff,uint16_t len);
    185          void set_key_life_time(uint8_t *buf,uint16_t len);
    186          void send_revocation_key(uint8_t *buff , uint16_t len);
    187          void send_gtk_update_indication(uint8_t *pBuff,uint16_t len);
    188          void send_mac_security_set_request(uint8_t *pBuff,uint16_t len);
    189          void set_seq_key(uint8_t live_key_id_index);
    190          void send_gtkhash_to_hostapd(uint8_t *buff , uint16_t len);
    191          int get_join_state (void);
    192          /*
    193          ** =============================================================================
    194          ** Public Variables Definitions
    195          ** =============================================================================
    196          **/
    197          

   \                                 In section .data, align 4
    198          uint8_t phyModeMapArr[8]={1,2,4,8,16,32,64,128};
   \                     phyModeMapArr:
   \        0x0   0x01 0x02          DC8 1, 2, 4, 8, 16, 32, 64, 128

   \              0x04 0x08    

   \              0x10 0x20    

   \              0x40 0x80

   \                                 In section .data, align 1
    199          uint8_t response_laye_ID = APP_DEF_LAYER_ID_TOOL;
   \                     response_laye_ID:
   \        0x0   0x02               DC8 2
    200          /*
    201          ** =============================================================================
    202          ** Public Function Prototypes
    203          ** =============================================================================
    204          */
    205          
    206          uint8_t gu2pcapp_capture_ns_conf(uint8_t status);
    207          void process_tx_sechedule_end(uint8_t);
    208          void process_tx_sechedule_start(uint8_t val);
    209          void fan_nwk_manager_init( );
    210          uint8_t gu2pcapp_node_config_set_conf( uint8_t status );
    211          
    212          
    213          /*
    214          ** =============================================================================
    215          ** Public Function Definitions
    216          ** =============================================================================
    217          */
    218          
    219          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    220          uint32_t ChangeEndianness(uint32_t value)
    221          {
   \                     ChangeEndianness: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    222              uint32_t result = 0;
   \        0x2   0x2000             MOVS     R0,#+0
    223              result |= (value & 0x000000FF) << 24;
   \        0x4   0xEA50 0x6001      ORRS     R0,R0,R1, LSL #+24
    224              result |= (value & 0x0000FF00) << 8;
   \        0x8   0x020A             LSLS     R2,R1,#+8
   \        0xA   0xF412 0x027F      ANDS     R2,R2,#0xFF0000
   \        0xE   0x4310             ORRS     R0,R2,R0
    225              result |= (value & 0x00FF0000) >> 8;
   \       0x10   0x000A             MOVS     R2,R1
   \       0x12   0x0A12             LSRS     R2,R2,#+8
   \       0x14   0xF412 0x427F      ANDS     R2,R2,#0xFF00
   \       0x18   0x4310             ORRS     R0,R2,R0
    226              result |= (value & 0xFF000000) >> 24;
   \       0x1A   0xEA50 0x6011      ORRS     R0,R0,R1, LSR #+24
    227              return result;
   \       0x1E   0x4770             BX       LR
    228          }
    229          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    230          enet_msg_t* allocate_hif_msg( uint16_t length )
    231          {
   \                     allocate_hif_msg: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    232              enet_msg_t *msg = NULL;
   \        0x4   0x2500             MOVS     R5,#+0
    233          
    234              msg = (enet_msg_t *) app_bm_alloc( length + 6 );// 5 for including next and data_length members
   \        0x6   0x1DA0             ADDS     R0,R4,#+6
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x.... 0x....      BL       app_bm_alloc
    235          
    236              if (msg != NULL)
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD000             BEQ.N    ??allocate_hif_msg_0
    237              {
    238                  msg->data_length = length;
   \       0x12   0x8084             STRH     R4,[R0, #+4]
    239              }
    240              return msg;
   \                     ??allocate_hif_msg_0: (+1)
   \       0x14   0xBD32             POP      {R1,R4,R5,PC}
    241          }
    242          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    243          static void send_cmd_not_support()
    244          {
   \                     send_cmd_not_support: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    245            uint8_t host_pkt[2];
    246            host_pkt[0] = ACTIVE_CMD_NOT_SUPPORTED;
   \        0x2   0x20DC             MOVS     R0,#+220
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    247            host_pkt[1] = 1; 
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xF88D 0x0001      STRB     R0,[SP, #+1]
    248            hif_send_msg_up(host_pkt,2,response_laye_ID,PROTOCOL_ID_FOR_APP);
   \        0xE   0x2301             MOVS     R3,#+1
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x14   0x7802             LDRB     R2,[R0, #+0]
   \       0x16   0x2102             MOVS     R1,#+2
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x.... 0x....      BL       hif_send_msg_up
    249           
    250          }
   \       0x1E   0xBD01             POP      {R0,PC}
    251          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    252          void free_hif_msg( enet_msg_t * msgp )
    253          {
   \                     free_hif_msg: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    254              app_bm_free((uint8_t*)msgp);
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x.... 0x....      BL       app_bm_free
    255          }
   \        0xA   0xBD10             POP      {R4,PC}
    256          
    257          
    258          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    259          void APPhifForToolTest_Init(void)
    260          {
   \                     APPhifForToolTest_Init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    261            hif_register_parser
    262               (
    263                    &hif,
    264                    &hif_fan_test,
    265                    APP_DEF_LAYER_ID_TOOL,
    266                    hif_2_App_Interface_cb
    267               );
   \        0x2   0x.... 0x....      ADR.W    R3,hif_2_App_Interface_cb
   \        0x6   0x2202             MOVS     R2,#+2
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0x10   0x.... 0x....      BL       hif_register_parser
    268            
    269          
    270          }
   \       0x14   0xBD01             POP      {R0,PC}
    271          
    272          /*----------------------------------------------------------------------------*/
    273          
    274          //void process_set_brodcast_timing_info_ie(uint8_t *buf, uint16_t length)
    275          //{
    276          //  mem_rev_cpy((uint8_t*)&fan_nwk_manager_app.fan_mac_header_ie.bt_ie.broadcast_time_interval,buf,2);
    277          //  mem_rev_cpy((uint8_t*)&fan_nwk_manager_app.fan_mac_header_ie.bt_ie.broadcast_fraction_interval_offset,&buf[2],4);
    278          //  fan_nwk_manager_app.fan_mac_header_ie.bt_ie.length = length;
    279          //  send_hif_conf_cb(FAN_BROADCAST_TIMING_SET_CONFIRM,0x00);
    280          //}
    281          
    282          
    283          /*******************************************************************************
    284                    Application to HIF Send 
    285          *******************************************************************************/
    286          
    287          /*----------------------------------------------------------------------------*/
    288          
    289          
    290          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    291          uint8_t gu2pcapp_node_config_set_conf( uint8_t status )
    292          {
   \                     gu2pcapp_node_config_set_conf: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x2105             MOVS     R1,#+5
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x466D             MOV      R5,SP
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       __aeabi_memset
    293            uint8_t hif_Send_buff [5] = {0};
    294            uint8_t* buf = &hif_Send_buff[0];
   \       0x10   0x4668             MOV      R0,SP
    295            
    296            
    297            *buf++ = 0xE1;
   \       0x12   0x21E1             MOVS     R1,#+225
   \       0x14   0x7001             STRB     R1,[R0, #+0]
   \       0x16   0x1C40             ADDS     R0,R0,#+1
    298            *buf++ = status;//status
   \       0x18   0x7004             STRB     R4,[R0, #+0]
   \       0x1A   0x1C40             ADDS     R0,R0,#+1
    299            *buf++ = DUMMY_COMPORT;//Dummy Comport       
   \       0x1C   0x2155             MOVS     R1,#+85
   \       0x1E   0x7001             STRB     R1,[R0, #+0]
   \       0x20   0x1C45             ADDS     R5,R0,#+1
    300            hif_send_msg_up(&hif_Send_buff[0], 2,response_laye_ID,PROTOCOL_ID_FOR_APP);
   \       0x22   0x2301             MOVS     R3,#+1
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x28   0x7802             LDRB     R2,[R0, #+0]
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       hif_send_msg_up
    301            return 0;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0xBD3E             POP      {R1-R5,PC}
    302          }
    303          
    304          /*----------------------------------------------------------------------------*/
    305          

   \                                 In section .text, align 2, keep-with-next
    306          uint8_t gu2pcapp_process_para_problem_msg_ind
    307          (
    308           uint8_t type,
    309           uint8_t code,
    310           uint16_t checksum,
    311           uint16_t payload_len,
    312           uint8_t* p_payload
    313          )
    314          {
   \                     gu2pcapp_process_para_problem_msg_ind: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0x46E8             MOV      R8,SP
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0x.... 0x....      BL       __aeabi_memset
    315            
    316           // Raka .. [23-Nov-2017]
    317            /*
    318                Since following 2 files coming as zero
    319            I have taken the static Variable
    320             uint16_t payload_len,
    321           uint8_t* p_payload
    322            */
    323              uint8_t hif_Send_buff [8] = {0};
    324              uint8_t* buf = &hif_Send_buff [0];
   \       0x18   0x4668             MOV      R0,SP
    325          
    326          
    327              *buf++ = ENET_2_APP_PARA_PROB_IND_CMD_ID;
   \       0x1A   0x2195             MOVS     R1,#+149
   \       0x1C   0x7001             STRB     R1,[R0, #+0]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
    328              *buf++ = type;
   \       0x20   0x7004             STRB     R4,[R0, #+0]
   \       0x22   0x1C40             ADDS     R0,R0,#+1
    329              *buf++ = code;
   \       0x24   0x7005             STRB     R5,[R0, #+0]
   \       0x26   0x1C40             ADDS     R0,R0,#+1
    330              put_ushort(buf,checksum);
   \       0x28   0x7006             STRB     R6,[R0, #+0]
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0xB289             UXTH     R1,R1
   \       0x2E   0x0A09             LSRS     R1,R1,#+8
   \       0x30   0x7041             STRB     R1,[R0, #+1]
    331              buf += 2; 
   \       0x32   0x1C80             ADDS     R0,R0,#+2
    332              *buf++ = DUMMY_COMPORT;//Dummy Comport     
   \       0x34   0x2155             MOVS     R1,#+85
   \       0x36   0x7001             STRB     R1,[R0, #+0]
   \       0x38   0xF110 0x0801      ADDS     R8,R0,#+1
    333                   
    334              hif_send_msg_up(&hif_Send_buff[0], 5,response_laye_ID,PROTOCOL_ID_FOR_APP);
   \       0x3C   0x2301             MOVS     R3,#+1
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x42   0x7802             LDRB     R2,[R0, #+0]
   \       0x44   0x2105             MOVS     R1,#+5
   \       0x46   0x4668             MOV      R0,SP
   \       0x48   0x.... 0x....      BL       hif_send_msg_up
    335              return 0;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    336          }
    337          
    338          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    339          uint8_t gu2pcapp_send_dest_unreachable_icmp_ind
    340          (
    341           uint8_t type,
    342           uint8_t code,
    343           uint16_t checksum,
    344           uint16_t payload_len,
    345           uint8_t* p_payload
    346          )
    347          {
   \                     gu2pcapp_send_dest_unreachable_icmp_ind: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0x2108             MOVS     R1,#+8
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0x46E8             MOV      R8,SP
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0x.... 0x....      BL       __aeabi_memset
    348               
    349               // Raka .. [23-Nov-2017]
    350            /*
    351                Since following 2 files coming as zero
    352            I have taken the static Variable
    353             uint16_t payload_len,
    354           uint8_t* p_payload
    355            */
    356              uint8_t hif_Send_buff [8] = {0};
    357              uint8_t* buf = &hif_Send_buff [0];
   \       0x18   0x4668             MOV      R0,SP
    358          
    359          
    360              *buf++ = ENET_2_APP_DEST_UNREACHABLE_CMD_ID;
   \       0x1A   0x2194             MOVS     R1,#+148
   \       0x1C   0x7001             STRB     R1,[R0, #+0]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
    361              *buf++ = type;
   \       0x20   0x7004             STRB     R4,[R0, #+0]
   \       0x22   0x1C40             ADDS     R0,R0,#+1
    362              *buf++ = code;
   \       0x24   0x7005             STRB     R5,[R0, #+0]
   \       0x26   0x1C40             ADDS     R0,R0,#+1
    363              put_ushort(buf,checksum);
   \       0x28   0x7006             STRB     R6,[R0, #+0]
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0xB289             UXTH     R1,R1
   \       0x2E   0x0A09             LSRS     R1,R1,#+8
   \       0x30   0x7041             STRB     R1,[R0, #+1]
    364              buf += 2; 
   \       0x32   0x1C80             ADDS     R0,R0,#+2
    365              *buf++ = DUMMY_COMPORT;//Dummy Comport 
   \       0x34   0x2155             MOVS     R1,#+85
   \       0x36   0x7001             STRB     R1,[R0, #+0]
   \       0x38   0xF110 0x0801      ADDS     R8,R0,#+1
    366              hif_send_msg_up(&hif_Send_buff[0], 5,response_laye_ID,PROTOCOL_ID_FOR_APP);
   \       0x3C   0x2301             MOVS     R3,#+1
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x42   0x7802             LDRB     R2,[R0, #+0]
   \       0x44   0x2105             MOVS     R1,#+5
   \       0x46   0x4668             MOV      R0,SP
   \       0x48   0x.... 0x....      BL       hif_send_msg_up
    367               return 0;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    368          }
    369          

   \                                 In section .text, align 2, keep-with-next
    370          uint8_t gu2pcapp_send_ns_ind
    371          (
    372           uint8_t type,
    373           uint8_t code,
    374           uint16_t checksum,
    375           uip_ipaddr_t* p_tgt_addr,
    376           uint8_t icmpv6_opt_type,
    377           uint8_t icmpv6_opt_len,
    378           uip_lladdr_t* p_tlla
    379          )
    380          {
   \                     gu2pcapp_send_ns_ind: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0004             MOVS     R4,R0
    381          //     //capture_nans_and_send = 0;
    382          //     enet_msg_t* msg = allocate_hif_msg( 40 );
    383          //     uint8_t* buf = msg->data;	
    384          //
    385          //     if(msg != NULL)
    386          //     {
    387          //          //*buf++ = ENET_2_APP_NA_IND;
    388          //          
    389          //          //#define ENET_2_APP_NA_IND_CMD_ID                     		0x05
    390          ////#define ENET_2_APP_NS_IND_CMD_ID                     		0x06
    391          //          *buf++ = ENET_2_APP_NS_IND_CMD_ID;
    392          //          
    393          //          *buf++ = type;
    394          //          *buf++ = code;
    395          //          put_ushort(buf,checksum);
    396          //         buf += 2; 
    397          //
    398          //          memcpy(buf,p_tgt_addr->u8,sizeof(uip_ipaddr_t));
    399          //          buf += sizeof(uip_ipaddr_t);
    400          //
    401          //          *buf++ = icmpv6_opt_type;
    402          //          *buf++ = icmpv6_opt_len;
    403          //          
    404          //          memcpy(buf,p_tlla->addr,sizeof(uip_lladdr_t));
    405          //          buf += sizeof(uip_lladdr_t);
    406          //
    407          //          msg->data_length  = buf - msg->data;
    408          //
    409          //          hif_send_msg_up(msg->data,msg->data_length-1,6);
    410          //         
    411          //          free_hif_msg( msg );
    412          //     }
    413          
    414               return 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xBC10             POP      {R4}
   \        0x8   0x4770             BX       LR
    415            
    416          }
    417          /*----------------------------------------------------------------------------*/
    418          

   \                                 In section .text, align 2, keep-with-next
    419          uint8_t gu2pcapp_send_na_ind
    420          (
    421           uint8_t type,
    422           uint8_t code,
    423           uint16_t checksum,
    424           uint8_t osr_flag,
    425           uip_ipaddr_t* p_tgt_addr,
    426           uint8_t icmpv6_opt_type,
    427           uint8_t icmpv6_opt_len,
    428           uip_lladdr_t* p_tlla
    429          )
    430          {
   \                     gu2pcapp_send_na_ind: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0004             MOVS     R4,R0
    431          ////    #define ENET_2_APP_NA_IND                      0x05
    432          ////  // send echo reply
    433          ////     //capture_nans_and_send = 0;
    434          ////     enet_msg_t* msg = allocate_hif_msg( 40 );
    435          ////     uint8_t* buf = msg->data;	
    436          ////
    437          ////     if(msg != NULL)
    438          ////     {
    439          ////          //*buf++ = ENET_2_APP_NA_IND;
    440          ////          
    441          ////          //#define ENET_2_APP_NA_IND_CMD_ID                     		0x05
    442          //////#define ENET_2_APP_NS_IND_CMD_ID                     		0x06
    443          ////          *buf++ = ENET_2_APP_NA_IND_CMD_ID;
    444          ////          
    445          ////          *buf++ = type;
    446          ////          *buf++ = code;
    447          ////          put_ushort(buf,checksum);
    448          ////         buf += 2; 
    449          ////          *buf++ = osr_flag;
    450          ////          
    451          ////          memcpy(buf,p_tgt_addr->u8,sizeof(uip_ipaddr_t));
    452          ////          buf += sizeof(uip_ipaddr_t);
    453          ////          
    454          ////          *buf++ = icmpv6_opt_type;
    455          ////          *buf++ = icmpv6_opt_len;
    456          ////          
    457          ////          memcpy(buf,p_tlla->addr,sizeof(uip_lladdr_t));
    458          ////          buf += sizeof(uip_lladdr_t);
    459          ////
    460          ////          msg->data_length  = buf - msg->data;
    461          ////          hif_send_msg_up(msg->data,msg->data_length-1,6);         
    462          ////          free_hif_msg( msg );
    463          ////     }
    464          //
    465               return 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0xBC10             POP      {R4}
   \        0x8   0x4770             BX       LR
    466          }
    467          /*----------------------------------------------------------------------------*/
    468          

   \                                 In section .text, align 2, keep-with-next
    469          uint8_t gu2pcapp_send_echo_req_res
    470          (
    471           uint8_t type,
    472           uint8_t code,
    473           uint16_t checksum,
    474           uint16_t id,
    475           uint16_t seq_num,
    476           uint16_t data_len,        
    477           uint8_t* p_data
    478          )
    479          {
   \                     gu2pcapp_send_echo_req_res: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB082             SUB      SP,SP,#+8
   \        0x6   0x0007             MOVS     R7,R0
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x4699             MOV      R9,R3
   \        0xC   0x9D0C             LDR      R5,[SP, #+48]
   \        0xE   0x9E0D             LDR      R6,[SP, #+52]
    480            /* Debdeep:: 07-sep-2018:: 15 bytes more is added for buffer allocation length.
    481               Because we store type, code, checksum, seq num, response counter and data length 
    482               along with ping data */
    483            enet_msg_t* msg = allocate_hif_msg (data_len + 15 + sizeof(enet_msg_t));
   \       0x10   0xF116 0x0017      ADDS     R0,R6,#+23
   \       0x14   0xB280             UXTH     R0,R0
   \       0x16   0x.... 0x....      BL       allocate_hif_msg
   \       0x1A   0x0004             MOVS     R4,R0
    484            
    485            uint8_t* buf = msg->data;	
   \       0x1C   0xF114 0x0A06      ADDS     R10,R4,#+6
    486            
    487            if(msg != NULL)
   \       0x20   0x2C00             CMP      R4,#+0
   \       0x22   0xD069             BEQ.N    ??gu2pcapp_send_echo_req_res_0
    488            {    
    489              *buf++ = ((type==ICMP6_ECHO_REPLY)? RECV_ICMPV6_REPLY_IND:RECV_ICMPv6_REQ);
   \       0x24   0xF11A 0x0001      ADDS     R0,R10,#+1
   \       0x28   0x0039             MOVS     R1,R7
   \       0x2A   0xB2C9             UXTB     R1,R1
   \       0x2C   0x2981             CMP      R1,#+129
   \       0x2E   0xD101             BNE.N    ??gu2pcapp_send_echo_req_res_1
   \       0x30   0x2157             MOVS     R1,#+87
   \       0x32   0xE000             B.N      ??gu2pcapp_send_echo_req_res_2
   \                     ??gu2pcapp_send_echo_req_res_1: (+1)
   \       0x34   0x2154             MOVS     R1,#+84
   \                     ??gu2pcapp_send_echo_req_res_2: (+1)
   \       0x36   0xF88A 0x1000      STRB     R1,[R10, #+0]
    490              *buf++ = type;
   \       0x3A   0x7007             STRB     R7,[R0, #+0]
   \       0x3C   0x1C40             ADDS     R0,R0,#+1
    491              *buf++ = code;
   \       0x3E   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \       0x42   0x7001             STRB     R1,[R0, #+0]
   \       0x44   0x1C40             ADDS     R0,R0,#+1
    492              put_ushort(buf,checksum);
   \       0x46   0xF880 0x8000      STRB     R8,[R0, #+0]
   \       0x4A   0x4641             MOV      R1,R8
   \       0x4C   0xB289             UXTH     R1,R1
   \       0x4E   0x0A09             LSRS     R1,R1,#+8
   \       0x50   0x7041             STRB     R1,[R0, #+1]
    493              buf += 2;
   \       0x52   0x1C80             ADDS     R0,R0,#+2
    494              put_ushort_BE(buf,id);
   \       0x54   0xF880 0x9001      STRB     R9,[R0, #+1]
   \       0x58   0x4649             MOV      R1,R9
   \       0x5A   0xB289             UXTH     R1,R1
   \       0x5C   0x0A09             LSRS     R1,R1,#+8
   \       0x5E   0x7001             STRB     R1,[R0, #+0]
    495              buf += 2;
   \       0x60   0x1C80             ADDS     R0,R0,#+2
    496              put_ushort_BE(buf,seq_num);
   \       0x62   0x7045             STRB     R5,[R0, #+1]
   \       0x64   0x0029             MOVS     R1,R5
   \       0x66   0xB289             UXTH     R1,R1
   \       0x68   0x0A09             LSRS     R1,R1,#+8
   \       0x6A   0x7001             STRB     R1,[R0, #+0]
    497              buf += 2;
   \       0x6C   0xF110 0x0A02      ADDS     R10,R0,#+2
    498              ++icmv6_response_counter;
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x74   0x8800             LDRH     R0,[R0, #+0]
   \       0x76   0x1C40             ADDS     R0,R0,#+1
   \       0x78   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \       0x7C   0x8008             STRH     R0,[R1, #+0]
    499              if(icmv6_response_counter == 0xFFFF)
   \       0x7E   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x82   0x8800             LDRH     R0,[R0, #+0]
   \       0x84   0xF64F 0x71FF      MOVW     R1,#+65535
   \       0x88   0x4288             CMP      R0,R1
   \       0x8A   0xD103             BNE.N    ??gu2pcapp_send_echo_req_res_3
    500              {
    501                icmv6_response_counter = 0x00;
   \       0x8C   0x2000             MOVS     R0,#+0
   \       0x8E   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \       0x92   0x8008             STRH     R0,[R1, #+0]
    502              }
    503              mem_rev_cpy(buf,(uint8_t*)&icmv6_response_counter,2);
   \                     ??gu2pcapp_send_echo_req_res_3: (+1)
   \       0x94   0x2202             MOVS     R2,#+2
   \       0x96   0x.... 0x....      LDR.W    R1,??DataTable15_5
   \       0x9A   0x4650             MOV      R0,R10
   \       0x9C   0x.... 0x....      BL       mem_rev_cpy
    504              buf += 2;
   \       0xA0   0xF11A 0x0002      ADDS     R0,R10,#+2
    505              
    506              put_ushort_BE(buf,data_len);
   \       0xA4   0x7046             STRB     R6,[R0, #+1]
   \       0xA6   0x0031             MOVS     R1,R6
   \       0xA8   0xB289             UXTH     R1,R1
   \       0xAA   0x0A09             LSRS     R1,R1,#+8
   \       0xAC   0x7001             STRB     R1,[R0, #+0]
    507              buf += 2;
   \       0xAE   0xF110 0x0A02      ADDS     R10,R0,#+2
    508              
    509              memcpy(buf,p_data,data_len);
   \       0xB2   0x0030             MOVS     R0,R6
   \       0xB4   0xB280             UXTH     R0,R0
   \       0xB6   0x9001             STR      R0,[SP, #+4]
   \       0xB8   0x980E             LDR      R0,[SP, #+56]
   \       0xBA   0x9000             STR      R0,[SP, #+0]
   \       0xBC   0x46D3             MOV      R11,R10
   \       0xBE   0x9A01             LDR      R2,[SP, #+4]
   \       0xC0   0x9900             LDR      R1,[SP, #+0]
   \       0xC2   0x4658             MOV      R0,R11
   \       0xC4   0x.... 0x....      BL       __aeabi_memcpy
    510              buf += data_len;
   \       0xC8   0x0030             MOVS     R0,R6
   \       0xCA   0xB280             UXTH     R0,R0
   \       0xCC   0x4450             ADD      R0,R10,R0
    511              *buf++ = DUMMY_COMPORT;
   \       0xCE   0x2155             MOVS     R1,#+85
   \       0xD0   0x7001             STRB     R1,[R0, #+0]
   \       0xD2   0xF110 0x0A01      ADDS     R10,R0,#+1
    512              msg->data_length  = buf - msg->data;
   \       0xD6   0x1DA0             ADDS     R0,R4,#+6
   \       0xD8   0xEBBA 0x0000      SUBS     R0,R10,R0
   \       0xDC   0x80A0             STRH     R0,[R4, #+4]
    513              hif_send_msg_up(msg->data,msg->data_length-1,response_laye_ID,PROTOCOL_ID_FOR_APP);         
   \       0xDE   0x2301             MOVS     R3,#+1
   \       0xE0   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0xE4   0x7802             LDRB     R2,[R0, #+0]
   \       0xE6   0x88A0             LDRH     R0,[R4, #+4]
   \       0xE8   0x1E41             SUBS     R1,R0,#+1
   \       0xEA   0xB289             UXTH     R1,R1
   \       0xEC   0x1DA0             ADDS     R0,R4,#+6
   \       0xEE   0x.... 0x....      BL       hif_send_msg_up
    514              free_hif_msg( msg );
   \       0xF2   0x0020             MOVS     R0,R4
   \       0xF4   0x.... 0x....      BL       free_hif_msg
    515            }
    516            return 0;
   \                     ??gu2pcapp_send_echo_req_res_0: (+1)
   \       0xF8   0x2000             MOVS     R0,#+0
   \       0xFA   0xE8BD 0x8FFE      POP      {R1-R11,PC}
    517          }
    518          /*----------------------------------------------------------------------------*/
    519          
    520          //uint8_t App_UDP_Data_Indication_cb(
    521          //         uint8_t* data,
    522          //         uint16_t len, 
    523          //         uint8_t* p_src_ll_addr, 
    524          //         uint16_t sender_port )
    525          //{
    526          //    enet_msg_t* msg = allocate_hif_msg( len + 10 );
    527          //     uint8_t* buf = msg->data;	
    528          //    
    529          //     if(msg != NULL)
    530          //     {
    531          //          *buf++ = APP_2_FAN_UDP_RCV_CB;// cmd id
    532          //          
    533          //          mem_reverse_cpy( buf,p_src_ll_addr,8 );
    534          //          buf+=8;
    535          //          put_ushort_BE(buf,sender_port); buf+=2;
    536          //          put_ushort_BE(buf,len); buf+=2;
    537          //          memcpy( buf,data,len );
    538          //          buf += len;
    539          //
    540          //          msg->data_length  = buf - msg->data;
    541          //          hif_send_msg_up(msg->data,msg->data_length-1,6);         
    542          //          free_hif_msg( msg );
    543          //     }
    544          //  
    545          //     return 0;
    546          //}
    547          /*----------------------------------------------------------------------------*/
    548          
    549          /*------------set_fan_api as per given spec-----------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    550          void process_set_node_start_stop(uint8_t *buf, uint16_t length)
    551          {
   \                     process_set_node_start_stop: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    552            
    553             //uint8_t status = 0xFF;
    554            uint8_t node_start = *buf; //*(buf+3); // ENUM From Wi-SUN Test Bench is of 4 Bytes
   \        0x6   0x7826             LDRB     R6,[R4, #+0]
    555            
    556            node_start_stop( node_start);
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0xB2C0             UXTB     R0,R0
   \        0xC   0x.... 0x....      BL       node_start_stop
    557           
    558          }
   \       0x10   0xBD70             POP      {R4-R6,PC}
    559          /*----------------------------------------------------------------------------*/
    560          
    561          
    562          /*-----------------------start for TLV FORMAT-------------------------------*/
    563          //void process_set_mac_unicast_api_tbc(uint8_t *buf, uint16_t length)
    564          //{
    565          //  uint8_t status = 0xFF;
    566          //  uint8_t channel_index = 0;
    567          //  uint8_t dwell_interval = 0x00;
    568          //  uint8_t channel_function = 0x00;
    569          //  uint8_t exc_chnl_cont = 0x00;
    570          //  uint8_t excluded_channel_Range = 0x00;
    571          //  uint16_t excluded_channel[20] = {0};
    572          //  uint8_t u_ex_ch_mask[17] = {0};
    573          //
    574          //  uint8_t offset = 0;
    575          //  while(length > offset)
    576          //  {
    577          //    uint8_t var_type = *buf++;
    578          //    uint16_t rcvd_length = 0x00;
    579          //    
    580          //    if(var_type == DWELL_INTERVAL_US)
    581          //    {
    582          //      rcvd_length =  *buf++;
    583          //      dwell_interval = *buf;
    584          //      buf += rcvd_length;
    585          //    }
    586          //    else if(var_type == CHANNEL_FUNCTION_US)
    587          //    {
    588          //      rcvd_length =  *buf++;
    589          //      channel_function = *buf;
    590          //      buf += rcvd_length;
    591          //    }
    592          //    else if(var_type == EXC_CHAN_RANGE_US)
    593          //    {
    594          //      rcvd_length =  *buf++;;
    595          //      uint8_t temp_len = rcvd_length;
    596          //      
    597          //      if(rcvd_length>0)
    598          //        exc_chnl_cont = 1;
    599          //     
    600          //      while(temp_len!=0)
    601          //      {
    602          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    603          //        buf +=2;
    604          //        temp_len-=2;
    605          //        excluded_channel_Range++;
    606          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)                   //Arjun: this logic is not making excluded_channel_Range 1 for a pair of range
    607          ////        {
    608          ////          excluded_channel_Range++;
    609          ////          exc_chnl_cont = 1;
    610          ////        }
    611          //      }
    612          //      excluded_channel_Range = (excluded_channel_Range/2);
    613          //    }
    614          //    else if(var_type == EXC_CHAN_MASK_US)
    615          //    {
    616          //        rcvd_length =  *buf++;
    617          //        uint8_t temp_len = rcvd_length;
    618          //        
    619          //      if(rcvd_length != 0)
    620          //      {
    621          //        exc_chnl_cont = 2;
    622          ///* Debdeep :: Excluded channel mask should be set in while loop :: problem occured while testing with LnG */
    623          //        while(temp_len != 0x00)
    624          //        {
    625          //          mem_rev_cpy((uint8_t *)&u_ex_ch_mask[channel_index++],buf,1);
    626          //          buf +=1;
    627          //          temp_len-=1;
    628          //          excluded_channel_Range++;
    629          //        }
    630          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)
    631          ////        {
    632          ////          excluded_channel_Range++;
    633          ////          //exc_chnl_cont = 2;
    634          ////        }
    635          //      }
    636          //
    637          //    }
    638          //    offset += (rcvd_length+1+1);//TYPE+LENTHBYTE
    639          //  }
    640          //   status = set_mac_unicast_chan_plan(dwell_interval,
    641          //                                     channel_function,
    642          //                                     exc_chnl_cont,
    643          //                                     excluded_channel_Range,
    644          //                                     excluded_channel,
    645          //                                     u_ex_ch_mask);
    646          //  
    647          //  send_hif_conf_cb(SET_MAC_UNICAST_API_CONF,status);  
    648          //}
    649          
    650          /*----------------------------------------------------------------------------*/
    651          //void process_set_mac_broadcast_api_tbc(uint8_t *buf, uint16_t length)
    652          //{   
    653          //  uint8_t status = 0xFF;
    654          //  uint8_t channel_index = 0;  
    655          //  uint32_t broad_cast_intver = 0x00000000;
    656          //  uint16_t b_sech_indinti = 0x0000;
    657          //  uint8_t dwell_interval = 0x00;
    658          //  uint8_t channel_function = 0x00;
    659          //  uint8_t exc_chnl_cont = 0x00;
    660          //  uint8_t excluded_channel_Range = 0x00;
    661          //  uint16_t excluded_channel[20] = {0};
    662          //  uint8_t b_ex_ch_mask[17] = {0};
    663          //  
    664          //    uint8_t offset = 0;
    665          //  while(length > offset)
    666          //  {
    667          //    uint8_t var_type = *buf++;
    668          //    uint16_t rcvd_length = 0x00;
    669          //    if(var_type == BCAST_INTERVAL_BS)
    670          //    {
    671          //      rcvd_length =  *buf++;
    672          //      mem_rev_cpy((uint8_t *)&broad_cast_intver,&buf[0],4);
    673          //      buf += rcvd_length;
    674          //    }
    675          //    else if(var_type == BCAST_SCH_IDNT_BS)
    676          //    {
    677          //      rcvd_length =  *buf++;
    678          //      mem_rev_cpy((uint8_t *)&b_sech_indinti,&buf[0],2);
    679          //      buf += rcvd_length;
    680          //    }
    681          //    else if(var_type == DWELL_INTERVAL_BS)
    682          //    {
    683          //      rcvd_length =  *buf++;
    684          //      dwell_interval = *buf;
    685          //      buf += rcvd_length;
    686          //    }
    687          //    else if(var_type == CHANNEL_FUNCTION_BS)
    688          //    {
    689          //      rcvd_length =  *buf++;
    690          //      channel_function = *buf;
    691          //      buf += rcvd_length;
    692          //    }
    693          //    else if(var_type == EXC_CHAN_RANGE_BS)
    694          //    {
    695          //      rcvd_length =  *buf++;;
    696          //      uint8_t temp_len = rcvd_length;
    697          //      if(rcvd_length>0)
    698          //        exc_chnl_cont = 1;
    699          //      
    700          //      while(temp_len!=0)
    701          //      {
    702          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    703          //        buf +=2;
    704          //        temp_len-=2;
    705          //        excluded_channel_Range++;
    706          ////        if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)                   //Arjun: this logic is not making excluded_channel_Range 1 for a pair of range
    707          ////        {
    708          ////        {
    709          ////          excluded_channel_Range++;
    710          ////          exc_chnl_cont = 1;
    711          ////        }
    712          //      }
    713          //      excluded_channel_Range = (excluded_channel_Range/2);
    714          //    }
    715          //    else if(var_type == EXC_CHAN_MASK_BS)
    716          //    {
    717          //        rcvd_length =  *buf++;
    718          //        uint8_t temp_len = rcvd_length;
    719          //        
    720          //      if(rcvd_length != 0)
    721          //      {
    722          //        exc_chnl_cont = 2;
    723          //        mem_rev_cpy((uint8_t *)&excluded_channel[channel_index++],buf,2);
    724          //        buf +=2;
    725          //        temp_len-=2;
    726          //         if((excluded_channel[0] )&& (excluded_channel[1] )!= 0x000)
    727          //          {
    728          //            excluded_channel_Range++;
    729          //            exc_chnl_cont = 2;
    730          //          }
    731          //      }
    732          //      
    733          //    }
    734          //    offset += (rcvd_length+1+1);//TYPE+LENTHBYTE
    735          //  }
    736          //  
    737          //  status =  set_mac_bcast_chan_plan(broad_cast_intver,
    738          //                                     b_sech_indinti,
    739          //                                     dwell_interval,
    740          //                                     channel_function,
    741          //                                     exc_chnl_cont,
    742          //                                     excluded_channel_Range,
    743          //                                     excluded_channel,
    744          //                                     b_ex_ch_mask);
    745          //  
    746          //  send_hif_conf_cb(SET_MAC_BROADCAST_API_CONF,status);
    747          //}
    748          
    749          /*----------------------------------------------------------------------------*/
    750          //void process_set_mac_unicast_api(uint8_t *buf, uint16_t length)
    751          //{
    752          //   uint8_t status = 0xFF;
    753          //  uint8_t channel_index = 0;
    754          //  uint8_t dwell_interval = *buf++;
    755          //  uint8_t channel_function = *buf++;
    756          //  uint8_t exc_chnl_cont = 0x00;
    757          //  uint8_t excluded_channel_Range = *buf++;
    758          //  uint16_t excluded_channel[20] = {0};
    759          //  uint8_t u_ex_ch_mask[17] = {0};
    760          // if(excluded_channel_Range != 0x00)
    761          // {
    762          //  for(int i =1 ; i<= excluded_channel_Range;i++)
    763          //  {
    764          //    
    765          //    excluded_channel[channel_index++] = *buf++;
    766          //    excluded_channel[channel_index++] = *buf++;
    767          //    exc_chnl_cont = 1;
    768          //  }
    769          // }
    770          //else if(excluded_channel_Range == 0x00)
    771          //{
    772          //  if(*buf != 0x00)
    773          //    {
    774          //      memcpy(u_ex_ch_mask,buf,16);
    775          //      exc_chnl_cont = 2;
    776          //    }
    777          //}
    778          //   status = set_mac_unicast_chan_plan(dwell_interval,
    779          //                                     channel_function,
    780          //                                     exc_chnl_cont,
    781          //                                     excluded_channel_Range,
    782          //                                     excluded_channel,
    783          //                                     u_ex_ch_mask);
    784          //  
    785          //  send_hif_conf_cb(SET_MAC_UNICAST_API_CONF,status);  
    786          //}
    787          /*----------------------------------------------------------------------------*/
    788          //void process_set_mac_broadcast_api(uint8_t *buf, uint16_t length)
    789          //{
    790          //   uint8_t status = 0xFF;
    791          //  uint8_t channel_index = 0;  
    792          //  uint32_t broad_cast_intver = 0x00000000;
    793          //  uint16_t b_sech_indinti = 0x0000;
    794          //  mem_rev_cpy((uint8_t *)&broad_cast_intver,&buf[0],4);
    795          //  buf+=4;
    796          //  mem_rev_cpy((uint8_t *)&b_sech_indinti,&buf[0],2);
    797          //  buf+=2;
    798          //  uint8_t dwell_interval = *buf++;
    799          //  uint8_t channel_function = *buf++;
    800          //  uint8_t exc_chnl_cont = 0x00;//*buf++;
    801          //  uint8_t excluded_channel_Range = *buf++;
    802          //  uint16_t excluded_channel[20] = {0};
    803          //  uint8_t b_ex_ch_mask[17] = {0};
    804          //  
    805          // if(excluded_channel_Range != 0x00)
    806          // {
    807          //  for(int i =1 ; i<= excluded_channel_Range;i++)
    808          //  {
    809          //    
    810          //    excluded_channel[channel_index++] = *buf++;
    811          //    excluded_channel[channel_index++] = *buf++;
    812          //    exc_chnl_cont = 1;
    813          //  }
    814          // }
    815          //else if(excluded_channel_Range == 0x00)
    816          //{
    817          //    if(*buf != 0x00)
    818          //    {
    819          //        memcpy(b_ex_ch_mask,buf,16);
    820          //        exc_chnl_cont = 2;
    821          //    }  
    822          //}
    823          //  
    824          //  status =  set_mac_bcast_chan_plan(broad_cast_intver,
    825          //                                     b_sech_indinti,
    826          //                                     dwell_interval,
    827          //                                     channel_function,
    828          //                                     exc_chnl_cont,
    829          //                                     excluded_channel_Range,
    830          //                                     excluded_channel,
    831          //                                     b_ex_ch_mask);
    832          //  
    833          //  send_hif_conf_cb(SET_MAC_BROADCAST_API_CONF,status);
    834          //}
    835          /*----------------------------------------------------------------------------*/
    836          
    837          /*----------------------------------------------------------------------------*/
    838          

   \                                 In section .text, align 2, keep-with-next
    839          void process_set_mac_reg_op_api(uint8_t *buf, uint16_t length)
    840          {
    841            
    842          //   uint8_t status = 0xFF;
    843          //  uint8_t reg_domain = *buf++;
    844          //  uint8_t oper_class = *buf++;
    845          //  status = set_mac_chan_plan_reg_op(reg_domain, oper_class);
    846          //  send_hif_conf_cb(SET_MAC_CHANNEL_PLAN_REG_OP_API_CONF,status);  
    847          }
   \                     process_set_mac_reg_op_api: (+1)
   \        0x0   0x4770             BX       LR
    848          /*----------------------------------------------------------------------------*/
    849          //void process_set_mac_explicit_api(uint8_t *buf, uint16_t length)
    850          //{
    851          //   uint8_t status = 0xFF;
    852          //    uint32_t CH0 = 0x000000;//0x0DC438;
    853          //    uint16_t channel_numbers = 0x0000;
    854          //    mem_rev_cpy((uint8_t *)&CH0 ,&buf[0],4);
    855          //    buf+=4;
    856          //    uint8_t channelspacing = *buf++;
    857          //    mem_rev_cpy((uint8_t *)&channel_numbers,&buf[0],2);
    858          //    buf+=2;
    859          //  status =  set_mac_chan_plan_explicit( CH0, channelspacing, channel_numbers);
    860          //  
    861          //  send_hif_conf_cb(SET_MAC_CHANNEL_PLAN_EXPLICIT_API_CONF,status);
    862          //}
    863          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    864          void process_set_mac_fixed_chan(uint8_t *buf, uint16_t length)
    865          {
   \                     process_set_mac_fixed_chan: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    866            uint8_t status = 0xFF;
   \        0x6   0x26FF             MOVS     R6,#+255
    867            uint16_t fixed_channel = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    868            mem_rev_cpy((uint8_t *)&fixed_channel ,&buf[0],2);
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x0021             MOVS     R1,R4
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x.... 0x....      BL       mem_rev_cpy
    869            status =  set_mac_chan_plan_fixed(fixed_channel);
   \       0x18   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x1C   0x.... 0x....      BL       set_mac_chan_plan_fixed
   \       0x20   0x0007             MOVS     R7,R0
    870            
    871           //if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE) 
    872               App_factory_mode_channel_set();
   \       0x22   0x.... 0x....      BL       App_factory_mode_channel_set
    873           
    874            send_hif_conf_cb(SET_MAC_CHAN_PLAN_FIXED_CONF,status);
   \       0x26   0x0039             MOVS     R1,R7
   \       0x28   0xB2C9             UXTB     R1,R1
   \       0x2A   0x203D             MOVS     R0,#+61
   \       0x2C   0x.... 0x....      BL       send_hif_conf_cb
    875          }
   \       0x30   0xBDF1             POP      {R0,R4-R7,PC}
    876          /*----------------------------------------------------------------------------*/
    877          //void process_set_lbr_mac_gtks_config_tbc(uint8_t *buf, uint16_t length)
    878          //{
    879          //    uint8_t status = 0xFF;
    880          //  uint8_t GTK0_Hash[16] = {0};
    881          //  uint8_t GTK1_Hash[16] = {0};
    882          //  uint8_t GTK2_Hash[16] = {0};
    883          //  uint8_t GTK3_Hash[16] = {0};
    884          //  uint8_t gtkl = 0;
    885          //  
    886          //
    887          //  uint8_t offset = 0;
    888          //  while(length > offset)
    889          //  {
    890          //    uint8_t var_type = *buf++;
    891          //    uint16_t rcvd_length = 0x00;
    892          //    if(var_type == GTK0)
    893          //    {
    894          //      rcvd_length =  *buf++;
    895          //      memcpy(GTK0_Hash,&buf[0],rcvd_length);
    896          //      buf += rcvd_length;
    897          //      gtkl |= 0x01;
    898          //    }else if(var_type == GTK1)
    899          //    {
    900          //      rcvd_length =  *buf++;
    901          //      memcpy(GTK1_Hash,&buf[0],rcvd_length);
    902          //      buf += rcvd_length;
    903          //      gtkl |= 0x02;
    904          //    }else if(var_type == GTK2)
    905          //    {
    906          //      rcvd_length =  *buf++;
    907          //      memcpy(GTK2_Hash,&buf[0],rcvd_length);
    908          //      buf += rcvd_length;
    909          //      gtkl |= 0x04;
    910          //    }else if(var_type == GTK3)
    911          //    {
    912          //      rcvd_length =  *buf++;
    913          //      memcpy(GTK3_Hash,&buf[0],rcvd_length);
    914          //      buf += rcvd_length;
    915          //      gtkl |= 0x08;
    916          //    }
    917          //    offset += (rcvd_length+1+1);
    918          //  }
    919          //  status = set_lbr_mac_gtks_config(GTK0_Hash,
    920          //                                   GTK1_Hash,
    921          //                                   GTK2_Hash,
    922          //                                   GTK3_Hash,
    923          //                                   gtkl);
    924          //  send_hif_conf_cb(SET_LBR_MAC_GTKS_CONFIG_CONF,status);
    925          //}
    926          
    927          //void process_set_lbr_mac_gtks_config(uint8_t *buf, uint16_t length)
    928          //{
    929          //  uint8_t status = 0xFF;
    930          //  uint8_t GTK0_Hash[16] = {0};
    931          //  uint8_t GTK1_Hash[16] = {0};
    932          //  uint8_t GTK2_Hash[16] = {0};
    933          //  uint8_t GTK3_Hash[16] = {0};
    934          //  uint8_t gtkl = 0;
    935          //  
    936          //  if (memcmp (buf, GTK0_Hash, 16))
    937          //  {
    938          //    memcpy(GTK0_Hash,buf,16);
    939          //    gtkl |= 0x01;
    940          //  }
    941          //  buf+=16;
    942          //  if (memcmp (buf, GTK1_Hash, 16))
    943          //  {
    944          //    memcpy(GTK1_Hash,buf,16);
    945          //    gtkl |= 0x02;
    946          //  }
    947          //  buf+=16;
    948          //  if (memcmp (buf, GTK2_Hash, 16))
    949          //  {
    950          //    memcpy(GTK2_Hash,buf,16);
    951          //    gtkl |= 0x04;
    952          //  }
    953          //  buf+=16;
    954          //  if (memcmp (buf, GTK3_Hash, 16))
    955          //  {
    956          //    memcpy(GTK3_Hash,buf,16);
    957          //    gtkl |= 0x08;
    958          //  }
    959          //
    960          //  status = set_lbr_mac_gtks_config(GTK0_Hash,
    961          //                                   GTK1_Hash,
    962          //                                   GTK2_Hash,
    963          //                                   GTK3_Hash,
    964          //                                   gtkl);
    965          //  send_hif_conf_cb(SET_LBR_MAC_GTKS_CONFIG_CONF,status);
    966          //}
    967          
    968          //void process_revoke_sta_request (uint8_t *sta_address, uint16_t length)
    969          //{
    970          //  uint8_t hifBuff[15] = {0};
    971          //  uint8_t* buf = &hifBuff[0];
    972          //  
    973          //  *buf++ = SEND_REVOKE_STA_REQ;
    974          //  memcpy (buf, sta_address, 8);
    975          //  buf += 8;
    976          //  *buf++ = DUMMY_COMPORT;//Dummy Comport 
    977          //  hif_send_msg_up (hifBuff, buf - hifBuff, response_laye_ID, PROTOCOL_ID_FOR_APP);
    978          //}
    979          
    980          /*----------------------------------------------------------------------------*/
    981          //void process_set_lbr_mac_pmk_ptk_gtk_lifetime_config(uint8_t *buf, uint16_t length)
    982          //{
    983          //  uint8_t status = 0xFF;
    984          //  uint32_t pmk_lifetime = 0;
    985          //  uint32_t ptk_lifetime = 0;
    986          //  uint32_t gtk_lifetime = 0;
    987          //  uint32_t gtk_new_activation_time = 0;
    988          //  uint32_t revocation_lifetime_reduction = 0;
    989          //  uint8_t tag = 0;              
    990          //  uint8_t len = 0;
    991          //  
    992          //  if (response_laye_ID == APP_DEF_LAYER_ID_TOOL)
    993          //  {
    994          //    mem_rev_cpy ((uint8_t*)&pmk_lifetime, buf, 4);
    995          //    buf += 4;
    996          //    mem_rev_cpy ((uint8_t*)&ptk_lifetime, buf, 4);
    997          //    buf += 4;
    998          //    mem_rev_cpy ((uint8_t*)&gtk_lifetime, buf, 4);
    999          //    buf += 4;
   1000          //    mem_rev_cpy ((uint8_t*)&gtk_new_activation_time, buf, 4);
   1001          //    buf += 4;
   1002          //    mem_rev_cpy ((uint8_t*)&revocation_lifetime_reduction, buf, 4);
   1003          //  }
   1004          //  
   1005          //  if (response_laye_ID == APP_DEF_LAYER_ID_TBC)
   1006          //  {
   1007          //    while (length > 0)
   1008          //    {
   1009          //      tag = *buf++;
   1010          //      len = *buf++;
   1011          //      
   1012          //      if (tag == PMK_LIFETIME)
   1013          //      {
   1014          //        mem_rev_cpy ((uint8_t*)&pmk_lifetime, buf, len);
   1015          //        buf += len;
   1016          //      }
   1017          //      if (tag == PTK_LIFETIME)
   1018          //      {
   1019          //        mem_rev_cpy ((uint8_t*)&ptk_lifetime, buf, len);
   1020          //        buf += len;
   1021          //      }
   1022          //      if (tag == GTK_LIFETIME)
   1023          //      {
   1024          //        mem_rev_cpy ((uint8_t*)&gtk_lifetime, buf, len);
   1025          //        buf += len;
   1026          //      }
   1027          //      if(tag == GTK_NEW_ACTIVATION_TIME)
   1028          //      {
   1029          //        mem_rev_cpy ((uint8_t*)&gtk_new_activation_time, buf, len);
   1030          //        buf += len;
   1031          //      }
   1032          //      if(tag == REVOCATION_LIFETIME_REDUCTION)
   1033          //      {
   1034          //        mem_rev_cpy ((uint8_t*)&revocation_lifetime_reduction, buf, len);
   1035          //        buf += len;
   1036          //      }
   1037          //      length -= (len+2);
   1038          //    } 
   1039          //  }
   1040          //  
   1041          //  /*Converting lifetime from minutes to seconds*/
   1042          //  pmk_lifetime *= 60;
   1043          //  ptk_lifetime *= 60;
   1044          //  gtk_lifetime *= 60;
   1045          //  
   1046          //  status = set_lbr_mac_lifetime_config (pmk_lifetime, 
   1047          //                                        ptk_lifetime, 
   1048          //                                        gtk_lifetime,
   1049          //                                        gtk_new_activation_time,
   1050          //                                        revocation_lifetime_reduction);
   1051          //  send_hif_conf_cb (SET_LBR_MAC_PMK_PTK_GTK_LIFETIME_CONFIG_CONF, status);
   1052          //}
   1053          /*----------------------------------------------------------------------------*/
   1054          extern uint16_t max_frag_size;
   1055          extern uint16_t frag_chunk_send;
   1056          //void process_set_lbr_mac_config_tbc(uint8_t *buf, uint16_t length)
   1057          //{
   1058          //  uint8_t status = 0xFF;
   1059          //  uint16_t pan_size = 0x0000;
   1060          //  uint16_t pan_id   = 0x0000;
   1061          //  uint8_t use_bs_sch = 0x00;
   1062          //  uint8_t routing_meth = 0;
   1063          //  uint8_t net_name[30] = {0};
   1064          //  uint8_t index = 0;
   1065          //  uint16_t max_sisl_mtusize = 0x0000;
   1066          //  mem_rev_cpy((uint8_t *)&pan_id ,&buf[0] ,2);
   1067          //  buf+=2;
   1068          //  length-=2;
   1069          //  mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1070          //  buf+=2;
   1071          //  length-=2;
   1072          //  use_bs_sch = *buf++;
   1073          //  length-=1;
   1074          //  routing_meth = *buf++;
   1075          //  length-=1;
   1076          //  while(*buf != 0x00)
   1077          //  {
   1078          //    
   1079          //    net_name[index++] = *buf++;
   1080          //    length-=1;
   1081          //  }
   1082          //   *buf++;//for NULL char
   1083          //  length-=1;
   1084          //  if(length != 0)
   1085          //  {
   1086          //    mem_rev_cpy((uint8_t *)&max_sisl_mtusize,&buf[0],2);
   1087          //    max_frag_size = frag_chunk_send = max_sisl_mtusize;
   1088          //    buf+=2;
   1089          //  }
   1090          // 
   1091          //  
   1092          //  status = set_lbr_mac_config(pan_size,
   1093          //                              pan_id,
   1094          //                              use_bs_sch,
   1095          //                              routing_meth,
   1096          //                              net_name);
   1097          //  
   1098          //  send_hif_conf_cb(SET_LBR_MAC_CONFIG_CONF,status);
   1099          //}
   1100          //void process_set_lbr_mac_config(uint8_t *buf, uint16_t length)
   1101          //{
   1102          //  uint8_t status = 0xFF;
   1103          //  uint16_t pan_size = 0x0000;
   1104          //  uint16_t pan_id   = 0x0000;
   1105          //  uint8_t use_bs_sch = 0x00;
   1106          //  uint8_t routing_meth = 0;
   1107          //  uint8_t net_name[30] = {0};
   1108          //  mem_rev_cpy((uint8_t *)&pan_id ,&buf[0] ,2);
   1109          //  buf+=2;
   1110          //  mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1111          //  buf+=2;
   1112          //  use_bs_sch = *buf++;
   1113          //  routing_meth = *buf++;
   1114          //  
   1115          //  uint16_t net_name_len = 0x00;
   1116          //  mem_rev_cpy((uint8_t *)&net_name_len ,&buf[0] ,2);
   1117          //  buf+=2;
   1118          //  memcpy((uint8_t *)&net_name ,&buf[0] ,net_name_len);
   1119          //  buf+=net_name_len;
   1120          //  
   1121          //  status = set_lbr_mac_config(pan_size,
   1122          //                              pan_id,
   1123          //                              use_bs_sch,
   1124          //                              routing_meth,
   1125          //                              net_name);
   1126          //  
   1127          //  send_hif_conf_cb(SET_LBR_MAC_CONFIG_CONF,status);
   1128          //}
   1129          
   1130          /*----------------------------------------------------------------------------*/
   1131          

   \                                 In section .text, align 2, keep-with-next
   1132          void process_reset_rpl_msg_rate(uint8_t *buf, uint16_t length)
   1133          {
   \                     process_reset_rpl_msg_rate: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   1134            uint8_t status = 0xFF;
   \        0x8   0x26FF             MOVS     R6,#+255
   1135            uint8_t rpl_messege = *buf;//*(buf+3);
   \        0xA   0xF894 0x8000      LDRB     R8,[R4, #+0]
   1136            status = reset_rpl_msg_rate(rpl_messege);
   \        0xE   0x4640             MOV      R0,R8
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x.... 0x....      BL       reset_rpl_msg_rate
   \       0x16   0x0007             MOVS     R7,R0
   1137            send_hif_conf_cb(RESET_RPL_MSG_RATE_CONF,status);
   \       0x18   0x0039             MOVS     R1,R7
   \       0x1A   0xB2C9             UXTB     R1,R1
   \       0x1C   0x2045             MOVS     R0,#+69
   \       0x1E   0x.... 0x....      BL       send_hif_conf_cb
   1138          }
   \       0x22   0xE8BD 0x81F0      POP      {R4-R8,PC}
   1139          
   1140          /*----------------------------------------------------------------------------*/
   1141          

   \                                 In section .text, align 2, keep-with-next
   1142          void process_get_sec_keys(uint8_t *buf, uint16_t length)
   1143          {
   \                     process_get_sec_keys: (+1)
   \        0x0   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \        0x4   0xB091             SUB      SP,SP,#+68
   \        0x6   0x2140             MOVS     R1,#+64
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0xAC01             ADD      R4,SP,#+4
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       __aeabi_memset
   1144            uint8_t SecKey[64] = {0x00};
   1145            memcpy(&SecKey[0],mac_key_list.MAC_SECURITY_KEY_LIST[0].MAC_SECURITY_KEY,16);
   \       0x12   0x2010             MOVS     R0,#+16
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0x.... 0x....      LDR.W    R4,??DataTable15_6
   \       0x1A   0xAD01             ADD      R5,SP,#+4
   \       0x1C   0x9A00             LDR      R2,[SP, #+0]
   \       0x1E   0x0021             MOVS     R1,R4
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       __aeabi_memcpy
   1146            memcpy(&SecKey[16],mac_key_list.MAC_SECURITY_KEY_LIST[1].MAC_SECURITY_KEY,16);
   \       0x26   0x2510             MOVS     R5,#+16
   \       0x28   0x.... 0x....      LDR.W    R6,??DataTable15_7
   \       0x2C   0xAF05             ADD      R7,SP,#+20
   \       0x2E   0x002A             MOVS     R2,R5
   \       0x30   0x0031             MOVS     R1,R6
   \       0x32   0x0038             MOVS     R0,R7
   \       0x34   0x.... 0x....      BL       __aeabi_memcpy
   1147            memcpy(&SecKey[32],mac_key_list.MAC_SECURITY_KEY_LIST[2].MAC_SECURITY_KEY,16);
   \       0x38   0x2710             MOVS     R7,#+16
   \       0x3A   0x.... 0x....      LDR.W    R8,??DataTable15_8
   \       0x3E   0xF10D 0x0924      ADD      R9,SP,#+36
   \       0x42   0x003A             MOVS     R2,R7
   \       0x44   0x4641             MOV      R1,R8
   \       0x46   0x4648             MOV      R0,R9
   \       0x48   0x.... 0x....      BL       __aeabi_memcpy
   1148            memcpy(&SecKey[48],mac_key_list.MAC_SECURITY_KEY_LIST[3].MAC_SECURITY_KEY,16);
   \       0x4C   0xF05F 0x0910      MOVS     R9,#+16
   \       0x50   0x.... 0x....      LDR.W    R10,??DataTable15_9
   \       0x54   0xF10D 0x0B34      ADD      R11,SP,#+52
   \       0x58   0x464A             MOV      R2,R9
   \       0x5A   0x4651             MOV      R1,R10
   \       0x5C   0x4658             MOV      R0,R11
   \       0x5E   0x.... 0x....      BL       __aeabi_memcpy
   1149              send_hif_seckey_cb(GET_SEC_KEYS_CONF,SecKey);
   \       0x62   0xA901             ADD      R1,SP,#+4
   \       0x64   0x204F             MOVS     R0,#+79
   \       0x66   0x.... 0x....      BL       send_hif_seckey_cb
   1150          }
   \       0x6A   0xB013             ADD      SP,SP,#+76
   \       0x6C   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   1151          
   1152          /*----------------------------------------------------------------------------*/
   1153          

   \                                 In section .text, align 2, keep-with-next
   1154          void process_get_ip_address(uint8_t *buf, uint16_t length)
   1155          {
   \                     process_get_ip_address: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1156            get_ip_address();
   \        0x6   0x.... 0x....      BL       get_ip_address
   1157          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1158          
   1159          /*----------------------------------------------------------------------------*/
   1160          
   1161          

   \                                 In section .text, align 2, keep-with-next
   1162          void process_wan_ping_reply(uint8_t *buf, uint16_t length)
   1163          {
   \                     process_wan_ping_reply: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1164            recved_wan_ping_reply (*buf);
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0x.... 0x....      BL       recved_wan_ping_reply
   1165          }
   \        0xC   0xBD31             POP      {R0,R4,R5,PC}
   1166          
   1167          /*----------------------------------------------------------------------------*/
   1168          

   \                                 In section .text, align 2, keep-with-next
   1169          void send_udp_request(uint8_t *buf, uint16_t length)
   1170          {
   \                     send_udp_request: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB08A             SUB      SP,SP,#+40
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x2110             MOVS     R1,#+16
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0xAE06             ADD      R6,SP,#+24
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1171            uint8_t src_ipv6_addr[16] = {0x00};
   1172            uint16_t src_port_num = 0x0000;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \       0x1C   0x2110             MOVS     R1,#+16
   \       0x1E   0x2200             MOVS     R2,#+0
   \       0x20   0xAE02             ADD      R6,SP,#+8
   \       0x22   0x0030             MOVS     R0,R6
   \       0x24   0x.... 0x....      BL       __aeabi_memset
   1173            uint8_t dst_ipv6_addr[16] = {0x00};
   1174            uint16_t dst_port_num = 0x0000;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1175            uint16_t data_length = 0x00;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1176          
   1177                  memcpy(src_ipv6_addr,&buf[0],16);
   \       0x34   0x2610             MOVS     R6,#+16
   \       0x36   0x0027             MOVS     R7,R4
   \       0x38   0xF10D 0x0818      ADD      R8,SP,#+24
   \       0x3C   0x0032             MOVS     R2,R6
   \       0x3E   0x0039             MOVS     R1,R7
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x.... 0x....      BL       __aeabi_memcpy
   1178                  buf+=16;
   \       0x46   0x3410             ADDS     R4,R4,#+16
   1179                  mem_rev_cpy((uint8_t *)&src_port_num,&buf[0],2);
   \       0x48   0x2202             MOVS     R2,#+2
   \       0x4A   0x0021             MOVS     R1,R4
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x.... 0x....      BL       mem_rev_cpy
   1180                  buf+=2;
   \       0x52   0xF114 0x0902      ADDS     R9,R4,#+2
   1181                  memcpy(dst_ipv6_addr,&buf[0],16);
   \       0x56   0x2410             MOVS     R4,#+16
   \       0x58   0x46C8             MOV      R8,R9
   \       0x5A   0xF10D 0x0A08      ADD      R10,SP,#+8
   \       0x5E   0x0022             MOVS     R2,R4
   \       0x60   0x4641             MOV      R1,R8
   \       0x62   0x4650             MOV      R0,R10
   \       0x64   0x.... 0x....      BL       __aeabi_memcpy
   1182                  buf+=16;
   \       0x68   0xF119 0x0910      ADDS     R9,R9,#+16
   1183                  mem_rev_cpy((uint8_t *)&dst_port_num,&buf[0],2);
   \       0x6C   0x2202             MOVS     R2,#+2
   \       0x6E   0x4649             MOV      R1,R9
   \       0x70   0xF10D 0x0002      ADD      R0,SP,#+2
   \       0x74   0x.... 0x....      BL       mem_rev_cpy
   1184                  buf+=2;        
   \       0x78   0xF119 0x0902      ADDS     R9,R9,#+2
   1185          
   1186            mem_rev_cpy((uint8_t *)&data_length,&buf[0],2);
   \       0x7C   0x2202             MOVS     R2,#+2
   \       0x7E   0x4649             MOV      R1,R9
   \       0x80   0x4668             MOV      R0,SP
   \       0x82   0x.... 0x....      BL       mem_rev_cpy
   1187            buf+=data_length;  
   \       0x86   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x8A   0x4448             ADD      R0,R9,R0
   1188            //memcpy(data,&buf[0],data_length);
   1189          //  send_udp(src_ipv6_addr,src_port_num,dst_ipv6_addr,dst_port_num,buf,data_length);
   1190          }
   \       0x8C   0xB00A             ADD      SP,SP,#+40
   \       0x8E   0xE8BD 0x87F0      POP      {R4-R10,PC}
   1191          
   1192          /*------------------------------Arjun for swagger----------------------------------------------*/
   1193          void start_timer_to_send_ping (uint64_t timeval, void *data);
   1194          extern void send_icmpv6_with_count(uint8_t *buf, uint16_t length);
   1195          
   1196          /*----------------------------------------------------------------------------*/
   1197          

   \                                 In section .text, align 2, keep-with-next
   1198          void send_icmpv6_after_delay (void *data)
   1199          {
   \                     send_icmpv6_after_delay: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   1200            uint8_t *buf = NULL;
   \        0x6   0x2500             MOVS     R5,#+0
   1201            uint16_t length = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1202            memcpy ((uint8_t *)&length, (uint8_t *)data, 2);
   \        0xE   0x2702             MOVS     R7,#+2
   \       0x10   0x46A0             MOV      R8,R4
   \       0x12   0x466E             MOV      R6,SP
   \       0x14   0x003A             MOVS     R2,R7
   \       0x16   0x4641             MOV      R1,R8
   \       0x18   0x0030             MOVS     R0,R6
   \       0x1A   0x.... 0x....      BL       __aeabi_memcpy
   1203            buf = (uint8_t *)data + 2;
   \       0x1E   0x1CA6             ADDS     R6,R4,#+2
   1204            send_icmpv6 (buf, length);
   \       0x20   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \       0x24   0x0030             MOVS     R0,R6
   \       0x26   0x.... 0x....      BL       send_icmpv6
   1205            app_bm_free ((uint8_t *)data);
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x.... 0x....      BL       app_bm_free
   1206          }
   \       0x30   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}
   1207          
   1208          /*----------------------------------------------------------------------------*/
   1209          
   1210          //void send_icmpv6_request_tbc(uint8_t *buf, uint16_t length)
   1211          //{
   1212          //  uint8_t status = 0;
   1213          //  send_hif_conf_cb(SEND_ICMPv6_CONF,status);
   1214          //  uint8_t *ping_data = app_bm_alloc (length + 2);
   1215          //  memcpy (ping_data, &length, 2);
   1216          //  memcpy (ping_data + 2, buf, length);
   1217          //  start_timer_to_send_ping (200, ping_data);       /*Ping will be out after 200 milliseconds*/
   1218          //}
   1219          
   1220          /*----------------------------------------------------------------------------*/
   1221          

   \                                 In section .text, align 2, keep-with-next
   1222          void send_icmpv6_request(uint8_t *buf, uint16_t length)
   1223          {
   \                     send_icmpv6_request: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1224            send_icmpv6_with_count(buf,length);
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       send_icmpv6_with_count
   1225          }
   \       0x10   0xBD31             POP      {R0,R4,R5,PC}
   1226          
   1227          /*----------------------------------------------------------------------------*/
   1228          
   1229          //void send_icmpv6_request(uint8_t *buf, uint16_t length)
   1230          //{
   1231          //  uint8_t src_ipv6_addr[16] = {0x00};
   1232          //  uint8_t dst_ipv6_addr[16] = {0x00};
   1233          //  uint16_t data_length = 0x00;
   1234          ////  uint8_t data[200]={0};
   1235          //  
   1236          ////  if(ipv6_address_flag==1)
   1237          ////  {
   1238          //    memcpy(src_ipv6_addr,&buf[0],16);
   1239          //    buf+=16;
   1240          //    memcpy(dst_ipv6_addr,&buf[0],16);
   1241          //    buf+=16;
   1242          ////  }
   1243          ////  else
   1244          ////  {
   1245          ////    memcpy(src_ipv6_addr,&buf[0],8);
   1246          ////    buf+=8;
   1247          ////    memcpy(dst_ipv6_addr,&buf[0],8);
   1248          ////    buf+=8;
   1249          ////  } 
   1250          //  mem_rev_cpy((uint8_t *)&data_length,&buf[0],2);
   1251          //  buf+=2;
   1252          ////  memcpy(&data,&buf[0],data_length);
   1253          ////  buf+=data_length;  
   1254          ////  memcpy(data,&buf[0],data_length);
   1255          //  
   1256          //  
   1257          ////  send_icmpv6
   1258          ////              (
   1259          ////               src_ipv6_addr,
   1260          ////               0,
   1261          ////               dst_ipv6_addr,
   1262          ////               0,
   1263          ////               0,
   1264          ////               0,
   1265          ////               buf,
   1266          ////               data_length 
   1267          ////               );
   1268          //  
   1269          //  
   1270          //}
   1271          /*----------------------------------------------------------------------------*/
   1272          //void trigger_subscribe_packet(uint8_t *buf, uint16_t length)
   1273          //{
   1274          //  uint8_t status = 0xFF;
   1275          // // uint8_t fwd_address[8] = {0};
   1276          //  //uint16_t fwd_port = 0;
   1277          //  uint8_t command = *buf++;
   1278          //  //uint8_t pakt_type = *buf++;//*(buf+3);         //Arjun(28-09-17): discarded as of api 1.0.5
   1279          // //buf+=4;
   1280          // // memcpy(fwd_address,&buf[0],8);
   1281          //  //buf+=8;
   1282          //  //mem_rev_cpy((uint8_t *)&fwd_port,&buf[0],2);
   1283          //  //buf+=2;
   1284          //  if(command == 1){
   1285          //    sendSubscribedPacket = 1;
   1286          //  }
   1287          //  else{
   1288          //    sendSubscribedPacket = 0;
   1289          //  }
   1290          //  status = 0;//subscribe_packets(command,fwd_address,fwd_port);
   1291          //  send_hif_conf_cb(SUBSCRIBE_PACKETS_CONF,status);
   1292          //}
   1293          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1294          void process_get_dodag_routers(uint8_t *buf, uint16_t length)
   1295          {
   \                     process_get_dodag_routers: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1296              get_dodag_routers();
   \        0x6   0x.... 0x....      BL       get_dodag_routers
   1297          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1298          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1299          void process_get_neighbor_table(uint8_t *buf, uint16_t length)
   1300          {
   \                     process_get_neighbor_table: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1301              get_neighbor_table();
   \        0x6   0x.... 0x....      BL       get_neighbor_table
   1302          }
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}
   1303          

   \                                 In section .text, align 2, keep-with-next
   1304          void process_get_current_join_state(uint8_t *buf, uint16_t length)
   1305          {
   \                     process_get_current_join_state: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1306              uint8_t join_state  = get_current_join_state();
   \        0x6   0x.... 0x....      BL       get_current_join_state
   \        0xA   0x0006             MOVS     R6,R0
   1307              send_hif_conf_cb(SEND_CURRENT_JOIN_STATE,join_state);
   \        0xC   0x0031             MOVS     R1,R6
   \        0xE   0xB2C9             UXTB     R1,R1
   \       0x10   0x2056             MOVS     R0,#+86
   \       0x12   0x.... 0x....      BL       send_hif_conf_cb
   1308          }
   \       0x16   0xBD70             POP      {R4-R6,PC}
   1309          /*----------------------------------------------------------------------------*/
   1310          
   1311          //void process_set_pa_level(uint8_t *buf, uint16_t length)
   1312          //{
   1313          //	uint8_t level;
   1314          //        // Since now we are sending PA level as Enum, and Enum is 4 Byte value 
   1315          //        // The Value of the PA level is in the 4th location
   1316          //      level = *buf;
   1317          //      TRX_Set_PA_Level(level);
   1318          //      send_hif_conf_cb(TELEC_SET_PA_LEVEL_MCR_CONF,0);	
   1319          //}
   1320          
   1321          /*----------------------------------------------------------------------------*/
   1322          
   1323          //void process_set_router_config_tbc(uint8_t *buf, uint16_t length)
   1324          //{
   1325          //  uint8_t status = 0xFF;
   1326          //  uint8_t routing_method = 0;
   1327          //  uint16_t pan_size = 0x0000;
   1328          //  uint8_t net_name[30] = {0};
   1329          //  uint8_t index = 0;
   1330          //  uint16_t max_sisl_mtusize = 0x00;
   1331          //  routing_method = *buf++;
   1332          //  length--;
   1333          //  while(*buf != 0x00)
   1334          //  {
   1335          //    net_name[index++] = *buf++;
   1336          //    length--;
   1337          //  }
   1338          //  *buf++;
   1339          //  length--;
   1340          //  buf+=2; //routing cost offset 
   1341          //  length -= 2;
   1342          //  buf+=2; //pancost cost offset 
   1343          //  length -= 2;
   1344          //  if(length != 0)
   1345          //  {
   1346          //    mem_rev_cpy((uint8_t *)&max_sisl_mtusize,&buf[0],2);
   1347          //    max_frag_size = frag_chunk_send = max_sisl_mtusize;
   1348          //    buf+=2;
   1349          //  }
   1350          //  status = set_router_config(net_name, routing_method, pan_size);
   1351          //  send_hif_conf_cb(SET_ROUTER_CONFIG_CONF,status);
   1352          //}
   1353          /*----------------------------------------------------------------------------*/
   1354          //void process_set_router_config(uint8_t *buf, uint16_t length)
   1355          //{
   1356          //    uint8_t status = 0xFF;
   1357          //    uint8_t routing_method = 0;
   1358          //    uint16_t pan_size = 0x0000;
   1359          //    uint8_t net_name[30] = {0};    
   1360          //    uint16_t net_name_len = 0x00;
   1361          //    mem_rev_cpy((uint8_t *)&net_name_len ,&buf[0] ,2);
   1362          //    buf+=2;
   1363          //    memcpy((uint8_t *)&net_name ,&buf[0] ,net_name_len);
   1364          //    buf+=net_name_len;
   1365          //    mem_rev_cpy((uint8_t *)&pan_size ,&buf[0] ,2);
   1366          //    buf+=2;
   1367          //    routing_method = *buf++;
   1368          //    status = set_router_config(net_name, routing_method, pan_size);
   1369          //    send_hif_conf_cb(SET_ROUTER_CONFIG_CONF,status);
   1370          //}
   1371          
   1372          /*----------------------------------------------------------------------------*/
   1373          //void process_set_mac_whitelist_ontbc(uint8_t *buf, uint16_t length)
   1374          //{
   1375          //  uint8_t status = 0xFF;
   1376          //  status = set_mac_white_list_tbc(buf,length);
   1377          //  send_hif_conf_cb(SET_MAC_WHITELIST_CONF,status);
   1378          //}
   1379          /*----------------------------------------------------------------------------*/
   1380          //void process_set_mac_whitelist(uint8_t *buf, uint16_t length)
   1381          //{
   1382          //  uint8_t status = 0xFF;
   1383          //  status = set_mac_white_list(buf,length);
   1384          //  send_hif_conf_cb(SET_MAC_WHITELIST_CONF,status);
   1385          //}
   1386          /*----------------------------------------------------------------------------*/
   1387          //void process_get_mac_whitelist(uint8_t *buf, uint16_t length)
   1388          //{
   1389          //  get_mac_white_list();
   1390          //}
   1391          /*----------------------------------------------------------------------------*/
   1392          //void process_set_revoaction_key(uint8_t *buf, uint16_t length)
   1393          //{
   1394          //  send_hif_conf_cb(SET_REVOCATION_KEY_CONF,0);
   1395          //  set_revoaction_key(buf, length);
   1396          //}
   1397          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1398          void process_get_prefered_parents(uint8_t *buf, uint16_t length)
   1399          {
   \                     process_get_prefered_parents: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1400            get_prefered_parents(buf,length);
   \        0x6   0x0029             MOVS     R1,R5
   \        0x8   0xB289             UXTH     R1,R1
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       get_prefered_parents
   1401          }
   \       0x10   0xBD31             POP      {R0,R4,R5,PC}
   1402          
   1403          /*----------------------------------------------------------------------------*/
   1404          #if(FAN_EDFE_FEATURE_ENABLED == 1)
   1405          void process_edfe_frame_exchange_req(uint8_t *buf, uint16_t length)
   1406          {
   1407            send_edfe_exchange_frame(buf,length);
   1408            send_hif_conf_cb(EDFE_FRAME_EXCHANGE_CONF,0);
   1409          }
   1410          #endif
   1411          
   1412          /*----------------------------------------------------------------------------*/
   1413          

   \                                 In section .text, align 2, keep-with-next
   1414          void process_start_network_scale_req(uint8_t *buf, uint16_t length)
   1415          {
   1416          //  uint8_t network_scal_type = *buf++;
   1417          //  if(network_scal_type == 0x01)
   1418          //  {
   1419          //    rpl_dio_interval_MIN = 19;
   1420          //    rpl_cfg_dio_interval_DUB = 1;
   1421          //    trickle_IMIN = 60;
   1422          //    trickle_IMAX = 4;
   1423          //  }
   1424          //  else if(network_scal_type == 0x00)
   1425          //  {
   1426          //    rpl_dio_interval_MIN = 15;
   1427          //    rpl_cfg_dio_interval_DUB = 2;
   1428          //    trickle_IMIN = 15;
   1429          //    trickle_IMAX = 2;
   1430          //  }
   1431          //  send_hif_conf_cb(SET_START_NETWORK_SCALE_CONF,0);
   1432          }
   \                     process_start_network_scale_req: (+1)
   \        0x0   0x4770             BX       LR
   1433          
   1434          /*----------------------------------------------------------------------------*/
   1435          
   1436          //void enable_desmac_sec(uint8_t *buf, uint16_t length)
   1437          //{
   1438          //  set_mac_security_enable_disable(*(buf+3));
   1439          //}
   1440          
   1441          
   1442          /*----------------------------------------------------------------------------*/
   1443          
   1444          //void send_eapol_packt_to_lbr(uint8_t *buff , uint16_t len , uint8_t *self_addr)
   1445          //{
   1446          //#if 0
   1447          //    enet_msg_t* msg = allocate_hif_msg( len+25 );
   1448          //    uint8_t* buf = msg->data;
   1449          //     if(msg != NULL)
   1450          //     {
   1451          //       *buf++ = SEND_EAPOL_PACKT_TRANSMIT;
   1452          //       memcpy(buf,self_addr,8);
   1453          //       buf+=8;
   1454          //       memcpy(buf,buff,len);
   1455          //       buf += len; 
   1456          //       *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1457          //       msg->data_length  = buf - msg->data;
   1458          //       hif_send_msg_up(msg->data,(msg->data_length-1),response_laye_ID,PROTOCOL_ID_FOR_APP);      
   1459          ////#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1460          ////       stack_print_debug ("E->H\n");
   1461          ////#endif
   1462          //          free_hif_msg( msg );
   1463          //     }
   1464          //#else
   1465          //     enet_msg_t* msg = allocate_hif_msg( len+25 );
   1466          //     uint8_t* buf = msg->data;
   1467          //     if(msg != NULL)
   1468          //     {
   1469          //       memcpy(buf,self_addr,8);
   1470          //       buf+=8;
   1471          //       memcpy(buf,buff,len);
   1472          //       buf += len; 
   1473          //       msg->data_length  = buf - msg->data;
   1474          //       recv_data_from_app(NULL,msg->data,msg->data_length);
   1475          //       free_hif_msg( msg );
   1476          //     }
   1477          //#endif    
   1478          //    
   1479          //}
   1480          /*----------------------------------------------------------------------------*/
   1481          
   1482          //void send_wpa_supplicant_for_bootup()
   1483          //{
   1484          //    uint8_t hif_Send_buff [5] = {0};
   1485          //    uint8_t* buf = &hif_Send_buff [0];
   1486          //
   1487          //    *buf++ = BOOT_WPA_SUPPLICANT;
   1488          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1489          //
   1490          //    hif_send_msg_up(&hif_Send_buff[0],1,6);
   1491          //     
   1492          //}
   1493          
   1494          
   1495          
   1496          /*----------------------------------------------------------------------------*/
   1497          
   1498          //void send_host_apd_bootup()
   1499          //{
   1500          //    uint8_t hifBuff[15] = {0};
   1501          //    uint8_t* buf = &hifBuff[0];
   1502          //
   1503          //    *buf++ = SEND_START_CMD_TO_HOST_APD;
   1504          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1505          //     hif_send_msg_up(&hifBuff[0], 1,response_laye_ID,PROTOCOL_ID_FOR_APP);  
   1506          //}
   1507          
   1508          /* Debdeep :: Now we send ack for every eapol packet received from Linux Hostapd */
   1509          //void send_ack_to_hostapd_for_eapol_packet()
   1510          //{
   1511          //    uint8_t hifBuff[15] = {0};
   1512          //    uint8_t* buf = &hifBuff[0];
   1513          //
   1514          //    *buf++ = SEND_EAPOL_PACKET_ACK;
   1515          //    *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1516          //     hif_send_msg_up(&hifBuff[0], 1,response_laye_ID,PROTOCOL_ID_FOR_APP);  
   1517          //}
   1518          /*----------------------------------------------------------------------------*/
   1519          //void set_mac_address(uint8_t *buf,uint16_t len);
   1520          //void set_gtk_key_auth(uint8_t *buf,uint16_t len);
   1521          //void send_mac_addr(uint8_t *buff , uint16_t len)
   1522          //{
   1523          //#if 0  
   1524          //  uint8_t hifBuff[15] = {0};
   1525          //  uint8_t* buf = &hifBuff[0];
   1526          //  
   1527          //  *buf++ = SEND_SELF_MAC_ADDR;
   1528          //   mem_rev_cpy(buf,buff,len);
   1529          //   buf+=8;
   1530          //   *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1531          //   //len + 1  --> 1 is for Dummy COM Port
   1532          //   hif_send_msg_up(&hifBuff[0], (len +1 ),response_laye_ID,PROTOCOL_ID_FOR_APP);
   1533          //#else
   1534          //   uint8_t temp_gtk_hash_buf[65] = {0};
   1535          //   uint8_t temp_addr[8] = {0};
   1536          //   mem_rev_cpy(temp_addr,buff,8);
   1537          //   uint8_t *temp_ptr = &temp_gtk_hash_buf[0];
   1538          //   set_mac_address(&temp_addr[0],len);
   1539          //   *temp_ptr++ = fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl;
   1540          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk0_key,16);
   1541          //   temp_ptr += 16;
   1542          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk1_key,16);
   1543          //   temp_ptr += 16;
   1544          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk2_key,16);
   1545          //   temp_ptr += 16;
   1546          //   memcpy(temp_ptr,(uint8_t *)fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk3_key,16);
   1547          //   set_gtk_key_auth(&temp_gtk_hash_buf[0],len);
   1548          //   start_host_apd();
   1549          //#endif   
   1550          //
   1551          //}
   1552          

   \                                 In section .text, align 2, keep-with-next
   1553          void set_seq_key(uint8_t live_key_id_index)
   1554          {
   \                     set_seq_key: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x2108             MOVS     R1,#+8
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x466D             MOV      R5,SP
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       __aeabi_memset
   1555            uint8_t tempBuff[8] = {0};
   1556            generate_MAC_Security_Key(live_key_id_index,0);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x.... 0x....      BL       generate_MAC_Security_Key
   1557            key_id_index = live_key_id_index;
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \       0x1E   0x7004             STRB     R4,[R0, #+0]
   1558            set_mac_security_on_LBR(&tempBuff[0],8);
   \       0x20   0x2108             MOVS     R1,#+8
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x.... 0x....      BL       set_mac_security_on_LBR
   1559          
   1560          #if(FAN_FRQ_HOPPING_FEATURE_ENABLED == 1)  
   1561            /* Debdeep :: For LBR we need to start scheduling for freq hopping 
   1562            after doing handshake between Linux-Hostapd and Embedded-LBR */
   1563            fan_freq_hop_start_hopping(NULL);
   1564          #endif
   1565            
   1566          }
   \       0x28   0xBD37             POP      {R0-R2,R4,R5,PC}
   1567          

   \                                 In section .text, align 2, keep-with-next
   1568          void recv_data_from_eapol_auth(uint8_t *pBuff,uint16_t len)
   1569          {
   \                     recv_data_from_eapol_auth: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   1570            TANSIT_KMP_ID = *pBuff++;        
   \        0x2   0x7802             LDRB     R2,[R0, #+0]
   \        0x4   0x.... 0x....      LDR.W    R3,??DataTable15_11
   \        0x8   0x701A             STRB     R2,[R3, #+0]
   \        0xA   0x1C44             ADDS     R4,R0,#+1
   1571            len -= 1; // Raka : 03-Dec-2017 Since KMP ID is extracted 
   \        0xC   0x1E4D             SUBS     R5,R1,#+1
   1572            
   1573            if((pBuff[0] == 0x00)&&(pBuff[1] == 0x00)&&(pBuff[2] == 0x00)&&
   1574               (pBuff[3] == 0x00)&&(pBuff[4] == 0x00)&&(pBuff[5] == 0x00)&&
   1575                 (pBuff[6] == 0x00)&&(pBuff[7] == 0x00))
   \        0xE   0x7820             LDRB     R0,[R4, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD114             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x14   0x7860             LDRB     R0,[R4, #+1]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD111             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x1A   0x78A0             LDRB     R0,[R4, #+2]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD10E             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x20   0x78E0             LDRB     R0,[R4, #+3]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD10B             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x26   0x7920             LDRB     R0,[R4, #+4]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD108             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x2C   0x7960             LDRB     R0,[R4, #+5]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD105             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x32   0x79A0             LDRB     R0,[R4, #+6]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD102             BNE.N    ??recv_data_from_eapol_auth_0
   \       0x38   0x79E0             LDRB     R0,[R4, #+7]
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD015             BEQ.N    ??recv_data_from_eapol_auth_1
   1576            {
   1577              /* Send EAPOL Key Packet Over Radio RF when received from the Linux Suplicant
   1578              Recevied Destination Addess will all ZERO
   1579              */
   1580              #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1581              send_eapol_data_to_mac_request(pBuff,len);
   1582          #endif
   1583            }
   1584            else
   1585            {
   1586              /*send eapol packet to make udp packet and send as udp*/
   1587              if((relay_reply_flag == 0x01  || (!memcmp(authnt_interfac_id,pBuff,8)
   1588                                                || is_send_as_udp(pBuff))
   1589                  ))
   \                     ??recv_data_from_eapol_auth_0: (+1)
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \       0x42   0x7800             LDRB     R0,[R0, #+0]
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xD00C             BEQ.N    ??recv_data_from_eapol_auth_2
   \       0x48   0x2208             MOVS     R2,#+8
   \       0x4A   0x0021             MOVS     R1,R4
   \       0x4C   0x.... 0x....      LDR.W    R0,??DataTable15_13
   \       0x50   0x.... 0x....      BL       memcmp
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD004             BEQ.N    ??recv_data_from_eapol_auth_2
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x.... 0x....      BL       is_send_as_udp
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD003             BEQ.N    ??recv_data_from_eapol_auth_1
   1590              {
   1591                //#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1592                //        stack_print_debug ("H->E-R\n");
   1593                //#endif
   1594          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1595                send_data_to_eapol_relay_process(pBuff,len);
   1596          #endif
   1597                relay_reply_flag = 0xFF;
   \                     ??recv_data_from_eapol_auth_2: (+1)
   \       0x62   0x20FF             MOVS     R0,#+255
   \       0x64   0x.... 0x....      LDR.W    R1,??DataTable15_12
   \       0x68   0x7008             STRB     R0,[R1, #+0]
   1598              }
   1599              else
   1600              {
   1601                //#if (PRINT_DEBUG_LEVEL == CONSOLE_ERROR_DEBUG)
   1602                //        stack_print_debug ("H->E-M\n");
   1603                //#endif
   1604                /*send packet on mac layer */
   1605          #if(FAN_EAPOL_FEATURE_ENABLED == 1)
   1606                send_eapol_data_to_mac_request(pBuff,len);
   1607          #endif
   1608              }
   1609            }    
   1610          }
   \                     ??recv_data_from_eapol_auth_1: (+1)
   \       0x6A   0xBD31             POP      {R0,R4,R5,PC}
   1611          

   \                                 In section .text, align 2, keep-with-next
   1612          void send_gtk_update_indication(uint8_t *pBuff,uint16_t len)
   1613          
   1614          {
   \                     send_gtk_update_indication: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x000C             MOVS     R4,R1
   1615            uint8_t old_gtkl = fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl;
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable15_14
   \        0xC   0xF891 0x10E5      LDRB     R1,[R1, #+229]
   \       0x10   0xF88D 0x1000      STRB     R1,[SP, #+0]
   1616            uint8_t new_gtkl = *pBuff++;
   \       0x14   0x7805             LDRB     R5,[R0, #+0]
   \       0x16   0x1C40             ADDS     R0,R0,#+1
   1617            uint8_t number_of_gtk_made_zero = *pBuff++;
   \       0x18   0x7806             LDRB     R6,[R0, #+0]
   \       0x1A   0xF110 0x0801      ADDS     R8,R0,#+1
   1618            
   1619            for (uint8_t ii = 0; ii < 4; ii++)
   \       0x1E   0x2700             MOVS     R7,#+0
   \                     ??send_gtk_update_indication_0: (+1)
   \       0x20   0x0038             MOVS     R0,R7
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0x2804             CMP      R0,#+4
   \       0x26   0xDA11             BGE.N    ??send_gtk_update_indication_1
   1620            {
   1621              if (old_gtkl & (0x01<<ii)) /* Previously installed */
   \       0x28   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0x40B9             LSLS     R1,R1,R7
   \       0x30   0x4208             TST      R0,R1
   \       0x32   0xD009             BEQ.N    ??send_gtk_update_indication_2
   1622              {
   1623                if(!(new_gtkl & (0x01<<ii)))   /* Currently Not used */
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0x40B8             LSLS     R0,R0,R7
   \       0x38   0x0029             MOVS     R1,R5
   \       0x3A   0xB2C9             UXTB     R1,R1
   \       0x3C   0x4201             TST      R1,R0
   \       0x3E   0xD103             BNE.N    ??send_gtk_update_indication_2
   1624                {
   1625                  reset_incoming_frame_counter_for_stale_key (ii);
   \       0x40   0x0038             MOVS     R0,R7
   \       0x42   0xB2C0             UXTB     R0,R0
   \       0x44   0x.... 0x....      BL       reset_incoming_frame_counter_for_stale_key
   1626                }
   1627              }
   1628            }
   \                     ??send_gtk_update_indication_2: (+1)
   \       0x48   0x1C7F             ADDS     R7,R7,#+1
   \       0x4A   0xE7E9             B.N      ??send_gtk_update_indication_0
   1629            
   1630            fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtkl = new_gtkl;
   \                     ??send_gtk_update_indication_1: (+1)
   \       0x4C   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \       0x50   0xF880 0x50E5      STRB     R5,[R0, #+229]
   1631            fan_nwk_manager_app.node_basic_cfg.panvar_ie.PANVERSION += number_of_gtk_made_zero;
   \       0x54   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \       0x58   0xF8B0 0x00E3      LDRH     R0,[R0, #+227]
   \       0x5C   0xFA50 0xF086      UXTAB    R0,R0,R6
   \       0x60   0x.... 0x....      LDR.W    R1,??DataTable15_14
   \       0x64   0xF8A1 0x00E3      STRH     R0,[R1, #+227]
   1632            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk0_key, pBuff, 16);
   \       0x68   0x2710             MOVS     R7,#+16
   \       0x6A   0xF8CD 0x8010      STR      R8,[SP, #+16]
   \       0x6E   0x.... 0x....      LDR.W    R9,??DataTable15_15
   \       0x72   0x003A             MOVS     R2,R7
   \       0x74   0x9904             LDR      R1,[SP, #+16]
   \       0x76   0x4648             MOV      R0,R9
   \       0x78   0x.... 0x....      BL       __aeabi_memcpy
   1633            pBuff += 16;
   \       0x7C   0xF118 0x0910      ADDS     R9,R8,#+16
   1634            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk1_key, pBuff, 16);
   \       0x80   0xF05F 0x0810      MOVS     R8,#+16
   \       0x84   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \       0x88   0x.... 0x....      LDR.W    R10,??DataTable15_16
   \       0x8C   0x4642             MOV      R2,R8
   \       0x8E   0x9903             LDR      R1,[SP, #+12]
   \       0x90   0x4650             MOV      R0,R10
   \       0x92   0x.... 0x....      BL       __aeabi_memcpy
   1635            pBuff += 16;
   \       0x96   0xF119 0x0A10      ADDS     R10,R9,#+16
   1636            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk2_key, pBuff, 16);
   \       0x9A   0xF05F 0x0910      MOVS     R9,#+16
   \       0x9E   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \       0xA2   0x.... 0x....      LDR.W    R11,??DataTable15_17
   \       0xA6   0x464A             MOV      R2,R9
   \       0xA8   0x9902             LDR      R1,[SP, #+8]
   \       0xAA   0x4658             MOV      R0,R11
   \       0xAC   0x.... 0x....      BL       __aeabi_memcpy
   1637            pBuff += 16;
   \       0xB0   0xF11A 0x0010      ADDS     R0,R10,#+16
   \       0xB4   0x9005             STR      R0,[SP, #+20]
   1638            memcpy (fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.gtk3_key, pBuff, 16);
   \       0xB6   0xF05F 0x0A10      MOVS     R10,#+16
   \       0xBA   0x9805             LDR      R0,[SP, #+20]
   \       0xBC   0x9001             STR      R0,[SP, #+4]
   \       0xBE   0x.... 0x....      LDR.W    R11,??DataTable15_18
   \       0xC2   0x4652             MOV      R2,R10
   \       0xC4   0x9901             LDR      R1,[SP, #+4]
   \       0xC6   0x4658             MOV      R0,R11
   \       0xC8   0x.... 0x....      BL       __aeabi_memcpy
   1639            
   1640            trickle_timer_consistency_pc ();
   \       0xCC   0x.... 0x....      BL       trickle_timer_consistency_pc
   1641            
   1642            FAN_MAC_MLME_SET_Request
   1643              (
   1644               WISUN_INFO_PAYLOAD_IE_ID,/* header ie or payload ie */
   1645               WISUN_IE_SUBID_GTKHASH_IE,/* subid for each ie */	        
   1646               sizeof(gtk_key_t),/*(65+1)=(fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.length+1),*/
   1647               (uint8_t *)& fan_nwk_manager_app.node_basic_cfg.gtkhash_ie
   1648                 );
   \       0xD0   0x.... 0x....      LDR.W    R3,??DataTable15_19
   \       0xD4   0x2241             MOVS     R2,#+65
   \       0xD6   0x210C             MOVS     R1,#+12
   \       0xD8   0x2004             MOVS     R0,#+4
   \       0xDA   0x.... 0x....      BL       FAN_MAC_MLME_SET_Request
   1649          }
   \       0xDE   0xB007             ADD      SP,SP,#+28
   \       0xE0   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   1650          

   \                                 In section .text, align 2, keep-with-next
   1651          void send_mac_security_set_request(uint8_t *pBuff,uint16_t len)
   1652          {
   \                     send_mac_security_set_request: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1653            key_id_index = 0x00;//*pBuff++;                    /* Active Key index */
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable15_10
   \        0xC   0x7008             STRB     R0,[R1, #+0]
   1654            generate_MAC_Security_Key(key_id_index,0);
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \       0x14   0x7800             LDRB     R0,[R0, #+0]
   \       0x16   0x.... 0x....      BL       generate_MAC_Security_Key
   1655            reset_mac_frame_counter_cmd ();
   \       0x1A   0x.... 0x....      BL       reset_mac_frame_counter_cmd
   1656            add_security_key_descriptor_on_MAC ();
   \       0x1E   0x.... 0x....      BL       add_security_key_descriptor_on_MAC
   1657            trickle_timer_consistency_pc ();
   \       0x22   0x.... 0x....      BL       trickle_timer_consistency_pc
   1658            FAN_MAC_MLME_SET_Request
   1659              (
   1660               WISUN_INFO_PAYLOAD_IE_ID,/* header ie or payload ie */
   1661               WISUN_IE_SUBID_GTKHASH_IE,/* subid for each ie */	        
   1662               sizeof(gtk_key_t),/*(65+1)=(fan_nwk_manager_app.node_basic_cfg.gtkhash_ie.length+1),*/
   1663               (uint8_t *)& fan_nwk_manager_app.node_basic_cfg.gtkhash_ie
   1664                 );
   \       0x26   0x.... 0x....      LDR.W    R3,??DataTable15_19
   \       0x2A   0x2241             MOVS     R2,#+65
   \       0x2C   0x210C             MOVS     R1,#+12
   \       0x2E   0x2004             MOVS     R0,#+4
   \       0x30   0x.... 0x....      BL       FAN_MAC_MLME_SET_Request
   1665          }
   \       0x34   0xBD31             POP      {R0,R4,R5,PC}
   1666          /*----------------------------------------------------------------------------*/
   1667          

   \                                 In section .text, align 2, keep-with-next
   1668          void send_gtkhash_to_hostapd(uint8_t *buff , uint16_t len)
   1669          {
   1670          
   1671          #if(AUTO_CONFIG_ENABLE == 0)
   1672            // Len is always 64 Byte
   1673            
   1674            uint8_t hif_Send_buff [70] = {0};
   1675            uint8_t* buf = &hif_Send_buff [0];
   1676            
   1677            *buf++ = SEND_GTK_HASH;
   1678            memcpy(buf,buff,len);
   1679            buf+=len;
   1680            *buf++ = DUMMY_COMPORT;//Dummy Comport 
   1681            hif_send_msg_up(&hif_Send_buff[0], (len +1 ),response_laye_ID,PROTOCOL_ID_FOR_APP);
   1682          #endif
   1683          }
   \                     send_gtkhash_to_hostapd: (+1)
   \        0x0   0x4770             BX       LR
   1684          
   1685          
   1686          /****************************** HIF Message Communication **********************/
   1687          
   1688          /*---------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1689          uint8_t send_hif_seckey_cb( uint8_t cmd_id,uint8_t* seckey )
   1690          {
   \                     send_hif_seckey_cb: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB092             SUB      SP,SP,#+72
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x2146             MOVS     R1,#+70
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x466E             MOV      R6,SP
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1691            uint8_t hif_Send_buff [70] = {0};
   1692            uint8_t* buf = &hif_Send_buff [0];
   \       0x16   0x4668             MOV      R0,SP
   1693            
   1694            *buf++ = cmd_id;
   \       0x18   0x7004             STRB     R4,[R0, #+0]
   \       0x1A   0xF110 0x0801      ADDS     R8,R0,#+1
   1695            
   1696            memcpy(buf,&seckey[0],64);
   \       0x1E   0x2640             MOVS     R6,#+64
   \       0x20   0x002F             MOVS     R7,R5
   \       0x22   0x46C1             MOV      R9,R8
   \       0x24   0x0032             MOVS     R2,R6
   \       0x26   0x0039             MOVS     R1,R7
   \       0x28   0x4648             MOV      R0,R9
   \       0x2A   0x.... 0x....      BL       __aeabi_memcpy
   1697            buf+=64;
   \       0x2E   0xF118 0x0040      ADDS     R0,R8,#+64
   1698            *buf++ = DUMMY_COMPORT;//Dummy Comport 		            	     
   \       0x32   0x2155             MOVS     R1,#+85
   \       0x34   0x7001             STRB     R1,[R0, #+0]
   \       0x36   0xF110 0x0801      ADDS     R8,R0,#+1
   1699            hif_send_msg_up(&hif_Send_buff[0], 65,response_laye_ID,PROTOCOL_ID_FOR_APP);   
   \       0x3A   0x2301             MOVS     R3,#+1
   \       0x3C   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x40   0x7802             LDRB     R2,[R0, #+0]
   \       0x42   0x2141             MOVS     R1,#+65
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x.... 0x....      BL       hif_send_msg_up
   1700                return 0;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xB013             ADD      SP,SP,#+76
   \       0x4E   0xE8BD 0x83F0      POP      {R4-R9,PC}
   1701          }
   1702          
   1703          /*----------------------------------------------------------------------------*/
   1704          

   \                                 In section .text, align 2, keep-with-next
   1705          uint8_t send_SHA256_Update_data_to_hif(uint8_t *buf, uint16_t length)
   1706          {
   \                     send_SHA256_Update_data_to_hif: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0B2             SUB      SP,SP,#+200
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x21C8             MOVS     R1,#+200
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x466E             MOV      R6,SP
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       __aeabi_memset
   1707              uint8_t buffData [200] = {0};
   1708              uint16_t  iCnt = 0;
   \       0x16   0x2600             MOVS     R6,#+0
   1709              buffData[0] = 0xF2;
   \       0x18   0x20F2             MOVS     R0,#+242
   \       0x1A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1710          #if 0
   1711              for ( iCnt = 0; (iCnt <= length); iCnt+=4)
   1712              {
   1713                  uint32_t tempVal = (uint32_t) *((uint32_t *)(buf+iCnt));
   1714                  mem_rev_cpy(&buffData[1+iCnt],(uint8_t *)&tempVal,4);
   1715              }
   1716              
   1717          #else
   1718              memcpy(&buffData[1+iCnt],buf,length);
   \       0x1E   0x002F             MOVS     R7,R5
   \       0x20   0xB2BF             UXTH     R7,R7
   \       0x22   0x46A0             MOV      R8,R4
   \       0x24   0x4668             MOV      R0,SP
   \       0x26   0x0031             MOVS     R1,R6
   \       0x28   0xB289             UXTH     R1,R1
   \       0x2A   0x4408             ADD      R0,R0,R1
   \       0x2C   0xF110 0x0901      ADDS     R9,R0,#+1
   \       0x30   0x003A             MOVS     R2,R7
   \       0x32   0x4641             MOV      R1,R8
   \       0x34   0x4648             MOV      R0,R9
   \       0x36   0x.... 0x....      BL       __aeabi_memcpy
   1719          #endif
   1720              
   1721              //hif_send_msg_up(&buffData[0],1+iCnt,1);
   1722              //hif_send_msg_up(&buffData[0],length,1);
   1723          
   1724              return 0;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xB033             ADD      SP,SP,#+204
   \       0x3E   0xE8BD 0x83F0      POP      {R4-R9,PC}
   1725          }
   1726          
   1727          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1728          uint8_t send_hif_conf_cb (uint8_t cmd_id,uint8_t status )
   1729          {
   \                     send_hif_conf_cb: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x2105             MOVS     R1,#+5
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x466E             MOV      R6,SP
   \        0xC   0x0030             MOVS     R0,R6
   \        0xE   0x.... 0x....      BL       __aeabi_memset
   1730            uint8_t hif_Send_buff [ 5] = {0};
   1731            uint8_t* buf = &hif_Send_buff [0];
   \       0x12   0x4668             MOV      R0,SP
   1732            
   1733            *buf++ = cmd_id;
   \       0x14   0x7004             STRB     R4,[R0, #+0]
   \       0x16   0x1C40             ADDS     R0,R0,#+1
   1734            *buf++ = status;
   \       0x18   0x7005             STRB     R5,[R0, #+0]
   \       0x1A   0x1C40             ADDS     R0,R0,#+1
   1735            *buf++ = DUMMY_COMPORT;//Dummy Comport 
   \       0x1C   0x2155             MOVS     R1,#+85
   \       0x1E   0x7001             STRB     R1,[R0, #+0]
   \       0x20   0x1C46             ADDS     R6,R0,#+1
   1736            
   1737            hif_send_msg_up (&hif_Send_buff[0], 2, response_laye_ID, PROTOCOL_ID_FOR_APP);
   \       0x22   0x2301             MOVS     R3,#+1
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x28   0x7802             LDRB     R2,[R0, #+0]
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       hif_send_msg_up
   1738            return 0;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0xBD76             POP      {R1,R2,R4-R6,PC}
   1739          }
   1740          /*----------------------------------------------------------------------------*/
   1741          
   1742          
   1743          /*
   1744          ** =============================================================================
   1745          ** Private Function Definitions
   1746          ** =============================================================================
   1747          */
   1748          

   \                                 In section .text, align 2, keep-with-next
   1749          static void process_send_udp(uint8_t *buf, uint16_t length)
   1750          {
   \                     process_send_udp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1751            uint8_t status = 1;
   \        0x6   0x2601             MOVS     R6,#+1
   1752             status = send_udp(buf,length);
   \        0x8   0x0029             MOVS     R1,R5
   \        0xA   0xB289             UXTH     R1,R1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       send_udp
   \       0x12   0x0007             MOVS     R7,R0
   1753            send_hif_conf_cb(SEND_UDP_ECHO_RESP,status); 
   \       0x14   0x0039             MOVS     R1,R7
   \       0x16   0xB2C9             UXTB     R1,R1
   \       0x18   0x2049             MOVS     R0,#+73
   \       0x1A   0x.... 0x....      BL       send_hif_conf_cb
   1754          }
   \       0x1E   0xBDF1             POP      {R0,R4-R7,PC}
   1755          
   1756          

   \                                 In section .text, align 2, keep-with-next
   1757          static void send_version_info (void)
   1758          {
   \                     send_version_info: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   1759            uint8_t hifBuff[15];
   1760            hifBuff[0] = GET_VERSION_INFO_RESP;
   \        0x2   0x2063             MOVS     R0,#+99
   \        0x4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1761            memcpy (&hifBuff[1], VERSION_NUMBER, strlen(VERSION_NUMBER));
   \        0x8   0x2405             MOVS     R4,#+5
   \        0xA   0x.... 0x....      LDR.W    R5,??DataTable15_20
   \        0xE   0xF10D 0x0601      ADD      R6,SP,#+1
   \       0x12   0x0022             MOVS     R2,R4
   \       0x14   0x0029             MOVS     R1,R5
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy
   1762            hif_send_msg_up(hifBuff, strlen(VERSION_NUMBER)+1,response_laye_ID,PROTOCOL_ID_FOR_APP);
   \       0x1C   0x2301             MOVS     R3,#+1
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable15_2
   \       0x22   0x7802             LDRB     R2,[R0, #+0]
   \       0x24   0x2106             MOVS     R1,#+6
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x.... 0x....      BL       hif_send_msg_up
   1763          }
   \       0x2C   0xBD7F             POP      {R0-R6,PC}
   1764          
   1765          /*----------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
   1766          uint8_t hif_2_App_Interface_cb( uint8_t* pBuff,uint16_t len)
   1767          {
   \                     hif_2_App_Interface_cb: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x000C             MOVS     R4,R1
   1768            response_laye_ID = APP_DEF_LAYER_ID_TOOL;
   \        0x6   0x2102             MOVS     R1,#+2
   \        0x8   0x.... 0x....      LDR.W    R2,??DataTable15_2
   \        0xC   0x7011             STRB     R1,[R2, #+0]
   1769            uint8_t status = 0xFF;
   \        0xE   0x25FF             MOVS     R5,#+255
   1770            node_basic_config_t* p_basic_cfg = NULL;
   \       0x10   0x2600             MOVS     R6,#+0
   1771            uint8_t cmd_id = *pBuff; 
   \       0x12   0x7807             LDRB     R7,[R0, #+0]
   1772            pBuff+=4; 
   \       0x14   0xF110 0x0804      ADDS     R8,R0,#+4
   1773            
   1774            
   1775            switch ( cmd_id )
   \       0x18   0x0038             MOVS     R0,R7
   \       0x1A   0xB2C0             UXTB     R0,R0
   \       0x1C   0x2830             CMP      R0,#+48
   \       0x1E   0xF000 0x8080      BEQ.W    ??hif_2_App_Interface_cb_0
   \       0x22   0x2834             CMP      R0,#+52
   \       0x24   0xF000 0x808A      BEQ.W    ??hif_2_App_Interface_cb_1
   \       0x28   0x283C             CMP      R0,#+60
   \       0x2A   0xF000 0x808D      BEQ.W    ??hif_2_App_Interface_cb_2
   \       0x2E   0x2844             CMP      R0,#+68
   \       0x30   0xF000 0x8090      BEQ.W    ??hif_2_App_Interface_cb_3
   \       0x34   0x2848             CMP      R0,#+72
   \       0x36   0xF000 0x80B4      BEQ.W    ??hif_2_App_Interface_cb_4
   \       0x3A   0x284A             CMP      R0,#+74
   \       0x3C   0xF000 0x80BE      BEQ.W    ??hif_2_App_Interface_cb_5
   \       0x40   0x284C             CMP      R0,#+76
   \       0x42   0xF000 0x80A1      BEQ.W    ??hif_2_App_Interface_cb_6
   \       0x46   0x284E             CMP      R0,#+78
   \       0x48   0xF000 0x8091      BEQ.W    ??hif_2_App_Interface_cb_7
   \       0x4C   0x2850             CMP      R0,#+80
   \       0x4E   0xF000 0x80C2      BEQ.W    ??hif_2_App_Interface_cb_8
   \       0x52   0x2852             CMP      R0,#+82
   \       0x54   0xF000 0x80CC      BEQ.W    ??hif_2_App_Interface_cb_9
   \       0x58   0x2855             CMP      R0,#+85
   \       0x5A   0xF000 0x80D6      BEQ.W    ??hif_2_App_Interface_cb_10
   \       0x5E   0x2862             CMP      R0,#+98
   \       0x60   0xF000 0x818F      BEQ.W    ??hif_2_App_Interface_cb_11
   \       0x64   0x2864             CMP      R0,#+100
   \       0x66   0xF000 0x8192      BEQ.W    ??hif_2_App_Interface_cb_12
   \       0x6A   0x2866             CMP      R0,#+102
   \       0x6C   0xF000 0x8192      BEQ.W    ??hif_2_App_Interface_cb_13
   \       0x70   0x2867             CMP      R0,#+103
   \       0x72   0xF000 0x80D7      BEQ.W    ??hif_2_App_Interface_cb_14
   \       0x76   0x288B             CMP      R0,#+139
   \       0x78   0xD045             BEQ.N    ??hif_2_App_Interface_cb_15
   \       0x7A   0x288F             CMP      R0,#+143
   \       0x7C   0xD04E             BEQ.N    ??hif_2_App_Interface_cb_16
   \       0x7E   0x28C0             CMP      R0,#+192
   \       0x80   0xD02C             BEQ.N    ??hif_2_App_Interface_cb_17
   \       0x82   0x28C2             CMP      R0,#+194
   \       0x84   0xD037             BEQ.N    ??hif_2_App_Interface_cb_18
   \       0x86   0x28C4             CMP      R0,#+196
   \       0x88   0xF000 0x80D9      BEQ.W    ??hif_2_App_Interface_cb_19
   \       0x8C   0x28C6             CMP      R0,#+198
   \       0x8E   0xF000 0x80E3      BEQ.W    ??hif_2_App_Interface_cb_20
   \       0x92   0x28C9             CMP      R0,#+201
   \       0x94   0xF000 0x80ED      BEQ.W    ??hif_2_App_Interface_cb_21
   \       0x98   0x28CB             CMP      R0,#+203
   \       0x9A   0xF000 0x80F7      BEQ.W    ??hif_2_App_Interface_cb_22
   \       0x9E   0x28CD             CMP      R0,#+205
   \       0xA0   0xF000 0x8101      BEQ.W    ??hif_2_App_Interface_cb_23
   \       0xA4   0x28D1             CMP      R0,#+209
   \       0xA6   0xF000 0x810B      BEQ.W    ??hif_2_App_Interface_cb_24
   \       0xAA   0x28D3             CMP      R0,#+211
   \       0xAC   0xF000 0x8115      BEQ.W    ??hif_2_App_Interface_cb_25
   \       0xB0   0x28D5             CMP      R0,#+213
   \       0xB2   0xF000 0x811F      BEQ.W    ??hif_2_App_Interface_cb_26
   \       0xB6   0x28D7             CMP      R0,#+215
   \       0xB8   0xF000 0x8129      BEQ.W    ??hif_2_App_Interface_cb_27
   \       0xBC   0x28D9             CMP      R0,#+217
   \       0xBE   0xF000 0x8133      BEQ.W    ??hif_2_App_Interface_cb_28
   \       0xC2   0x28DB             CMP      R0,#+219
   \       0xC4   0xF000 0x813D      BEQ.W    ??hif_2_App_Interface_cb_29
   \       0xC8   0x28DD             CMP      R0,#+221
   \       0xCA   0xF000 0x8154      BEQ.W    ??hif_2_App_Interface_cb_30
   \       0xCE   0x28DF             CMP      R0,#+223
   \       0xD0   0xF000 0x8144      BEQ.W    ??hif_2_App_Interface_cb_31
   \       0xD4   0x28E3             CMP      R0,#+227
   \       0xD6   0xF000 0x8157      BEQ.W    ??hif_2_App_Interface_cb_32
   \       0xDA   0xE15F             B.N      ??hif_2_App_Interface_cb_33
   1776            {
   1777              
   1778              /******************************************************************************
   1779              FAN Stack Validation Tool Command ID
   1780              *******************************************************************************/   
   1781            case SWITCH_OPERATIONAL_MODE:
   1782              p_basic_cfg = &(fan_nwk_manager_app.node_basic_cfg);
   \                     ??hif_2_App_Interface_cb_17: (+1)
   \       0xDC   0x.... 0x....      LDR.W    R0,??DataTable15_21
   \       0xE0   0x0006             MOVS     R6,R0
   1783              p_basic_cfg->operational_mode = (pBuff[0]);
   \       0xE2   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0xE6   0x7030             STRB     R0,[R6, #+0]
   1784              //    store_nvm_param.operational_mode = p_basic_cfg->operational_mode;
   1785          #if(APP_NVM_FEATURE_ENABLED == 1)
   1786              nvm_store_node_basic_info();
   1787          #endif
   1788              send_hif_conf_cb(SWITCH_OPERATIONAL_MODE_CONF,0);
   \       0xE8   0x2100             MOVS     R1,#+0
   \       0xEA   0x20C1             MOVS     R0,#+193
   \       0xEC   0x.... 0x....      BL       send_hif_conf_cb
   1789              NVIC_SystemReset();
   \       0xF0   0x.... 0x....      BL       __NVIC_SystemReset
   1790              break;
   \       0xF4   0xE154             B.N      ??hif_2_App_Interface_cb_34
   1791              
   1792            case GET_OPERATIONAL_MODE:
   1793              p_basic_cfg = &(fan_nwk_manager_app.node_basic_cfg);
   \                     ??hif_2_App_Interface_cb_18: (+1)
   \       0xF6   0x.... 0x....      LDR.W    R0,??DataTable15_21
   \       0xFA   0x0006             MOVS     R6,R0
   1794              send_hif_conf_cb(SEND_OPERATINAL_MODE,p_basic_cfg->operational_mode );
   \       0xFC   0x7831             LDRB     R1,[R6, #+0]
   \       0xFE   0x20C3             MOVS     R0,#+195
   \      0x100   0x.... 0x....      BL       send_hif_conf_cb
   1795              break;
   \      0x104   0xE14C             B.N      ??hif_2_App_Interface_cb_34
   1796              
   1797            case SET_BASIC_CONFIG:  // FACtory Mode and RUN mode 
   1798              {
   1799                // Form Tool Config Page 
   1800                status = process_telec_set_operating_country(pBuff[0]);     
   \                     ??hif_2_App_Interface_cb_15: (+1)
   \      0x106   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0x10A   0x.... 0x....      BL       process_telec_set_operating_country
   \      0x10E   0x0005             MOVS     R5,R0
   1801                send_hif_conf_cb(SET_BASIC_CONFIG_CONF,status);
   \      0x110   0x0029             MOVS     R1,R5
   \      0x112   0xB2C9             UXTB     R1,R1
   \      0x114   0x208C             MOVS     R0,#+140
   \      0x116   0x.... 0x....      BL       send_hif_conf_cb
   1802              }
   1803              break;
   \      0x11A   0xE141             B.N      ??hif_2_App_Interface_cb_34
   1804              
   1805              
   1806            case SYSTEM_RESET:
   1807              NVIC_SystemReset();
   \                     ??hif_2_App_Interface_cb_16: (+1)
   \      0x11C   0x.... 0x....      BL       __NVIC_SystemReset
   1808              break;
   \      0x120   0xE13E             B.N      ??hif_2_App_Interface_cb_34
   1809              
   1810              
   1811          //  case APP_2_FAN_UDP_REQ:
   1812          //    if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   1813          //      trigger_udp_request(pBuff);
   1814          //    else
   1815          //      send_cmd_not_support();
   1816          //    break;            
   1817              
   1818              
   1819              /******************************************************************************
   1820              SwaggerHub Command ID
   1821              *******************************************************************************/   
   1822              
   1823            case NODE_START_STOP: // In auto mode we are starting the Node ...
   1824              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_0: (+1)
   \      0x122   0x....             LDR.N    R0,??DataTable15_14
   \      0x124   0x7B00             LDRB     R0,[R0, #+12]
   \      0x126   0x2800             CMP      R0,#+0
   \      0x128   0xD105             BNE.N    ??hif_2_App_Interface_cb_35
   1825              {
   1826                if(pBuff[0] == FAN_STOP_NODE)
   1827                {
   1828          #if(APP_NVM_FEATURE_ENABLED == 1)
   1829                  if(fan_nwk_manager_app.nvm_write_to_start == true)
   1830                  {
   1831                    change_join_state_for_nvm();
   1832                    fan_nwk_manager_app.nvm_write_to_start = false;
   1833                  }
   1834          #endif
   1835                }
   1836                process_set_node_start_stop(pBuff, len); 
   \      0x12A   0x0021             MOVS     R1,R4
   \      0x12C   0xB289             UXTH     R1,R1
   \      0x12E   0x4640             MOV      R0,R8
   \      0x130   0x.... 0x....      BL       process_set_node_start_stop
   \      0x134   0xE001             B.N      ??hif_2_App_Interface_cb_36
   1837              }
   1838              else
   1839                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_35: (+1)
   \      0x136   0x.... 0x....      BL       send_cmd_not_support
   1840              break;    
   \                     ??hif_2_App_Interface_cb_36: (+1)
   \      0x13A   0xE131             B.N      ??hif_2_App_Interface_cb_34
   1841              
   1842            case SET_FACTORY_MODE_PA_LEVEL_API:
   1843              process_set_facort_mode_PA_level_api(pBuff, len);
   \                     ??hif_2_App_Interface_cb_1: (+1)
   \      0x13C   0x0021             MOVS     R1,R4
   \      0x13E   0xB289             UXTH     R1,R1
   \      0x140   0x4640             MOV      R0,R8
   \      0x142   0x.... 0x....      BL       process_set_facort_mode_PA_level_api
   1844              break;
   \      0x146   0xE12B             B.N      ??hif_2_App_Interface_cb_34
   1845              
   1846            case SET_MAC_CHAN_PLAN_FIXED:    
   1847              process_set_mac_fixed_chan(pBuff, len);
   \                     ??hif_2_App_Interface_cb_2: (+1)
   \      0x148   0x0021             MOVS     R1,R4
   \      0x14A   0xB289             UXTH     R1,R1
   \      0x14C   0x4640             MOV      R0,R8
   \      0x14E   0x.... 0x....      BL       process_set_mac_fixed_chan
   1848              break;
   \      0x152   0xE125             B.N      ??hif_2_App_Interface_cb_34
   1849              
   1850            case RESET_RPL_MSG_RATE:
   1851              
   1852              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_3: (+1)
   \      0x154   0x....             LDR.N    R0,??DataTable15_14
   \      0x156   0x7B00             LDRB     R0,[R0, #+12]
   \      0x158   0x2801             CMP      R0,#+1
   \      0x15A   0xD105             BNE.N    ??hif_2_App_Interface_cb_37
   1853                process_reset_rpl_msg_rate(pBuff, len);
   \      0x15C   0x0021             MOVS     R1,R4
   \      0x15E   0xB289             UXTH     R1,R1
   \      0x160   0x4640             MOV      R0,R8
   \      0x162   0x.... 0x....      BL       process_reset_rpl_msg_rate
   \      0x166   0xE001             B.N      ??hif_2_App_Interface_cb_38
   1854              else
   1855                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_37: (+1)
   \      0x168   0x.... 0x....      BL       send_cmd_not_support
   1856              break;
   \                     ??hif_2_App_Interface_cb_38: (+1)
   \      0x16C   0xE118             B.N      ??hif_2_App_Interface_cb_34
   1857              
   1858            case GET_SEC_KEYS:
   1859              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_7: (+1)
   \      0x16E   0x....             LDR.N    R0,??DataTable15_14
   \      0x170   0x7B00             LDRB     R0,[R0, #+12]
   \      0x172   0x2801             CMP      R0,#+1
   \      0x174   0xD105             BNE.N    ??hif_2_App_Interface_cb_39
   1860                process_get_sec_keys(pBuff, len);
   \      0x176   0x0021             MOVS     R1,R4
   \      0x178   0xB289             UXTH     R1,R1
   \      0x17A   0x4640             MOV      R0,R8
   \      0x17C   0x.... 0x....      BL       process_get_sec_keys
   \      0x180   0xE001             B.N      ??hif_2_App_Interface_cb_40
   1861              else
   1862                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_39: (+1)
   \      0x182   0x.... 0x....      BL       send_cmd_not_support
   1863              break;
   \                     ??hif_2_App_Interface_cb_40: (+1)
   \      0x186   0xE10B             B.N      ??hif_2_App_Interface_cb_34
   1864              
   1865            case GET_IP_ADDRESSES:
   1866              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_6: (+1)
   \      0x188   0x....             LDR.N    R0,??DataTable15_14
   \      0x18A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x18C   0x2801             CMP      R0,#+1
   \      0x18E   0xD105             BNE.N    ??hif_2_App_Interface_cb_41
   1867                process_get_ip_address(pBuff, len);
   \      0x190   0x0021             MOVS     R1,R4
   \      0x192   0xB289             UXTH     R1,R1
   \      0x194   0x4640             MOV      R0,R8
   \      0x196   0x.... 0x....      BL       process_get_ip_address
   \      0x19A   0xE001             B.N      ??hif_2_App_Interface_cb_42
   1868              else
   1869                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_41: (+1)
   \      0x19C   0x.... 0x....      BL       send_cmd_not_support
   1870              break;
   \                     ??hif_2_App_Interface_cb_42: (+1)
   \      0x1A0   0xE0FE             B.N      ??hif_2_App_Interface_cb_34
   1871              
   1872            case SEND_UDP: // Sending UDP 
   1873              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_4: (+1)
   \      0x1A2   0x....             LDR.N    R0,??DataTable15_14
   \      0x1A4   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1A6   0x2801             CMP      R0,#+1
   \      0x1A8   0xD105             BNE.N    ??hif_2_App_Interface_cb_43
   1874                process_send_udp(pBuff, len);
   \      0x1AA   0x0021             MOVS     R1,R4
   \      0x1AC   0xB289             UXTH     R1,R1
   \      0x1AE   0x4640             MOV      R0,R8
   \      0x1B0   0x.... 0x....      BL       process_send_udp
   \      0x1B4   0xE001             B.N      ??hif_2_App_Interface_cb_44
   1875              else
   1876                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_43: (+1)
   \      0x1B6   0x.... 0x....      BL       send_cmd_not_support
   1877              break;
   \                     ??hif_2_App_Interface_cb_44: (+1)
   \      0x1BA   0xE0F1             B.N      ??hif_2_App_Interface_cb_34
   1878              
   1879            case SEND_ICMPv6: // Sending IPv6 Ping
   1880              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_5: (+1)
   \      0x1BC   0x....             LDR.N    R0,??DataTable15_14
   \      0x1BE   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1C0   0x2801             CMP      R0,#+1
   \      0x1C2   0xD105             BNE.N    ??hif_2_App_Interface_cb_45
   1881                send_icmpv6_request(pBuff, len);
   \      0x1C4   0x0021             MOVS     R1,R4
   \      0x1C6   0xB289             UXTH     R1,R1
   \      0x1C8   0x4640             MOV      R0,R8
   \      0x1CA   0x.... 0x....      BL       send_icmpv6_request
   \      0x1CE   0xE001             B.N      ??hif_2_App_Interface_cb_46
   1882              else
   1883                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_45: (+1)
   \      0x1D0   0x.... 0x....      BL       send_cmd_not_support
   1884              break;
   \                     ??hif_2_App_Interface_cb_46: (+1)
   \      0x1D4   0xE0E4             B.N      ??hif_2_App_Interface_cb_34
   1885              
   1886            case API_GET_DODAG_ROUTES:
   1887              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_8: (+1)
   \      0x1D6   0x....             LDR.N    R0,??DataTable15_14
   \      0x1D8   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1DA   0x2801             CMP      R0,#+1
   \      0x1DC   0xD105             BNE.N    ??hif_2_App_Interface_cb_47
   1888                process_get_dodag_routers(pBuff, len);
   \      0x1DE   0x0021             MOVS     R1,R4
   \      0x1E0   0xB289             UXTH     R1,R1
   \      0x1E2   0x4640             MOV      R0,R8
   \      0x1E4   0x.... 0x....      BL       process_get_dodag_routers
   \      0x1E8   0xE001             B.N      ??hif_2_App_Interface_cb_48
   1889              else
   1890                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_47: (+1)
   \      0x1EA   0x.... 0x....      BL       send_cmd_not_support
   1891              break;
   \                     ??hif_2_App_Interface_cb_48: (+1)
   \      0x1EE   0xE0D7             B.N      ??hif_2_App_Interface_cb_34
   1892              
   1893            case API_GET_NEIGHBOR_TABLE:
   1894              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_9: (+1)
   \      0x1F0   0x....             LDR.N    R0,??DataTable15_14
   \      0x1F2   0x7B00             LDRB     R0,[R0, #+12]
   \      0x1F4   0x2801             CMP      R0,#+1
   \      0x1F6   0xD105             BNE.N    ??hif_2_App_Interface_cb_49
   1895                process_get_neighbor_table(pBuff, len);
   \      0x1F8   0x0021             MOVS     R1,R4
   \      0x1FA   0xB289             UXTH     R1,R1
   \      0x1FC   0x4640             MOV      R0,R8
   \      0x1FE   0x.... 0x....      BL       process_get_neighbor_table
   \      0x202   0xE001             B.N      ??hif_2_App_Interface_cb_50
   1896              else
   1897                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_49: (+1)
   \      0x204   0x.... 0x....      BL       send_cmd_not_support
   1898              break;
   \                     ??hif_2_App_Interface_cb_50: (+1)
   \      0x208   0xE0CA             B.N      ??hif_2_App_Interface_cb_34
   1899              
   1900            case API_GET_JOIN_STATE:
   1901              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_10: (+1)
   \      0x20A   0x....             LDR.N    R0,??DataTable15_14
   \      0x20C   0x7B00             LDRB     R0,[R0, #+12]
   \      0x20E   0x2801             CMP      R0,#+1
   \      0x210   0xD105             BNE.N    ??hif_2_App_Interface_cb_51
   1902                process_get_current_join_state(pBuff, len);
   \      0x212   0x0021             MOVS     R1,R4
   \      0x214   0xB289             UXTH     R1,R1
   \      0x216   0x4640             MOV      R0,R8
   \      0x218   0x.... 0x....      BL       process_get_current_join_state
   \      0x21C   0xE001             B.N      ??hif_2_App_Interface_cb_52
   1903              else
   1904                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_51: (+1)
   \      0x21E   0x.... 0x....      BL       send_cmd_not_support
   1905              break;
   \                     ??hif_2_App_Interface_cb_52: (+1)
   \      0x222   0xE0BD             B.N      ??hif_2_App_Interface_cb_34
   1906              
   1907            case GET_DEVICE_PRIMERY_PARENTS_REQ:
   1908              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == RUN_MODE)
   \                     ??hif_2_App_Interface_cb_14: (+1)
   \      0x224   0x....             LDR.N    R0,??DataTable15_14
   \      0x226   0x7B00             LDRB     R0,[R0, #+12]
   \      0x228   0x2801             CMP      R0,#+1
   \      0x22A   0xD105             BNE.N    ??hif_2_App_Interface_cb_53
   1909                process_get_prefered_parents(pBuff,len);
   \      0x22C   0x0021             MOVS     R1,R4
   \      0x22E   0xB289             UXTH     R1,R1
   \      0x230   0x4640             MOV      R0,R8
   \      0x232   0x.... 0x....      BL       process_get_prefered_parents
   \      0x236   0xE001             B.N      ??hif_2_App_Interface_cb_54
   1910              else
   1911                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_53: (+1)
   \      0x238   0x.... 0x....      BL       send_cmd_not_support
   1912              break;
   \                     ??hif_2_App_Interface_cb_54: (+1)
   \      0x23C   0xE0B0             B.N      ??hif_2_App_Interface_cb_34
   1913              
   1914            case SET_TX_PKT_CONFIG:
   1915              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_19: (+1)
   \      0x23E   0x....             LDR.N    R0,??DataTable15_14
   \      0x240   0x7B00             LDRB     R0,[R0, #+12]
   \      0x242   0x2800             CMP      R0,#+0
   \      0x244   0xD105             BNE.N    ??hif_2_App_Interface_cb_55
   1916                process_set_pkt_tx(pBuff, len);
   \      0x246   0x0021             MOVS     R1,R4
   \      0x248   0xB289             UXTH     R1,R1
   \      0x24A   0x4640             MOV      R0,R8
   \      0x24C   0x.... 0x....      BL       process_set_pkt_tx
   \      0x250   0xE001             B.N      ??hif_2_App_Interface_cb_56
   1917              else
   1918                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_55: (+1)
   \      0x252   0x.... 0x....      BL       send_cmd_not_support
   1919              break;
   \                     ??hif_2_App_Interface_cb_56: (+1)
   \      0x256   0xE0A3             B.N      ??hif_2_App_Interface_cb_34
   1920              
   1921            case START_PACKET_TX_REQ:
   1922              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_20: (+1)
   \      0x258   0x....             LDR.N    R0,??DataTable15_14
   \      0x25A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x25C   0x2800             CMP      R0,#+0
   \      0x25E   0xD105             BNE.N    ??hif_2_App_Interface_cb_57
   1923                process_start_tx(pBuff, len);
   \      0x260   0x0021             MOVS     R1,R4
   \      0x262   0xB289             UXTH     R1,R1
   \      0x264   0x4640             MOV      R0,R8
   \      0x266   0x.... 0x....      BL       process_start_tx
   \      0x26A   0xE001             B.N      ??hif_2_App_Interface_cb_58
   1924              else
   1925                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_57: (+1)
   \      0x26C   0x.... 0x....      BL       send_cmd_not_support
   1926              break;
   \                     ??hif_2_App_Interface_cb_58: (+1)
   \      0x270   0xE096             B.N      ??hif_2_App_Interface_cb_34
   1927              
   1928            case STOP_PACKET_TX_REQ:
   1929              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_21: (+1)
   \      0x272   0x....             LDR.N    R0,??DataTable15_14
   \      0x274   0x7B00             LDRB     R0,[R0, #+12]
   \      0x276   0x2800             CMP      R0,#+0
   \      0x278   0xD105             BNE.N    ??hif_2_App_Interface_cb_59
   1930                process_stop_tx(pBuff, len);
   \      0x27A   0x0021             MOVS     R1,R4
   \      0x27C   0xB289             UXTH     R1,R1
   \      0x27E   0x4640             MOV      R0,R8
   \      0x280   0x.... 0x....      BL       process_stop_tx
   \      0x284   0xE001             B.N      ??hif_2_App_Interface_cb_60
   1931              else
   1932                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_59: (+1)
   \      0x286   0x.... 0x....      BL       send_cmd_not_support
   1933              break;
   \                     ??hif_2_App_Interface_cb_60: (+1)
   \      0x28A   0xE089             B.N      ??hif_2_App_Interface_cb_34
   1934              
   1935            case START_PACKET_RX_REQ:
   1936              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_22: (+1)
   \      0x28C   0x....             LDR.N    R0,??DataTable15_14
   \      0x28E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x290   0x2800             CMP      R0,#+0
   \      0x292   0xD105             BNE.N    ??hif_2_App_Interface_cb_61
   1937                process_start_rx(pBuff, len);
   \      0x294   0x0021             MOVS     R1,R4
   \      0x296   0xB289             UXTH     R1,R1
   \      0x298   0x4640             MOV      R0,R8
   \      0x29A   0x.... 0x....      BL       process_start_rx
   \      0x29E   0xE001             B.N      ??hif_2_App_Interface_cb_62
   1938              else
   1939                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_61: (+1)
   \      0x2A0   0x.... 0x....      BL       send_cmd_not_support
   1940              break;
   \                     ??hif_2_App_Interface_cb_62: (+1)
   \      0x2A4   0xE07C             B.N      ??hif_2_App_Interface_cb_34
   1941              
   1942            case STOP_PACKET_RX_REQ:
   1943              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_23: (+1)
   \      0x2A6   0x....             LDR.N    R0,??DataTable15_14
   \      0x2A8   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2AA   0x2800             CMP      R0,#+0
   \      0x2AC   0xD105             BNE.N    ??hif_2_App_Interface_cb_63
   1944                process_stop_rx(pBuff, len);
   \      0x2AE   0x0021             MOVS     R1,R4
   \      0x2B0   0xB289             UXTH     R1,R1
   \      0x2B2   0x4640             MOV      R0,R8
   \      0x2B4   0x.... 0x....      BL       process_stop_rx
   \      0x2B8   0xE001             B.N      ??hif_2_App_Interface_cb_64
   1945              else
   1946                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_63: (+1)
   \      0x2BA   0x.... 0x....      BL       send_cmd_not_support
   1947              break;
   \                     ??hif_2_App_Interface_cb_64: (+1)
   \      0x2BE   0xE06F             B.N      ??hif_2_App_Interface_cb_34
   1948              
   1949            case START_START_CONTINUOUS_TX_REQ:
   1950              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_24: (+1)
   \      0x2C0   0x....             LDR.N    R0,??DataTable15_14
   \      0x2C2   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2C4   0x2800             CMP      R0,#+0
   \      0x2C6   0xD105             BNE.N    ??hif_2_App_Interface_cb_65
   1951                process_start_continuous_tx(pBuff, len);
   \      0x2C8   0x0021             MOVS     R1,R4
   \      0x2CA   0xB289             UXTH     R1,R1
   \      0x2CC   0x4640             MOV      R0,R8
   \      0x2CE   0x.... 0x....      BL       process_start_continuous_tx
   \      0x2D2   0xE001             B.N      ??hif_2_App_Interface_cb_66
   1952              else
   1953                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_65: (+1)
   \      0x2D4   0x.... 0x....      BL       send_cmd_not_support
   1954              break; 
   \                     ??hif_2_App_Interface_cb_66: (+1)
   \      0x2D8   0xE062             B.N      ??hif_2_App_Interface_cb_34
   1955              
   1956            case STOP_CONTINUOUS_TX_REQ:
   1957              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_25: (+1)
   \      0x2DA   0x....             LDR.N    R0,??DataTable15_14
   \      0x2DC   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2DE   0x2800             CMP      R0,#+0
   \      0x2E0   0xD105             BNE.N    ??hif_2_App_Interface_cb_67
   1958                process_stop_continuous_tx(pBuff, len);
   \      0x2E2   0x0021             MOVS     R1,R4
   \      0x2E4   0xB289             UXTH     R1,R1
   \      0x2E6   0x4640             MOV      R0,R8
   \      0x2E8   0x.... 0x....      BL       process_stop_continuous_tx
   \      0x2EC   0xE001             B.N      ??hif_2_App_Interface_cb_68
   1959              else
   1960                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_67: (+1)
   \      0x2EE   0x.... 0x....      BL       send_cmd_not_support
   1961              break;
   \                     ??hif_2_App_Interface_cb_68: (+1)
   \      0x2F2   0xE055             B.N      ??hif_2_App_Interface_cb_34
   1962              
   1963            case START_CONTINUOUS_RX_REQ:
   1964              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_26: (+1)
   \      0x2F4   0x....             LDR.N    R0,??DataTable15_14
   \      0x2F6   0x7B00             LDRB     R0,[R0, #+12]
   \      0x2F8   0x2800             CMP      R0,#+0
   \      0x2FA   0xD105             BNE.N    ??hif_2_App_Interface_cb_69
   1965                process_start_continuous_rx(pBuff, len);
   \      0x2FC   0x0021             MOVS     R1,R4
   \      0x2FE   0xB289             UXTH     R1,R1
   \      0x300   0x4640             MOV      R0,R8
   \      0x302   0x.... 0x....      BL       process_start_continuous_rx
   \      0x306   0xE001             B.N      ??hif_2_App_Interface_cb_70
   1966              else
   1967                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_69: (+1)
   \      0x308   0x.... 0x....      BL       send_cmd_not_support
   1968              break;
   \                     ??hif_2_App_Interface_cb_70: (+1)
   \      0x30C   0xE048             B.N      ??hif_2_App_Interface_cb_34
   1969              
   1970            case STOP_CONTINUOUS_RX_REQ:
   1971              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_27: (+1)
   \      0x30E   0x....             LDR.N    R0,??DataTable15_14
   \      0x310   0x7B00             LDRB     R0,[R0, #+12]
   \      0x312   0x2800             CMP      R0,#+0
   \      0x314   0xD105             BNE.N    ??hif_2_App_Interface_cb_71
   1972                process_stop_continuous_rx(pBuff, len);
   \      0x316   0x0021             MOVS     R1,R4
   \      0x318   0xB289             UXTH     R1,R1
   \      0x31A   0x4640             MOV      R0,R8
   \      0x31C   0x.... 0x....      BL       process_stop_continuous_rx
   \      0x320   0xE001             B.N      ??hif_2_App_Interface_cb_72
   1973              else
   1974                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_71: (+1)
   \      0x322   0x.... 0x....      BL       send_cmd_not_support
   1975              break;
   \                     ??hif_2_App_Interface_cb_72: (+1)
   \      0x326   0xE03B             B.N      ??hif_2_App_Interface_cb_34
   1976              
   1977            case GET_RX_COUNT_DETAILS:
   1978              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_28: (+1)
   \      0x328   0x....             LDR.N    R0,??DataTable15_14
   \      0x32A   0x7B00             LDRB     R0,[R0, #+12]
   \      0x32C   0x2800             CMP      R0,#+0
   \      0x32E   0xD105             BNE.N    ??hif_2_App_Interface_cb_73
   1979                process_get_rx_details(pBuff, len);
   \      0x330   0x0021             MOVS     R1,R4
   \      0x332   0xB289             UXTH     R1,R1
   \      0x334   0x4640             MOV      R0,R8
   \      0x336   0x.... 0x....      BL       process_get_rx_details
   \      0x33A   0xE001             B.N      ??hif_2_App_Interface_cb_74
   1980              else
   1981                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_73: (+1)
   \      0x33C   0x.... 0x....      BL       send_cmd_not_support
   1982              break;
   \                     ??hif_2_App_Interface_cb_74: (+1)
   \      0x340   0xE02E             B.N      ??hif_2_App_Interface_cb_34
   1983              
   1984            case PHY_ENC_TEST_TX:
   1985              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_29: (+1)
   \      0x342   0x....             LDR.N    R0,??DataTable15_14
   \      0x344   0x7B00             LDRB     R0,[R0, #+12]
   \      0x346   0x2800             CMP      R0,#+0
   \      0x348   0xD105             BNE.N    ??hif_2_App_Interface_cb_75
   1986                process_test_phy_enc(pBuff, len);
   \      0x34A   0x0021             MOVS     R1,R4
   \      0x34C   0xB289             UXTH     R1,R1
   \      0x34E   0x4640             MOV      R0,R8
   \      0x350   0x.... 0x....      BL       process_test_phy_enc
   \      0x354   0xE001             B.N      ??hif_2_App_Interface_cb_76
   1987              else
   1988                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_75: (+1)
   \      0x356   0x.... 0x....      BL       send_cmd_not_support
   1989              break;
   \                     ??hif_2_App_Interface_cb_76: (+1)
   \      0x35A   0xE021             B.N      ??hif_2_App_Interface_cb_34
   1990              
   1991            case CMD_FACTROY_MODE_CHANNEL_SCAN_REQ:
   1992              if(fan_nwk_manager_app.node_basic_cfg.operational_mode == FACTORY_MODE)
   \                     ??hif_2_App_Interface_cb_31: (+1)
   \      0x35C   0x....             LDR.N    R0,??DataTable15_14
   \      0x35E   0x7B00             LDRB     R0,[R0, #+12]
   \      0x360   0x2800             CMP      R0,#+0
   \      0x362   0xD105             BNE.N    ??hif_2_App_Interface_cb_77
   1993                process_factory_mode_ch_scanning_req(pBuff, len);
   \      0x364   0x0021             MOVS     R1,R4
   \      0x366   0xB289             UXTH     R1,R1
   \      0x368   0x4640             MOV      R0,R8
   \      0x36A   0x.... 0x....      BL       process_factory_mode_ch_scanning_req
   \      0x36E   0xE001             B.N      ??hif_2_App_Interface_cb_78
   1994              else
   1995                send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_77: (+1)
   \      0x370   0x.... 0x....      BL       send_cmd_not_support
   1996              break;
   \                     ??hif_2_App_Interface_cb_78: (+1)
   \      0x374   0xE014             B.N      ??hif_2_App_Interface_cb_34
   1997              
   1998            case SET_RSSI_THRESHOLD:
   1999              process_set_rssi_threshold (pBuff, len);
   \                     ??hif_2_App_Interface_cb_30: (+1)
   \      0x376   0x0021             MOVS     R1,R4
   \      0x378   0xB289             UXTH     R1,R1
   \      0x37A   0x4640             MOV      R0,R8
   \      0x37C   0x.... 0x....      BL       process_set_rssi_threshold
   2000              break;
   \      0x380   0xE00E             B.N      ??hif_2_App_Interface_cb_34
   2001              
   2002            case GET_VERSION_INFO_REQ:
   2003              send_version_info ();       /*VERSION_NUMBER*/
   \                     ??hif_2_App_Interface_cb_11: (+1)
   \      0x382   0x.... 0x....      BL       send_version_info
   2004              break;
   \      0x386   0xE00B             B.N      ??hif_2_App_Interface_cb_34
   2005              
   2006            case GET_CONFIG_INFO_REQ:
   2007              process_get_config_info_req ();
   \                     ??hif_2_App_Interface_cb_32: (+1)
   \      0x388   0x.... 0x....      BL       process_get_config_info_req
   2008              break;
   \      0x38C   0xE008             B.N      ??hif_2_App_Interface_cb_34
   2009              
   2010            case GET_ALL_PARAM_INFO_REQ:
   2011              send_all_param_info_req ();
   \                     ??hif_2_App_Interface_cb_12: (+1)
   \      0x38E   0x.... 0x....      BL       send_all_param_info_req
   2012              break;
   \      0x392   0xE005             B.N      ??hif_2_App_Interface_cb_34
   2013              
   2014            case SOFTWARE_RESET:
   2015              node_start_stop (FAN_STOP_NODE);
   \                     ??hif_2_App_Interface_cb_13: (+1)
   \      0x394   0x2000             MOVS     R0,#+0
   \      0x396   0x.... 0x....      BL       node_start_stop
   2016              break;
   \      0x39A   0xE001             B.N      ??hif_2_App_Interface_cb_34
   2017              
   2018            default:    
   2019              send_cmd_not_support();
   \                     ??hif_2_App_Interface_cb_33: (+1)
   \      0x39C   0x.... 0x....      BL       send_cmd_not_support
   2020              break;
   2021            }
   2022            return HIF_SUCCESS;
   \                     ??hif_2_App_Interface_cb_34: (+1)
   \      0x3A0   0x2000             MOVS     R0,#+0
   \      0x3A2   0xE8BD 0x81F0      POP      {R4-R8,PC}
   2023          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x....'....        DC32     response_laye_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x....'....        DC32     hif_fan_test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0x....'....        DC32     hif

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0x....'....        DC32     icmv6_response_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0x....'....        DC32     mac_key_list+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0x....'....        DC32     mac_key_list+0x12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0x....'....        DC32     mac_key_list+0x23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0x....'....        DC32     mac_key_list+0x34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0x....'....        DC32     key_id_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \        0x0   0x....'....        DC32     TANSIT_KMP_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \        0x0   0x....'....        DC32     relay_reply_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \        0x0   0x....'....        DC32     authnt_interfac_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0xE6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0xF6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0x106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0x116

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0xE5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \        0x0   0x....'....        DC32     fan_nwk_manager_app+0xC

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x31 0x2E          DC8 "1.0.2"

   \              0x30 0x2E    

   \              0x32 0x00
   \        0x6                      DS8 2
   2024          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   APPhifForToolTest_Init
         8   -> hif_register_parser
       0   ChangeEndianness
       0   __NVIC_SystemReset
      16   allocate_hif_msg
        16   -> app_bm_alloc
       8   free_hif_msg
         8   -> app_bm_free
      24   gu2pcapp_node_config_set_conf
        24   -> __aeabi_memset
        24   -> hif_send_msg_up
      32   gu2pcapp_process_para_problem_msg_ind
        32   -> __aeabi_memset
        32   -> hif_send_msg_up
      32   gu2pcapp_send_dest_unreachable_icmp_ind
        32   -> __aeabi_memset
        32   -> hif_send_msg_up
      48   gu2pcapp_send_echo_req_res
        48   -> __aeabi_memcpy
        48   -> allocate_hif_msg
        48   -> free_hif_msg
        48   -> hif_send_msg_up
        48   -> mem_rev_cpy
       4   gu2pcapp_send_na_ind
       4   gu2pcapp_send_ns_ind
      24   hif_2_App_Interface_cb
        24   -> __NVIC_SystemReset
        24   -> node_start_stop
        24   -> process_factory_mode_ch_scanning_req
        24   -> process_get_config_info_req
        24   -> process_get_current_join_state
        24   -> process_get_dodag_routers
        24   -> process_get_ip_address
        24   -> process_get_neighbor_table
        24   -> process_get_prefered_parents
        24   -> process_get_rx_details
        24   -> process_get_sec_keys
        24   -> process_reset_rpl_msg_rate
        24   -> process_send_udp
        24   -> process_set_facort_mode_PA_level_api
        24   -> process_set_mac_fixed_chan
        24   -> process_set_node_start_stop
        24   -> process_set_pkt_tx
        24   -> process_set_rssi_threshold
        24   -> process_start_continuous_rx
        24   -> process_start_continuous_tx
        24   -> process_start_rx
        24   -> process_start_tx
        24   -> process_stop_continuous_rx
        24   -> process_stop_continuous_tx
        24   -> process_stop_rx
        24   -> process_stop_tx
        24   -> process_telec_set_operating_country
        24   -> process_test_phy_enc
        24   -> send_all_param_info_req
        24   -> send_cmd_not_support
        24   -> send_hif_conf_cb
        24   -> send_icmpv6_request
        24   -> send_version_info
      16   process_get_current_join_state
        16   -> get_current_join_state
        16   -> send_hif_conf_cb
      16   process_get_dodag_routers
        16   -> get_dodag_routers
      16   process_get_ip_address
        16   -> get_ip_address
      16   process_get_neighbor_table
        16   -> get_neighbor_table
      16   process_get_prefered_parents
        16   -> get_prefered_parents
     112   process_get_sec_keys
       112   -> __aeabi_memcpy
       112   -> __aeabi_memset
       112   -> send_hif_seckey_cb
      24   process_reset_rpl_msg_rate
        24   -> reset_rpl_msg_rate
        24   -> send_hif_conf_cb
      24   process_send_udp
        24   -> send_hif_conf_cb
        24   -> send_udp
      24   process_set_mac_fixed_chan
        24   -> App_factory_mode_channel_set
        24   -> mem_rev_cpy
        24   -> send_hif_conf_cb
        24   -> set_mac_chan_plan_fixed
       0   process_set_mac_reg_op_api
      16   process_set_node_start_stop
        16   -> node_start_stop
       0   process_start_network_scale_req
      16   process_wan_ping_reply
        16   -> recved_wan_ping_reply
      16   recv_data_from_eapol_auth
        16   -> is_send_as_udp
        16   -> memcmp
     232   send_SHA256_Update_data_to_hif
       232   -> __aeabi_memcpy
       232   -> __aeabi_memset
       8   send_cmd_not_support
         8   -> hif_send_msg_up
      64   send_gtk_update_indication
        64   -> FAN_MAC_MLME_SET_Request
        64   -> __aeabi_memcpy
        64   -> reset_incoming_frame_counter_for_stale_key
        64   -> trickle_timer_consistency_pc
       0   send_gtkhash_to_hostapd
      24   send_hif_conf_cb
        24   -> __aeabi_memset
        24   -> hif_send_msg_up
     104   send_hif_seckey_cb
       104   -> __aeabi_memcpy
       104   -> __aeabi_memset
       104   -> hif_send_msg_up
      32   send_icmpv6_after_delay
        32   -> __aeabi_memcpy
        32   -> app_bm_free
        32   -> send_icmpv6
      16   send_icmpv6_request
        16   -> send_icmpv6_with_count
      16   send_mac_security_set_request
        16   -> FAN_MAC_MLME_SET_Request
        16   -> add_security_key_descriptor_on_MAC
        16   -> generate_MAC_Security_Key
        16   -> reset_mac_frame_counter_cmd
        16   -> trickle_timer_consistency_pc
      72   send_udp_request
        72   -> __aeabi_memcpy
        72   -> __aeabi_memset
        72   -> mem_rev_cpy
      32   send_version_info
        32   -> __aeabi_memcpy
        32   -> hif_send_msg_up
      24   set_seq_key
        24   -> __aeabi_memset
        24   -> generate_MAC_Security_Key
        24   -> set_mac_security_on_LBR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       8  ?_0
      22  APPhifForToolTest_Init
      32  ChangeEndianness
      34  __NVIC_SystemReset
      22  allocate_hif_msg
      12  free_hif_msg
      54  gu2pcapp_node_config_set_conf
      82  gu2pcapp_process_para_problem_msg_ind
      82  gu2pcapp_send_dest_unreachable_icmp_ind
     254  gu2pcapp_send_echo_req_res
      10  gu2pcapp_send_na_ind
      10  gu2pcapp_send_ns_ind
     934  hif_2_App_Interface_cb
      16  hif_fan_test
       8  phyModeMapArr
      24  process_get_current_join_state
      12  process_get_dodag_routers
      12  process_get_ip_address
      12  process_get_neighbor_table
      18  process_get_prefered_parents
     112  process_get_sec_keys
      38  process_reset_rpl_msg_rate
      32  process_send_udp
      50  process_set_mac_fixed_chan
       2  process_set_mac_reg_op_api
      18  process_set_node_start_stop
       2  process_start_network_scale_req
      14  process_wan_ping_reply
     108  recv_data_from_eapol_auth
       1  response_laye_ID
      66  send_SHA256_Update_data_to_hif
      32  send_cmd_not_support
     228  send_gtk_update_indication
       2  send_gtkhash_to_hostapd
      54  send_hif_conf_cb
      82  send_hif_seckey_cb
      52  send_icmpv6_after_delay
      18  send_icmpv6_request
      54  send_mac_security_set_request
     146  send_udp_request
      46  send_version_info
      42  set_seq_key

 
    16 bytes in section .bss
     9 bytes in section .data
     8 bytes in section .rodata
 2'912 bytes in section .text
 
 2'912 bytes of CODE  memory
     8 bytes of CONST memory
    25 bytes of DATA  memory

Errors: none
Warnings: none
